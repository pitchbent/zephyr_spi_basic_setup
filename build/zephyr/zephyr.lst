
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

60000000 <qspiflash_config>:
60000000:	46 43 46 42 00 04 01 56 00 00 00 00 01 03 03 00     FCFB...V........
	...
60000040:	10 00 00 00 01 04 07 00 00 00 00 00 00 00 00 00     ................
60000050:	00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

60001000 <image_vector_table>:
60001000:	d1 00 20 41 00 38 00 60 00 00 00 00 30 10 00 60     .. A.8.`....0..`
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <boot_data>:
60001020:	00 00 00 60 00 00 80 00 00 00 00 00 ff ff ff ff     ...`............

60001030 <dcd_data>:
60001030:	d2 03 e0 41 cc 03 5c 04 40 0f c0 68 ff ff ff ff     ...A..\.@..h....
60001040:	40 0f c0 6c ff ff ff ff 40 0f c0 70 ff ff ff ff     @..l....@..p....
60001050:	40 0f c0 74 ff ff ff ff 40 0f c0 78 ff ff ff ff     @..t....@..x....
60001060:	40 0f c0 7c ff ff ff ff 40 0f c0 80 ff ff ff ff     @..|....@.......
60001070:	40 0d 80 30 00 00 20 01 40 0d 81 00 10 18 10 1b     @..0.. .@.......
60001080:	40 0f c0 14 00 0a 83 40 40 1f 80 14 00 00 00 00     @......@@.......
60001090:	40 1f 80 18 00 00 00 00 40 1f 80 1c 00 00 00 00     @.......@.......
600010a0:	40 1f 80 20 00 00 00 00 40 1f 80 24 00 00 00 00     @.. ....@..$....
600010b0:	40 1f 80 28 00 00 00 00 40 1f 80 2c 00 00 00 00     @..(....@..,....
600010c0:	40 1f 80 30 00 00 00 00 40 1f 80 34 00 00 00 00     @..0....@..4....
600010d0:	40 1f 80 38 00 00 00 00 40 1f 80 3c 00 00 00 00     @..8....@..<....
600010e0:	40 1f 80 40 00 00 00 00 40 1f 80 44 00 00 00 00     @..@....@..D....
600010f0:	40 1f 80 48 00 00 00 00 40 1f 80 4c 00 00 00 00     @..H....@..L....
60001100:	40 1f 80 50 00 00 00 00 40 1f 80 54 00 00 00 00     @..P....@..T....
60001110:	40 1f 80 58 00 00 00 00 40 1f 80 5c 00 00 00 00     @..X....@..\....
60001120:	40 1f 80 60 00 00 00 00 40 1f 80 64 00 00 00 00     @..`....@..d....
60001130:	40 1f 80 68 00 00 00 00 40 1f 80 6c 00 00 00 00     @..h....@..l....
60001140:	40 1f 80 70 00 00 00 00 40 1f 80 74 00 00 00 00     @..p....@..t....
60001150:	40 1f 80 78 00 00 00 00 40 1f 80 7c 00 00 00 00     @..x....@..|....
60001160:	40 1f 80 80 00 00 00 00 40 1f 80 84 00 00 00 10     @.......@.......
60001170:	40 1f 80 88 00 00 00 00 40 1f 80 8c 00 00 00 00     @.......@.......
60001180:	40 1f 80 90 00 00 00 00 40 1f 80 94 00 00 00 00     @.......@.......
60001190:	40 1f 80 98 00 00 00 00 40 1f 80 9c 00 00 00 00     @.......@.......
600011a0:	40 1f 80 a0 00 00 00 00 40 1f 80 a4 00 00 00 00     @.......@.......
600011b0:	40 1f 80 a8 00 00 00 00 40 1f 80 ac 00 00 00 00     @.......@.......
600011c0:	40 1f 80 b0 00 00 00 00 40 1f 81 88 00 00 00 e1     @.......@.......
600011d0:	40 1f 81 8c 00 00 00 e1 40 1f 81 90 00 00 00 e1     @.......@.......
600011e0:	40 1f 81 94 00 00 00 e1 40 1f 81 98 00 00 00 e1     @.......@.......
600011f0:	40 1f 81 9c 00 00 00 e1 40 1f 81 a0 00 00 00 e1     @.......@.......
60001200:	40 1f 81 a4 00 00 00 e1 40 1f 81 a8 00 00 00 e1     @.......@.......
60001210:	40 1f 81 ac 00 00 00 e1 40 1f 81 b0 00 00 00 e1     @.......@.......
60001220:	40 1f 81 b4 00 00 00 e1 40 1f 81 b8 00 00 00 e1     @.......@.......
60001230:	40 1f 81 bc 00 00 00 e1 40 1f 81 c0 00 00 00 e1     @.......@.......
60001240:	40 1f 81 c4 00 00 00 e1 40 1f 81 c8 00 00 00 e1     @.......@.......
60001250:	40 1f 81 cc 00 00 00 e1 40 1f 81 d0 00 00 00 e1     @.......@.......
60001260:	40 1f 81 d4 00 00 00 e1 40 1f 81 d8 00 00 00 e1     @.......@.......
60001270:	40 1f 81 dc 00 00 00 e1 40 1f 81 e0 00 00 00 e1     @.......@.......
60001280:	40 1f 81 e4 00 00 00 e1 40 1f 81 e8 00 00 00 e1     @.......@.......
60001290:	40 1f 81 ec 00 00 00 e1 40 1f 81 f0 00 00 00 e1     @.......@.......
600012a0:	40 1f 81 f4 00 00 00 e1 40 1f 81 f8 00 00 00 e1     @.......@.......
600012b0:	40 1f 81 fc 00 00 00 e1 40 1f 82 00 00 00 00 e1     @.......@.......
600012c0:	40 1f 82 04 00 00 00 e1 40 1f 82 08 00 00 00 e1     @.......@.......
600012d0:	40 1f 82 0c 00 00 00 e1 40 1f 82 10 00 00 00 e1     @.......@.......
600012e0:	40 1f 82 14 00 00 00 e1 40 1f 82 18 00 00 00 e1     @.......@.......
600012f0:	40 1f 82 1c 00 00 00 e1 40 1f 82 20 00 00 00 e1     @.......@.. ....
60001300:	40 1f 82 24 00 00 00 e1 40 2f 00 00 10 00 00 04     @..$....@/......
60001310:	40 2f 00 08 00 00 00 81 40 2f 00 0c 00 00 00 81     @/......@/......
60001320:	40 2f 00 10 80 00 00 1b 40 2f 00 14 82 00 00 1b     @/......@/......
60001330:	40 2f 00 18 84 00 00 1b 40 2f 00 04 00 00 79 88     @/......@/....y.
60001340:	40 2f 00 40 00 00 0f 07 40 2f 00 44 00 65 29 22     @/.@....@/.D.e)"
60001350:	40 2f 00 48 00 01 09 20 40 2f 00 4c 50 21 0a 08     @/.H... @/.LP!..
60001360:	40 2f 00 80 00 00 00 21 40 2f 00 84 00 88 88 88     @/.....!@/......
60001370:	40 2f 00 94 00 00 00 02 40 2f 00 98 00 00 00 00     @/......@/......
60001380:	40 2f 00 90 80 00 00 00 40 2f 00 9c a5 5a 00 0f     @/......@/...Z..
60001390:	cf 00 0c 1c 40 2f 00 3c 00 00 00 01 cc 00 14 04     ....@/.<........
600013a0:	40 2f 00 90 80 00 00 00 40 2f 00 9c a5 5a 00 0c     @/......@/...Z..
600013b0:	cf 00 0c 1c 40 2f 00 3c 00 00 00 01 cc 00 14 04     ....@/.<........
600013c0:	40 2f 00 90 80 00 00 00 40 2f 00 9c a5 5a 00 0c     @/......@/...Z..
600013d0:	cf 00 0c 1c 40 2f 00 3c 00 00 00 01 cc 00 1c 04     ....@/.<........
600013e0:	40 2f 00 a0 00 00 00 30 40 2f 00 90 80 00 00 00     @/.....0@/......
600013f0:	40 2f 00 9c a5 5a 00 0a cf 00 0c 1c 40 2f 00 3c     @/...Z......@/.<
60001400:	00 00 00 01 cc 00 0c 04 40 2f 00 4c 50 21 0a 09     ........@/.LP!..
	...

60003800 <_vector_table>:
60003800:	80 2d 00 80 4d 63 00 60 cf 9c 00 60 21 63 00 60     .-..Mc.`...`!c.`
60003810:	21 63 00 60 21 63 00 60 21 63 00 60 00 00 00 00     !c.`!c.`!c.`....
	...
6000382c:	31 5c 00 60 21 63 00 60 00 00 00 00 c5 5b 00 60     1\.`!c.`.....[.`
6000383c:	9d 74 00 60                                         .t.`

60003840 <_irq_vector_table>:
60003840:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003850:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003860:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003870:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003880:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003890:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600038a0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600038b0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600038c0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600038d0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600038e0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600038f0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003900:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003910:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003920:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003930:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003940:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003950:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003960:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003970:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003980:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003990:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600039a0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600039b0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600039c0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600039d0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600039e0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
600039f0:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003a00:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003a10:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003a20:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003a30:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003a40:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003a50:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003a60:	e5 5c 00 60 e5 5c 00 60 e5 5c 00 60 e5 5c 00 60     .\.`.\.`.\.`.\.`
60003a70:	e5 5c 00 60 e5 5c 00 60                             .\.`.\.`

Disassembly of section text:

60003a78 <__aeabi_uldivmod>:
60003a78:	b953      	cbnz	r3, 60003a90 <__aeabi_uldivmod+0x18>
60003a7a:	b94a      	cbnz	r2, 60003a90 <__aeabi_uldivmod+0x18>
60003a7c:	2900      	cmp	r1, #0
60003a7e:	bf08      	it	eq
60003a80:	2800      	cmpeq	r0, #0
60003a82:	bf1c      	itt	ne
60003a84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
60003a88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
60003a8c:	f000 b80c 	b.w	60003aa8 <__aeabi_idiv0>
60003a90:	f1ad 0c08 	sub.w	ip, sp, #8
60003a94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
60003a98:	f000 f808 	bl	60003aac <__udivmoddi4>
60003a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
60003aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
60003aa4:	b004      	add	sp, #16
60003aa6:	4770      	bx	lr

60003aa8 <__aeabi_idiv0>:
60003aa8:	4770      	bx	lr
60003aaa:	bf00      	nop

60003aac <__udivmoddi4>:
60003aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60003ab0:	4686      	mov	lr, r0
60003ab2:	468c      	mov	ip, r1
60003ab4:	4608      	mov	r0, r1
60003ab6:	9e08      	ldr	r6, [sp, #32]
60003ab8:	4615      	mov	r5, r2
60003aba:	4674      	mov	r4, lr
60003abc:	4619      	mov	r1, r3
60003abe:	2b00      	cmp	r3, #0
60003ac0:	f040 80c2 	bne.w	60003c48 <__udivmoddi4+0x19c>
60003ac4:	4285      	cmp	r5, r0
60003ac6:	fab2 f282 	clz	r2, r2
60003aca:	d945      	bls.n	60003b58 <__udivmoddi4+0xac>
60003acc:	b14a      	cbz	r2, 60003ae2 <__udivmoddi4+0x36>
60003ace:	f1c2 0320 	rsb	r3, r2, #32
60003ad2:	fa00 fc02 	lsl.w	ip, r0, r2
60003ad6:	fa2e f303 	lsr.w	r3, lr, r3
60003ada:	4095      	lsls	r5, r2
60003adc:	ea43 0c0c 	orr.w	ip, r3, ip
60003ae0:	4094      	lsls	r4, r2
60003ae2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
60003ae6:	b2a8      	uxth	r0, r5
60003ae8:	fbbc f8fe 	udiv	r8, ip, lr
60003aec:	0c23      	lsrs	r3, r4, #16
60003aee:	fb0e cc18 	mls	ip, lr, r8, ip
60003af2:	fb08 f900 	mul.w	r9, r8, r0
60003af6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
60003afa:	4599      	cmp	r9, r3
60003afc:	d928      	bls.n	60003b50 <__udivmoddi4+0xa4>
60003afe:	18eb      	adds	r3, r5, r3
60003b00:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
60003b04:	d204      	bcs.n	60003b10 <__udivmoddi4+0x64>
60003b06:	4599      	cmp	r9, r3
60003b08:	d902      	bls.n	60003b10 <__udivmoddi4+0x64>
60003b0a:	f1a8 0702 	sub.w	r7, r8, #2
60003b0e:	442b      	add	r3, r5
60003b10:	eba3 0309 	sub.w	r3, r3, r9
60003b14:	b2a4      	uxth	r4, r4
60003b16:	fbb3 fcfe 	udiv	ip, r3, lr
60003b1a:	fb0e 331c 	mls	r3, lr, ip, r3
60003b1e:	fb0c f000 	mul.w	r0, ip, r0
60003b22:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
60003b26:	42a0      	cmp	r0, r4
60003b28:	d914      	bls.n	60003b54 <__udivmoddi4+0xa8>
60003b2a:	192c      	adds	r4, r5, r4
60003b2c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
60003b30:	d204      	bcs.n	60003b3c <__udivmoddi4+0x90>
60003b32:	42a0      	cmp	r0, r4
60003b34:	d902      	bls.n	60003b3c <__udivmoddi4+0x90>
60003b36:	f1ac 0302 	sub.w	r3, ip, #2
60003b3a:	442c      	add	r4, r5
60003b3c:	1a24      	subs	r4, r4, r0
60003b3e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
60003b42:	b11e      	cbz	r6, 60003b4c <__udivmoddi4+0xa0>
60003b44:	40d4      	lsrs	r4, r2
60003b46:	2300      	movs	r3, #0
60003b48:	6034      	str	r4, [r6, #0]
60003b4a:	6073      	str	r3, [r6, #4]
60003b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60003b50:	4647      	mov	r7, r8
60003b52:	e7dd      	b.n	60003b10 <__udivmoddi4+0x64>
60003b54:	4663      	mov	r3, ip
60003b56:	e7f1      	b.n	60003b3c <__udivmoddi4+0x90>
60003b58:	bb92      	cbnz	r2, 60003bc0 <__udivmoddi4+0x114>
60003b5a:	1b43      	subs	r3, r0, r5
60003b5c:	2101      	movs	r1, #1
60003b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
60003b62:	b2af      	uxth	r7, r5
60003b64:	fbb3 fcfe 	udiv	ip, r3, lr
60003b68:	0c20      	lsrs	r0, r4, #16
60003b6a:	fb0e 331c 	mls	r3, lr, ip, r3
60003b6e:	fb0c f807 	mul.w	r8, ip, r7
60003b72:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
60003b76:	4598      	cmp	r8, r3
60003b78:	d962      	bls.n	60003c40 <__udivmoddi4+0x194>
60003b7a:	18eb      	adds	r3, r5, r3
60003b7c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
60003b80:	d204      	bcs.n	60003b8c <__udivmoddi4+0xe0>
60003b82:	4598      	cmp	r8, r3
60003b84:	d902      	bls.n	60003b8c <__udivmoddi4+0xe0>
60003b86:	f1ac 0002 	sub.w	r0, ip, #2
60003b8a:	442b      	add	r3, r5
60003b8c:	eba3 0308 	sub.w	r3, r3, r8
60003b90:	b2a4      	uxth	r4, r4
60003b92:	fbb3 fcfe 	udiv	ip, r3, lr
60003b96:	fb0e 331c 	mls	r3, lr, ip, r3
60003b9a:	fb0c f707 	mul.w	r7, ip, r7
60003b9e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
60003ba2:	42a7      	cmp	r7, r4
60003ba4:	d94e      	bls.n	60003c44 <__udivmoddi4+0x198>
60003ba6:	192c      	adds	r4, r5, r4
60003ba8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
60003bac:	d204      	bcs.n	60003bb8 <__udivmoddi4+0x10c>
60003bae:	42a7      	cmp	r7, r4
60003bb0:	d902      	bls.n	60003bb8 <__udivmoddi4+0x10c>
60003bb2:	f1ac 0302 	sub.w	r3, ip, #2
60003bb6:	442c      	add	r4, r5
60003bb8:	1be4      	subs	r4, r4, r7
60003bba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
60003bbe:	e7c0      	b.n	60003b42 <__udivmoddi4+0x96>
60003bc0:	f1c2 0320 	rsb	r3, r2, #32
60003bc4:	fa20 f103 	lsr.w	r1, r0, r3
60003bc8:	4095      	lsls	r5, r2
60003bca:	4090      	lsls	r0, r2
60003bcc:	fa2e f303 	lsr.w	r3, lr, r3
60003bd0:	4303      	orrs	r3, r0
60003bd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
60003bd6:	b2af      	uxth	r7, r5
60003bd8:	fbb1 fcfe 	udiv	ip, r1, lr
60003bdc:	fb0e 101c 	mls	r0, lr, ip, r1
60003be0:	0c19      	lsrs	r1, r3, #16
60003be2:	fb0c f807 	mul.w	r8, ip, r7
60003be6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
60003bea:	4588      	cmp	r8, r1
60003bec:	fa04 f402 	lsl.w	r4, r4, r2
60003bf0:	d922      	bls.n	60003c38 <__udivmoddi4+0x18c>
60003bf2:	1869      	adds	r1, r5, r1
60003bf4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
60003bf8:	d204      	bcs.n	60003c04 <__udivmoddi4+0x158>
60003bfa:	4588      	cmp	r8, r1
60003bfc:	d902      	bls.n	60003c04 <__udivmoddi4+0x158>
60003bfe:	f1ac 0002 	sub.w	r0, ip, #2
60003c02:	4429      	add	r1, r5
60003c04:	eba1 0108 	sub.w	r1, r1, r8
60003c08:	b29b      	uxth	r3, r3
60003c0a:	fbb1 fcfe 	udiv	ip, r1, lr
60003c0e:	fb0e 111c 	mls	r1, lr, ip, r1
60003c12:	fb0c f707 	mul.w	r7, ip, r7
60003c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
60003c1a:	429f      	cmp	r7, r3
60003c1c:	d90e      	bls.n	60003c3c <__udivmoddi4+0x190>
60003c1e:	18eb      	adds	r3, r5, r3
60003c20:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
60003c24:	d204      	bcs.n	60003c30 <__udivmoddi4+0x184>
60003c26:	429f      	cmp	r7, r3
60003c28:	d902      	bls.n	60003c30 <__udivmoddi4+0x184>
60003c2a:	f1ac 0102 	sub.w	r1, ip, #2
60003c2e:	442b      	add	r3, r5
60003c30:	1bdb      	subs	r3, r3, r7
60003c32:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
60003c36:	e792      	b.n	60003b5e <__udivmoddi4+0xb2>
60003c38:	4660      	mov	r0, ip
60003c3a:	e7e3      	b.n	60003c04 <__udivmoddi4+0x158>
60003c3c:	4661      	mov	r1, ip
60003c3e:	e7f7      	b.n	60003c30 <__udivmoddi4+0x184>
60003c40:	4660      	mov	r0, ip
60003c42:	e7a3      	b.n	60003b8c <__udivmoddi4+0xe0>
60003c44:	4663      	mov	r3, ip
60003c46:	e7b7      	b.n	60003bb8 <__udivmoddi4+0x10c>
60003c48:	4283      	cmp	r3, r0
60003c4a:	d906      	bls.n	60003c5a <__udivmoddi4+0x1ae>
60003c4c:	b916      	cbnz	r6, 60003c54 <__udivmoddi4+0x1a8>
60003c4e:	2100      	movs	r1, #0
60003c50:	4608      	mov	r0, r1
60003c52:	e77b      	b.n	60003b4c <__udivmoddi4+0xa0>
60003c54:	e9c6 e000 	strd	lr, r0, [r6]
60003c58:	e7f9      	b.n	60003c4e <__udivmoddi4+0x1a2>
60003c5a:	fab3 f783 	clz	r7, r3
60003c5e:	b98f      	cbnz	r7, 60003c84 <__udivmoddi4+0x1d8>
60003c60:	4283      	cmp	r3, r0
60003c62:	d301      	bcc.n	60003c68 <__udivmoddi4+0x1bc>
60003c64:	4572      	cmp	r2, lr
60003c66:	d808      	bhi.n	60003c7a <__udivmoddi4+0x1ce>
60003c68:	ebbe 0402 	subs.w	r4, lr, r2
60003c6c:	eb60 0303 	sbc.w	r3, r0, r3
60003c70:	2001      	movs	r0, #1
60003c72:	469c      	mov	ip, r3
60003c74:	b91e      	cbnz	r6, 60003c7e <__udivmoddi4+0x1d2>
60003c76:	2100      	movs	r1, #0
60003c78:	e768      	b.n	60003b4c <__udivmoddi4+0xa0>
60003c7a:	4638      	mov	r0, r7
60003c7c:	e7fa      	b.n	60003c74 <__udivmoddi4+0x1c8>
60003c7e:	e9c6 4c00 	strd	r4, ip, [r6]
60003c82:	e7f8      	b.n	60003c76 <__udivmoddi4+0x1ca>
60003c84:	f1c7 0c20 	rsb	ip, r7, #32
60003c88:	40bb      	lsls	r3, r7
60003c8a:	fa22 f40c 	lsr.w	r4, r2, ip
60003c8e:	431c      	orrs	r4, r3
60003c90:	fa2e f10c 	lsr.w	r1, lr, ip
60003c94:	fa20 f30c 	lsr.w	r3, r0, ip
60003c98:	40b8      	lsls	r0, r7
60003c9a:	4301      	orrs	r1, r0
60003c9c:	ea4f 4914 	mov.w	r9, r4, lsr #16
60003ca0:	fa0e f507 	lsl.w	r5, lr, r7
60003ca4:	fbb3 f8f9 	udiv	r8, r3, r9
60003ca8:	fa1f fe84 	uxth.w	lr, r4
60003cac:	fb09 3018 	mls	r0, r9, r8, r3
60003cb0:	0c0b      	lsrs	r3, r1, #16
60003cb2:	fb08 fa0e 	mul.w	sl, r8, lr
60003cb6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
60003cba:	459a      	cmp	sl, r3
60003cbc:	fa02 f207 	lsl.w	r2, r2, r7
60003cc0:	d940      	bls.n	60003d44 <__udivmoddi4+0x298>
60003cc2:	18e3      	adds	r3, r4, r3
60003cc4:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
60003cc8:	d204      	bcs.n	60003cd4 <__udivmoddi4+0x228>
60003cca:	459a      	cmp	sl, r3
60003ccc:	d902      	bls.n	60003cd4 <__udivmoddi4+0x228>
60003cce:	f1a8 0002 	sub.w	r0, r8, #2
60003cd2:	4423      	add	r3, r4
60003cd4:	eba3 030a 	sub.w	r3, r3, sl
60003cd8:	b289      	uxth	r1, r1
60003cda:	fbb3 f8f9 	udiv	r8, r3, r9
60003cde:	fb09 3318 	mls	r3, r9, r8, r3
60003ce2:	fb08 fe0e 	mul.w	lr, r8, lr
60003ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
60003cea:	458e      	cmp	lr, r1
60003cec:	d92c      	bls.n	60003d48 <__udivmoddi4+0x29c>
60003cee:	1861      	adds	r1, r4, r1
60003cf0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
60003cf4:	d204      	bcs.n	60003d00 <__udivmoddi4+0x254>
60003cf6:	458e      	cmp	lr, r1
60003cf8:	d902      	bls.n	60003d00 <__udivmoddi4+0x254>
60003cfa:	f1a8 0302 	sub.w	r3, r8, #2
60003cfe:	4421      	add	r1, r4
60003d00:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
60003d04:	fba0 9802 	umull	r9, r8, r0, r2
60003d08:	eba1 010e 	sub.w	r1, r1, lr
60003d0c:	4541      	cmp	r1, r8
60003d0e:	46ce      	mov	lr, r9
60003d10:	4643      	mov	r3, r8
60003d12:	d302      	bcc.n	60003d1a <__udivmoddi4+0x26e>
60003d14:	d106      	bne.n	60003d24 <__udivmoddi4+0x278>
60003d16:	454d      	cmp	r5, r9
60003d18:	d204      	bcs.n	60003d24 <__udivmoddi4+0x278>
60003d1a:	ebb9 0e02 	subs.w	lr, r9, r2
60003d1e:	eb68 0304 	sbc.w	r3, r8, r4
60003d22:	3801      	subs	r0, #1
60003d24:	2e00      	cmp	r6, #0
60003d26:	d0a6      	beq.n	60003c76 <__udivmoddi4+0x1ca>
60003d28:	ebb5 020e 	subs.w	r2, r5, lr
60003d2c:	eb61 0103 	sbc.w	r1, r1, r3
60003d30:	fa01 fc0c 	lsl.w	ip, r1, ip
60003d34:	fa22 f307 	lsr.w	r3, r2, r7
60003d38:	ea4c 0303 	orr.w	r3, ip, r3
60003d3c:	40f9      	lsrs	r1, r7
60003d3e:	e9c6 3100 	strd	r3, r1, [r6]
60003d42:	e798      	b.n	60003c76 <__udivmoddi4+0x1ca>
60003d44:	4640      	mov	r0, r8
60003d46:	e7c5      	b.n	60003cd4 <__udivmoddi4+0x228>
60003d48:	4643      	mov	r3, r8
60003d4a:	e7d9      	b.n	60003d00 <__udivmoddi4+0x254>
60003d4c:	0000      	movs	r0, r0
	...

60003d50 <LPSPI_MasterSetDelayTimes>:
 */
uint32_t LPSPI_MasterSetDelayTimes(LPSPI_Type *base,
                                   uint32_t delayTimeInNanoSec,
                                   lpspi_delay_type_t whichDelay,
                                   uint32_t srcClock_Hz)
{
60003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60003d54:	b085      	sub	sp, #20
60003d56:	4688      	mov	r8, r1
    uint32_t additionalScaler = 0;

    /*As the RM note, the LPSPI baud rate clock is itself divided by the PRESCALE setting, which can vary between
     * transfers.*/
    clockDividedPrescaler =
        srcClock_Hz / s_baudratePrescaler[(base->TCR & LPSPI_TCR_PRESCALE_MASK) >> LPSPI_TCR_PRESCALE_SHIFT];
60003d58:	4943      	ldr	r1, [pc, #268]	; (60003e68 <LPSPI_MasterSetDelayTimes+0x118>)
{
60003d5a:	9202      	str	r2, [sp, #8]
        srcClock_Hz / s_baudratePrescaler[(base->TCR & LPSPI_TCR_PRESCALE_MASK) >> LPSPI_TCR_PRESCALE_SHIFT];
60003d5c:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
60003d5e:	9001      	str	r0, [sp, #4]
        srcClock_Hz / s_baudratePrescaler[(base->TCR & LPSPI_TCR_PRESCALE_MASK) >> LPSPI_TCR_PRESCALE_SHIFT];
60003d60:	f3c2 62c2 	ubfx	r2, r2, #27, #3
60003d64:	5c8a      	ldrb	r2, [r1, r2]
    clockDividedPrescaler =
60003d66:	fbb3 f6f2 	udiv	r6, r3, r2
    bestScaler = 0xFFU;

    /* Calculate the initial (min) delay and maximum possible delay based on the specific delay as
     * the delay divisors are slightly different based on which delay we are configuring.
     */
    if (whichDelay == kLPSPI_BetweenTransfer)
60003d6a:	9b02      	ldr	r3, [sp, #8]
         calculated values (uint64_t), we need to break up the calculation into several steps to ensure
         accurate calculated results
         */
        initialDelayNanoSec = 1000000000U;
        initialDelayNanoSec *= 2U;
        initialDelayNanoSec /= clockDividedPrescaler;
60003d6c:	4632      	mov	r2, r6
    if (whichDelay == kLPSPI_BetweenTransfer)
60003d6e:	2b03      	cmp	r3, #3
        initialDelayNanoSec /= clockDividedPrescaler;
60003d70:	f04f 0300 	mov.w	r3, #0
    if (whichDelay == kLPSPI_BetweenTransfer)
60003d74:	d13d      	bne.n	60003df2 <LPSPI_MasterSetDelayTimes+0xa2>
        /* Calculate the maximum delay */
        bestDelay = 1000000000U;
        bestDelay *= 257U; /* based on DBT+2, or 255 + 2 */
        bestDelay /= clockDividedPrescaler;

        additionalScaler = 1U;
60003d76:	2401      	movs	r4, #1
        initialDelayNanoSec /= clockDividedPrescaler;
60003d78:	a135      	add	r1, pc, #212	; (adr r1, 60003e50 <LPSPI_MasterSetDelayTimes+0x100>)
60003d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
60003d7e:	f7ff fe7b 	bl	60003a78 <__aeabi_uldivmod>
        bestDelay /= clockDividedPrescaler;
60003d82:	4632      	mov	r2, r6
        initialDelayNanoSec /= clockDividedPrescaler;
60003d84:	4607      	mov	r7, r0
60003d86:	468a      	mov	sl, r1
        bestDelay /= clockDividedPrescaler;
60003d88:	2300      	movs	r3, #0
60003d8a:	a133      	add	r1, pc, #204	; (adr r1, 60003e58 <LPSPI_MasterSetDelayTimes+0x108>)
60003d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
60003d90:	f7ff fe72 	bl	60003a78 <__aeabi_uldivmod>
60003d94:	4605      	mov	r5, r0

    /* If the initial, default delay is already greater than the desired delay, then
     * set the delay to their initial value (0) and return the delay. In other words,
     * there is no way to decrease the delay value further.
     */
    if (initialDelayNanoSec >= delayTimeInNanoSec)
60003d96:	4547      	cmp	r7, r8
60003d98:	f17a 0a00 	sbcs.w	sl, sl, #0
60003d9c:	d239      	bcs.n	60003e12 <LPSPI_MasterSetDelayTimes+0xc2>
    }

    /* If min_diff = 0, the exit for loop */
    for (scaler = 0U; scaler < 256U; scaler++)
    {
        if (min_diff == 0U)
60003d9e:	4b33      	ldr	r3, [pc, #204]	; (60003e6c <LPSPI_MasterSetDelayTimes+0x11c>)
60003da0:	3401      	adds	r4, #1
    min_diff = 0xFFFFFFFFU;
60003da2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    bestScaler = 0xFFU;
60003da6:	f04f 09ff 	mov.w	r9, #255	; 0xff
60003daa:	fba4 4a03 	umull	r4, sl, r4, r3
    for (scaler = 0U; scaler < 256U; scaler++)
60003dae:	2700      	movs	r7, #0
60003db0:	9303      	str	r3, [sp, #12]
        Due to large size of calculated values (uint64_t), we need to break up the
        calculation into several steps to ensure accurate calculated results
        */
        realDelay = 1000000000U;
        realDelay *= ((uint64_t)scaler + 1UL + (uint64_t)additionalScaler);
        realDelay /= clockDividedPrescaler;
60003db2:	4632      	mov	r2, r6
60003db4:	2300      	movs	r3, #0
60003db6:	4620      	mov	r0, r4
60003db8:	4651      	mov	r1, sl
60003dba:	f7ff fe5d 	bl	60003a78 <__aeabi_uldivmod>

        /* calculate the delay difference based on the conditional statement
         * that states that the calculated delay must not be less then the desired delay
         */
        if (realDelay >= delayTimeInNanoSec)
60003dbe:	4540      	cmp	r0, r8
        realDelay /= clockDividedPrescaler;
60003dc0:	4603      	mov	r3, r0
        if (realDelay >= delayTimeInNanoSec)
60003dc2:	f107 0201 	add.w	r2, r7, #1
60003dc6:	f171 0100 	sbcs.w	r1, r1, #0
60003dca:	d303      	bcc.n	60003dd4 <LPSPI_MasterSetDelayTimes+0x84>
        {
            diff = (uint32_t)(realDelay - (uint64_t)delayTimeInNanoSec);
60003dcc:	eba0 0008 	sub.w	r0, r0, r8
            if (min_diff > diff)
60003dd0:	4558      	cmp	r0, fp
60003dd2:	d32a      	bcc.n	60003e2a <LPSPI_MasterSetDelayTimes+0xda>
    for (scaler = 0U; scaler < 256U; scaler++)
60003dd4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
60003dd8:	d024      	beq.n	60003e24 <LPSPI_MasterSetDelayTimes+0xd4>
        if (min_diff == 0U)
60003dda:	9b03      	ldr	r3, [sp, #12]
60003ddc:	4658      	mov	r0, fp
60003dde:	464f      	mov	r7, r9
60003de0:	18e4      	adds	r4, r4, r3
60003de2:	462b      	mov	r3, r5
60003de4:	f14a 0a00 	adc.w	sl, sl, #0
60003de8:	46b9      	mov	r9, r7
60003dea:	4683      	mov	fp, r0
60003dec:	4617      	mov	r7, r2
60003dee:	461d      	mov	r5, r3
60003df0:	e7df      	b.n	60003db2 <LPSPI_MasterSetDelayTimes+0x62>
        initialDelayNanoSec /= clockDividedPrescaler;
60003df2:	a11b      	add	r1, pc, #108	; (adr r1, 60003e60 <LPSPI_MasterSetDelayTimes+0x110>)
60003df4:	e9d1 0100 	ldrd	r0, r1, [r1]
60003df8:	f7ff fe3e 	bl	60003a78 <__aeabi_uldivmod>
        bestDelay /= clockDividedPrescaler;
60003dfc:	4632      	mov	r2, r6
        initialDelayNanoSec /= clockDividedPrescaler;
60003dfe:	4607      	mov	r7, r0
60003e00:	468a      	mov	sl, r1
        bestDelay /= clockDividedPrescaler;
60003e02:	2300      	movs	r3, #0
60003e04:	481a      	ldr	r0, [pc, #104]	; (60003e70 <LPSPI_MasterSetDelayTimes+0x120>)
60003e06:	213b      	movs	r1, #59	; 0x3b
        additionalScaler = 0U;
60003e08:	2400      	movs	r4, #0
        bestDelay /= clockDividedPrescaler;
60003e0a:	f7ff fe35 	bl	60003a78 <__aeabi_uldivmod>
60003e0e:	4605      	mov	r5, r0
        additionalScaler = 0U;
60003e10:	e7c1      	b.n	60003d96 <LPSPI_MasterSetDelayTimes+0x46>
        LPSPI_MasterSetDelayScaler(base, 0, whichDelay);
60003e12:	9801      	ldr	r0, [sp, #4]
60003e14:	2100      	movs	r1, #0
60003e16:	9a02      	ldr	r2, [sp, #8]
60003e18:	f007 f840 	bl	6000ae9c <LPSPI_MasterSetDelayScaler>
        return (uint32_t)initialDelayNanoSec;
60003e1c:	4638      	mov	r0, r7
    /* write the best scaler value for the delay */
    LPSPI_MasterSetDelayScaler(base, bestScaler, whichDelay);

    /* return the actual calculated delay value (in ns) */
    return (uint32_t)bestDelay;
}
60003e1e:	b005      	add	sp, #20
60003e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (scaler = 0U; scaler < 256U; scaler++)
60003e24:	464f      	mov	r7, r9
60003e26:	462b      	mov	r3, r5
60003e28:	e008      	b.n	60003e3c <LPSPI_MasterSetDelayTimes+0xec>
60003e2a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
60003e2e:	d005      	beq.n	60003e3c <LPSPI_MasterSetDelayTimes+0xec>
        if (min_diff == 0U)
60003e30:	9903      	ldr	r1, [sp, #12]
60003e32:	1864      	adds	r4, r4, r1
60003e34:	f14a 0a00 	adc.w	sl, sl, #0
60003e38:	2800      	cmp	r0, #0
60003e3a:	d1d5      	bne.n	60003de8 <LPSPI_MasterSetDelayTimes+0x98>
    LPSPI_MasterSetDelayScaler(base, bestScaler, whichDelay);
60003e3c:	9801      	ldr	r0, [sp, #4]
60003e3e:	4639      	mov	r1, r7
60003e40:	9a02      	ldr	r2, [sp, #8]
60003e42:	9303      	str	r3, [sp, #12]
60003e44:	f007 f82a 	bl	6000ae9c <LPSPI_MasterSetDelayScaler>
    return (uint32_t)bestDelay;
60003e48:	9b03      	ldr	r3, [sp, #12]
60003e4a:	4618      	mov	r0, r3
60003e4c:	e7e7      	b.n	60003e1e <LPSPI_MasterSetDelayTimes+0xce>
60003e4e:	bf00      	nop
60003e50:	77359400 	.word	0x77359400
60003e54:	00000000 	.word	0x00000000
60003e58:	d664ca00 	.word	0xd664ca00
60003e5c:	0000003b 	.word	0x0000003b
60003e60:	3b9aca00 	.word	0x3b9aca00
60003e64:	00000000 	.word	0x00000000
60003e68:	6000ccf9 	.word	0x6000ccf9
60003e6c:	3b9aca00 	.word	0x3b9aca00
60003e70:	9aca0000 	.word	0x9aca0000

60003e74 <main>:
const struct spi_buf_set tx_buff = {my_spi_buffer, 1};

struct spi_dt_spec spi_com = SPI_DT_SPEC_GET(SPI_DEV, SPI_OP, 0);

void main(void)
{
60003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    printk("Hi");
60003e76:	480e      	ldr	r0, [pc, #56]	; (60003eb0 <main+0x3c>)
60003e78:	f005 fb93 	bl	600095a2 <printk>
    my_spi_buffer[0].buf = my_buffer;
60003e7c:	4b0d      	ldr	r3, [pc, #52]	; (60003eb4 <main+0x40>)
60003e7e:	4a0e      	ldr	r2, [pc, #56]	; (60003eb8 <main+0x44>)
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
	return spi_write(spec->bus, &spec->config, tx_bufs);
60003e80:	4c0e      	ldr	r4, [pc, #56]	; (60003ebc <main+0x48>)
60003e82:	601a      	str	r2, [r3, #0]
    my_spi_buffer[0].len = 4;
60003e84:	2204      	movs	r2, #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
60003e86:	4f0e      	ldr	r7, [pc, #56]	; (60003ec0 <main+0x4c>)
60003e88:	18a6      	adds	r6, r4, r2
60003e8a:	605a      	str	r2, [r3, #4]
	return spi_write(spec->bus, &spec->config, tx_bufs);
60003e8c:	6820      	ldr	r0, [r4, #0]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
60003e8e:	6883      	ldr	r3, [r0, #8]
60003e90:	463a      	mov	r2, r7
60003e92:	4631      	mov	r1, r6
60003e94:	681d      	ldr	r5, [r3, #0]
60003e96:	2300      	movs	r3, #0
60003e98:	47a8      	blx	r5

    while (true)
    {

        ret = spi_write_dt(&spi_com, &tx_buff);
60003e9a:	4b0a      	ldr	r3, [pc, #40]	; (60003ec4 <main+0x50>)
60003e9c:	b2c0      	uxtb	r0, r0
60003e9e:	7018      	strb	r0, [r3, #0]

        if (ret)
60003ea0:	2800      	cmp	r0, #0
60003ea2:	d0f3      	beq.n	60003e8c <main+0x18>
        {
            printk("spi write failed");
60003ea4:	4808      	ldr	r0, [pc, #32]	; (60003ec8 <main+0x54>)
            break;
        }
    }
60003ea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            printk("spi write failed");
60003eaa:	f005 bb7a 	b.w	600095a2 <printk>
60003eae:	bf00      	nop
60003eb0:	6000c38a 	.word	0x6000c38a
60003eb4:	80001090 	.word	0x80001090
60003eb8:	8000094c 	.word	0x8000094c
60003ebc:	80000800 	.word	0x80000800
60003ec0:	6000b8b8 	.word	0x6000b8b8
60003ec4:	80001c60 	.word	0x80001c60
60003ec8:	6000c38d 	.word	0x6000c38d

60003ecc <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
60003ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60003ed0:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
60003ed2:	0784      	lsls	r4, r0, #30
{
60003ed4:	4605      	mov	r5, r0
60003ed6:	460e      	mov	r6, r1
60003ed8:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
60003eda:	f002 0304 	and.w	r3, r2, #4
60003ede:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
60003ee2:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
60003ee4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
{
60003ee8:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
60003eea:	f103 0301 	add.w	r3, r3, #1
60003eee:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
60003ef0:	f040 81be 	bne.w	60004270 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
60003ef4:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
60003ef6:	b130      	cbz	r0, 60003f06 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
60003ef8:	2907      	cmp	r1, #7
60003efa:	d809      	bhi.n	60003f10 <cbvprintf_package+0x44>
		return -ENOSPC;
60003efc:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
60003f00:	b011      	add	sp, #68	; 0x44
60003f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
60003f06:	f001 0607 	and.w	r6, r1, #7
60003f0a:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
60003f0c:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
60003f10:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
60003f12:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
60003f16:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
60003f1a:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
60003f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
60003f20:	464f      	mov	r7, r9
	bool parsing = false;
60003f22:	46cb      	mov	fp, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
60003f24:	9301      	str	r3, [sp, #4]
	size = sizeof(char *);
60003f26:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
60003f28:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
60003f2c:	b10d      	cbz	r5, 60003f32 <cbvprintf_package+0x66>
				*(const char **)buf = s;
60003f2e:	9a00      	ldr	r2, [sp, #0]
60003f30:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60003f32:	9805      	ldr	r0, [sp, #20]
60003f34:	2800      	cmp	r0, #0
60003f36:	f300 80eb 	bgt.w	60004110 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
60003f3a:	489a      	ldr	r0, [pc, #616]	; (600041a4 <cbvprintf_package+0x2d8>)
60003f3c:	9a00      	ldr	r2, [sp, #0]
60003f3e:	4282      	cmp	r2, r0
60003f40:	d303      	bcc.n	60003f4a <cbvprintf_package+0x7e>
60003f42:	4899      	ldr	r0, [pc, #612]	; (600041a8 <cbvprintf_package+0x2dc>)
60003f44:	4282      	cmp	r2, r0
60003f46:	f0c0 80e3 	bcc.w	60004110 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60003f4a:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60003f4c:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60003f50:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60003f52:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60003f56:	f100 8106 	bmi.w	60004166 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
60003f5a:	2f0f      	cmp	r7, #15
60003f5c:	f200 80b4 	bhi.w	600040c8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
60003f60:	2d00      	cmp	r5, #0
60003f62:	f000 8108 	beq.w	60004176 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
60003f66:	f107 0240 	add.w	r2, r7, #64	; 0x40
60003f6a:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
60003f6e:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
60003f70:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
60003f74:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
60003f78:	9804      	ldr	r0, [sp, #16]
60003f7a:	3001      	adds	r0, #1
60003f7c:	9004      	str	r0, [sp, #16]
60003f7e:	e0ea      	b.n	60004156 <cbvprintf_package+0x28a>
			switch (*fmt) {
60003f80:	287a      	cmp	r0, #122	; 0x7a
60003f82:	d860      	bhi.n	60004046 <cbvprintf_package+0x17a>
60003f84:	284b      	cmp	r0, #75	; 0x4b
60003f86:	d80e      	bhi.n	60003fa6 <cbvprintf_package+0xda>
60003f88:	2847      	cmp	r0, #71	; 0x47
60003f8a:	d85c      	bhi.n	60004046 <cbvprintf_package+0x17a>
60003f8c:	2829      	cmp	r0, #41	; 0x29
60003f8e:	d82f      	bhi.n	60003ff0 <cbvprintf_package+0x124>
60003f90:	2825      	cmp	r0, #37	; 0x25
60003f92:	d055      	beq.n	60004040 <cbvprintf_package+0x174>
60003f94:	d857      	bhi.n	60004046 <cbvprintf_package+0x17a>
60003f96:	2820      	cmp	r0, #32
60003f98:	d07d      	beq.n	60004096 <cbvprintf_package+0x1ca>
60003f9a:	3823      	subs	r0, #35	; 0x23
60003f9c:	f1d0 0b00 	rsbs	fp, r0, #0
60003fa0:	eb4b 0b00 	adc.w	fp, fp, r0
60003fa4:	e077      	b.n	60004096 <cbvprintf_package+0x1ca>
60003fa6:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
60003faa:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
60003fae:	d84a      	bhi.n	60004046 <cbvprintf_package+0x17a>
60003fb0:	e8df f00c 	tbb	[pc, ip]
60003fb4:	49494971 	.word	0x49494971
60003fb8:	49494949 	.word	0x49494949
60003fbc:	49494949 	.word	0x49494949
60003fc0:	4949494c 	.word	0x4949494c
60003fc4:	49494949 	.word	0x49494949
60003fc8:	4c495a49 	.word	0x4c495a49
60003fcc:	5a5a5a4c 	.word	0x5a5a5a4c
60003fd0:	496e4c71 	.word	0x496e4c71
60003fd4:	4c184971 	.word	0x4c184971
60003fd8:	83494918 	.word	0x83494918
60003fdc:	49494c80 	.word	0x49494c80
60003fe0:	494c      	.short	0x494c
60003fe2:	80          	.byte	0x80
60003fe3:	00          	.byte	0x00
60003fe4:	2000      	movs	r0, #0
60003fe6:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
60003fea:	f04f 0a04 	mov.w	sl, #4
60003fee:	e039      	b.n	60004064 <cbvprintf_package+0x198>
			switch (*fmt) {
60003ff0:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
60003ff4:	2201      	movs	r2, #1
60003ff6:	fa5f fc8c 	uxtb.w	ip, ip
60003ffa:	fa02 fc0c 	lsl.w	ip, r2, ip
60003ffe:	ea1c 0f0e 	tst.w	ip, lr
60004002:	d148      	bne.n	60004096 <cbvprintf_package+0x1ca>
60004004:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
60004008:	d12e      	bne.n	60004068 <cbvprintf_package+0x19c>
6000400a:	ea1c 0b02 	ands.w	fp, ip, r2
6000400e:	d042      	beq.n	60004096 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
60004010:	3c01      	subs	r4, #1
60004012:	f1ca 0c00 	rsb	ip, sl, #0
60004016:	4454      	add	r4, sl
60004018:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
6000401c:	2d00      	cmp	r5, #0
6000401e:	d061      	beq.n	600040e4 <cbvprintf_package+0x218>
60004020:	eba3 0c05 	sub.w	ip, r3, r5
60004024:	44a4      	add	ip, r4
60004026:	45b4      	cmp	ip, r6
60004028:	f63f af68 	bhi.w	60003efc <cbvprintf_package+0x30>
		if (is_str_arg) {
6000402c:	2800      	cmp	r0, #0
6000402e:	d168      	bne.n	60004102 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
60004030:	2b04      	cmp	r3, #4
60004032:	d147      	bne.n	600040c4 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
60004034:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
60004038:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
6000403a:	3404      	adds	r4, #4
6000403c:	2304      	movs	r3, #4
6000403e:	e02a      	b.n	60004096 <cbvprintf_package+0x1ca>
				arg_idx--;
60004040:	9a01      	ldr	r2, [sp, #4]
60004042:	3a01      	subs	r2, #1
60004044:	9201      	str	r2, [sp, #4]
				parsing = false;
60004046:	f04f 0b00 	mov.w	fp, #0
				continue;
6000404a:	e024      	b.n	60004096 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
6000404c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
60004050:	286c      	cmp	r0, #108	; 0x6c
60004052:	d134      	bne.n	600040be <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
60004054:	f811 3c02 	ldrb.w	r3, [r1, #-2]
60004058:	2000      	movs	r0, #0
6000405a:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
6000405c:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
6000405e:	d1c4      	bne.n	60003fea <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
60004060:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
60004064:	4653      	mov	r3, sl
60004066:	e7d3      	b.n	60004010 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
60004068:	f108 0807 	add.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
6000406c:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
6000406e:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
60004072:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
60004076:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
6000407a:	b135      	cbz	r5, 6000408a <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
6000407c:	9806      	ldr	r0, [sp, #24]
6000407e:	4420      	add	r0, r4
60004080:	42b0      	cmp	r0, r6
60004082:	f63f af3b 	bhi.w	60003efc <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
60004086:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
6000408a:	3408      	adds	r4, #8
				parsing = false;
6000408c:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
60004090:	f04f 0a08 	mov.w	sl, #8
60004094:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
60004096:	f811 0f01 	ldrb.w	r0, [r1, #1]!
6000409a:	2800      	cmp	r0, #0
6000409c:	d078      	beq.n	60004190 <cbvprintf_package+0x2c4>
			if (!parsing) {
6000409e:	f1bb 0f00 	cmp.w	fp, #0
600040a2:	f47f af6d 	bne.w	60003f80 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
600040a6:	2825      	cmp	r0, #37	; 0x25
600040a8:	d1f5      	bne.n	60004096 <cbvprintf_package+0x1ca>
					arg_idx++;
600040aa:	9b01      	ldr	r3, [sp, #4]
					parsing = true;
600040ac:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
600040b0:	3301      	adds	r3, #1
600040b2:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
600040b4:	f04f 0a04 	mov.w	sl, #4
600040b8:	e7ec      	b.n	60004094 <cbvprintf_package+0x1c8>
			switch (*fmt) {
600040ba:	4658      	mov	r0, fp
600040bc:	e793      	b.n	60003fe6 <cbvprintf_package+0x11a>
600040be:	2000      	movs	r0, #0
				parsing = false;
600040c0:	4683      	mov	fp, r0
600040c2:	e7a5      	b.n	60004010 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
600040c4:	2b08      	cmp	r3, #8
600040c6:	d002      	beq.n	600040ce <cbvprintf_package+0x202>
					return -EINVAL;
600040c8:	f06f 0015 	mvn.w	r0, #21
600040cc:	e718      	b.n	60003f00 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
600040ce:	f108 0807 	add.w	r8, r8, #7
600040d2:	f028 0807 	bic.w	r8, r8, #7
600040d6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
600040da:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
600040de:	3408      	adds	r4, #8
600040e0:	2308      	movs	r3, #8
600040e2:	e7d8      	b.n	60004096 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
600040e4:	b968      	cbnz	r0, 60004102 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
600040e6:	2b04      	cmp	r3, #4
600040e8:	d102      	bne.n	600040f0 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
600040ea:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
600040ee:	e7a4      	b.n	6000403a <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
600040f0:	2b08      	cmp	r3, #8
600040f2:	d1e9      	bne.n	600040c8 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
600040f4:	f108 0807 	add.w	r8, r8, #7
600040f8:	f028 0807 	bic.w	r8, r8, #7
600040fc:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
60004100:	e7ed      	b.n	600040de <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60004102:	9a05      	ldr	r2, [sp, #20]
60004104:	3a01      	subs	r2, #1
60004106:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
60004108:	f858 2b04 	ldr.w	r2, [r8], #4
6000410c:	9200      	str	r2, [sp, #0]
6000410e:	e70d      	b.n	60003f2c <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
60004110:	9a03      	ldr	r2, [sp, #12]
60004112:	0790      	lsls	r0, r2, #30
60004114:	d520      	bpl.n	60004158 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
60004116:	eba4 0e05 	sub.w	lr, r4, r5
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
6000411a:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
6000411e:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
60004122:	f5be 7f00 	cmp.w	lr, #512	; 0x200
60004126:	d2cf      	bcs.n	600040c8 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
60004128:	2f0f      	cmp	r7, #15
6000412a:	d8cd      	bhi.n	600040c8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
6000412c:	b1f5      	cbz	r5, 6000416c <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
6000412e:	f107 0240 	add.w	r2, r7, #64	; 0x40
60004132:	b2c0      	uxtb	r0, r0
60004134:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
60004138:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
6000413a:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
6000413e:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
60004142:	f1bc 0f00 	cmp.w	ip, #0
60004146:	f43f af17 	beq.w	60003f78 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
6000414a:	f060 007f 	orn	r0, r0, #127	; 0x7f
						s_ro_cnt++;
6000414e:	f109 0901 	add.w	r9, r9, #1
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
60004152:	f80e 0c20 	strb.w	r0, [lr, #-32]
				s_idx++;
60004156:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
60004158:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
6000415c:	3404      	adds	r4, #4
			switch (*fmt) {
6000415e:	f64f 7eda 	movw	lr, #65498	; 0xffda
					if (BUF_OFFSET + size > len) {
60004162:	9206      	str	r2, [sp, #24]
60004164:	e797      	b.n	60004096 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
60004166:	f04f 0c00 	mov.w	ip, #0
6000416a:	e7da      	b.n	60004122 <cbvprintf_package+0x256>
				} else if (is_ro) {
6000416c:	f1bc 0f00 	cmp.w	ip, #0
60004170:	d001      	beq.n	60004176 <cbvprintf_package+0x2aa>
					len += 1;
60004172:	3601      	adds	r6, #1
60004174:	e7ef      	b.n	60004156 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
60004176:	9802      	ldr	r0, [sp, #8]
					len += 2;
60004178:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
6000417a:	2800      	cmp	r0, #0
6000417c:	d1eb      	bne.n	60004156 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
6000417e:	9800      	ldr	r0, [sp, #0]
60004180:	e9cd 3106 	strd	r3, r1, [sp, #24]
60004184:	f005 fdc1 	bl	60009d0a <strlen>
60004188:	4406      	add	r6, r0
6000418a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
6000418e:	e7e2      	b.n	60004156 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
60004190:	1b63      	subs	r3, r4, r5
60004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
60004196:	d297      	bcs.n	600040c8 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
60004198:	b945      	cbnz	r5, 600041ac <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
6000419a:	f1a6 0408 	sub.w	r4, r6, #8
6000419e:	18e0      	adds	r0, r4, r3
600041a0:	e6ae      	b.n	60003f00 <cbvprintf_package+0x34>
600041a2:	bf00      	nop
600041a4:	6000b274 	.word	0x6000b274
600041a8:	6000ce20 	.word	0x6000ce20
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
600041ac:	089b      	lsrs	r3, r3, #2
	if (rws_pos_en) {
600041ae:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
600041b0:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
600041b2:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
600041b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
600041b8:	b1c2      	cbz	r2, 600041ec <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
600041ba:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
600041bc:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
600041c0:	f1b9 0f00 	cmp.w	r9, #0
600041c4:	d005      	beq.n	600041d2 <cbvprintf_package+0x306>
600041c6:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
600041c8:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
600041ca:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
600041ce:	4297      	cmp	r7, r2
600041d0:	d10e      	bne.n	600041f0 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
600041d2:	f1c5 0301 	rsb	r3, r5, #1
600041d6:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
600041da:	f04f 0a00 	mov.w	sl, #0
600041de:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
		if (BUF_OFFSET + 1 + size > len) {
600041e2:	9301      	str	r3, [sp, #4]
	for (i = 0; i < s_idx; i++) {
600041e4:	4557      	cmp	r7, sl
600041e6:	d112      	bne.n	6000420e <cbvprintf_package+0x342>
	return BUF_OFFSET;
600041e8:	1b60      	subs	r0, r4, r5
600041ea:	e689      	b.n	60003f00 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
600041ec:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
600041ee:	e7e5      	b.n	600041bc <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
600041f0:	f810 3b01 	ldrb.w	r3, [r0], #1
600041f4:	0619      	lsls	r1, r3, #24
600041f6:	d508      	bpl.n	6000420a <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
600041f8:	eb04 0e0c 	add.w	lr, r4, ip
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
600041fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
60004200:	45b6      	cmp	lr, r6
60004202:	f63f ae7b 	bhi.w	60003efc <cbvprintf_package+0x30>
			*buf++ = pos;
60004206:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
6000420a:	3201      	adds	r2, #1
6000420c:	e7df      	b.n	600041ce <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
6000420e:	f1b9 0f00 	cmp.w	r9, #0
60004212:	d003      	beq.n	6000421c <cbvprintf_package+0x350>
60004214:	f998 2000 	ldrsb.w	r2, [r8]
60004218:	2a00      	cmp	r2, #0
6000421a:	db17      	blt.n	6000424c <cbvprintf_package+0x380>
		if (rws_pos_en) {
6000421c:	9b02      	ldr	r3, [sp, #8]
6000421e:	b1d3      	cbz	r3, 60004256 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
60004220:	f81a 200b 	ldrb.w	r2, [sl, fp]
60004224:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
60004228:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
6000422a:	9b01      	ldr	r3, [sp, #4]
6000422c:	1898      	adds	r0, r3, r2
6000422e:	4420      	add	r0, r4
60004230:	42b0      	cmp	r0, r6
60004232:	f63f ae63 	bhi.w	60003efc <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
60004236:	f898 0000 	ldrb.w	r0, [r8]
		memcpy(buf, s, size);
6000423a:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
6000423c:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
60004240:	4620      	mov	r0, r4
60004242:	9203      	str	r2, [sp, #12]
60004244:	f005 fd71 	bl	60009d2a <memcpy>
		buf += size;
60004248:	9a03      	ldr	r2, [sp, #12]
6000424a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
6000424c:	f10a 0a01 	add.w	sl, sl, #1
60004250:	f108 0801 	add.w	r8, r8, #1
60004254:	e7c6      	b.n	600041e4 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
60004256:	f898 2000 	ldrb.w	r2, [r8]
6000425a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
6000425e:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
60004260:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
60004262:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
60004264:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
60004268:	f005 fd4f 	bl	60009d0a <strlen>
6000426c:	1c42      	adds	r2, r0, #1
6000426e:	e7dc      	b.n	6000422a <cbvprintf_package+0x35e>
		return -EFAULT;
60004270:	f06f 000d 	mvn.w	r0, #13
60004274:	e644      	b.n	60003f00 <cbvprintf_package+0x34>
60004276:	bf00      	nop

60004278 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
60004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000427c:	b095      	sub	sp, #84	; 0x54
6000427e:	4604      	mov	r4, r0
60004280:	af00      	add	r7, sp, #0
60004282:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
60004286:	61bb      	str	r3, [r7, #24]
60004288:	f3cb 03c0 	ubfx	r3, fp, #3, #1
6000428c:	627a      	str	r2, [r7, #36]	; 0x24
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
6000428e:	6239      	str	r1, [r7, #32]
60004290:	613b      	str	r3, [r7, #16]
60004292:	b951      	cbnz	r1, 600042aa <cbprintf_package_convert+0x32>
	buf += ros_nbr;
60004294:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
60004296:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
60004298:	7880      	ldrb	r0, [r0, #2]
6000429a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
6000429e:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
600042a0:	6a3b      	ldr	r3, [r7, #32]
600042a2:	429e      	cmp	r6, r3
600042a4:	d81a      	bhi.n	600042dc <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
600042a6:	1b03      	subs	r3, r0, r4
600042a8:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
600042aa:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
600042ae:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
600042b0:	4656      	mov	r6, sl
	rws_nbr = in_desc->rw_str_cnt;
600042b2:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
600042b4:	f1ba 0f00 	cmp.w	sl, #0
600042b8:	d002      	beq.n	600042c0 <cbprintf_package_convert+0x48>
600042ba:	f01b 0f01 	tst.w	fp, #1
600042be:	d117      	bne.n	600042f0 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
600042c0:	697b      	ldr	r3, [r7, #20]
600042c2:	bb5b      	cbnz	r3, 6000431c <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
600042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600042c6:	b11b      	cbz	r3, 600042d0 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
600042c8:	69ba      	ldr	r2, [r7, #24]
600042ca:	4620      	mov	r0, r4
600042cc:	6a39      	ldr	r1, [r7, #32]
600042ce:	4798      	blx	r3
		}

		return in_len;
600042d0:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
600042d2:	4628      	mov	r0, r5
600042d4:	3754      	adds	r7, #84	; 0x54
600042d6:	46bd      	mov	sp, r7
600042d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
600042dc:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
600042de:	4628      	mov	r0, r5
600042e0:	f005 fd13 	bl	60009d0a <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
600042e4:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
600042e6:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
600042e8:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
600042ea:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
600042ec:	623b      	str	r3, [r7, #32]
600042ee:	e7d7      	b.n	600042a0 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
600042f0:	f894 8000 	ldrb.w	r8, [r4]
600042f4:	6863      	ldr	r3, [r4, #4]
	args_size = in_desc->len * sizeof(int);
600042f6:	ea4f 0288 	mov.w	r2, r8, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
600042fa:	61fb      	str	r3, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
600042fc:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
60004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
60004302:	60fa      	str	r2, [r7, #12]
	if (cb == NULL) {
60004304:	2b00      	cmp	r3, #0
60004306:	f040 8102 	bne.w	6000450e <cbprintf_package_convert+0x296>
		out_len = (int)in_len;
6000430a:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
6000430c:	46c1      	mov	r9, r8
6000430e:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
60004312:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
60004314:	454b      	cmp	r3, r9
60004316:	d14e      	bne.n	600043b6 <cbprintf_package_convert+0x13e>
60004318:	44d0      	add	r8, sl
6000431a:	e013      	b.n	60004344 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
6000431c:	f01b 0f02 	tst.w	fp, #2
60004320:	d0d0      	beq.n	600042c4 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
60004322:	f894 8000 	ldrb.w	r8, [r4]
60004326:	ea4f 0388 	mov.w	r3, r8, lsl #2
	uint8_t *str_pos = &buf[args_size];
6000432a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	args_size = in_desc->len * sizeof(int);
6000432e:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
60004330:	6863      	ldr	r3, [r4, #4]
60004332:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
60004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
60004336:	2b00      	cmp	r3, #0
60004338:	d178      	bne.n	6000442c <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
6000433a:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
6000433c:	f1ba 0f00 	cmp.w	sl, #0
60004340:	d14e      	bne.n	600043e0 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
60004342:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
60004344:	f01b 0f05 	tst.w	fp, #5
60004348:	bf0c      	ite	eq
6000434a:	2302      	moveq	r3, #2
6000434c:	2301      	movne	r3, #1
6000434e:	627b      	str	r3, [r7, #36]	; 0x24
60004350:	697b      	ldr	r3, [r7, #20]
60004352:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
60004356:	f00b 0302 	and.w	r3, fp, #2
6000435a:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
6000435c:	45d0      	cmp	r8, sl
6000435e:	d0b8      	beq.n	600042d2 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
60004360:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
60004364:	f818 3c01 	ldrb.w	r3, [r8, #-1]
60004368:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
6000436c:	4bad      	ldr	r3, [pc, #692]	; (60004624 <cbprintf_package_convert+0x3ac>)
6000436e:	4599      	cmp	r9, r3
60004370:	d302      	bcc.n	60004378 <cbprintf_package_convert+0x100>
60004372:	4bad      	ldr	r3, [pc, #692]	; (60004628 <cbprintf_package_convert+0x3b0>)
60004374:	4599      	cmp	r9, r3
60004376:	d339      	bcc.n	600043ec <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
60004378:	693b      	ldr	r3, [r7, #16]
6000437a:	2b00      	cmp	r3, #0
6000437c:	d043      	beq.n	60004406 <cbprintf_package_convert+0x18e>
6000437e:	69f8      	ldr	r0, [r7, #28]
60004380:	f005 f8d6 	bl	60009530 <is_ptr>
60004384:	2800      	cmp	r0, #0
60004386:	d03e      	beq.n	60004406 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
60004388:	46e9      	mov	r9, sp
6000438a:	b08a      	sub	sp, #40	; 0x28
6000438c:	466a      	mov	r2, sp
6000438e:	4ba7      	ldr	r3, [pc, #668]	; (6000462c <cbprintf_package_convert+0x3b4>)
60004390:	6153      	str	r3, [r2, #20]
60004392:	69fb      	ldr	r3, [r7, #28]
60004394:	e9c2 3106 	strd	r3, r1, [r2, #24]
60004398:	f44f 7300 	mov.w	r3, #512	; 0x200
6000439c:	8413      	strh	r3, [r2, #32]
6000439e:	4ba4      	ldr	r3, [pc, #656]	; (60004630 <cbprintf_package_convert+0x3b8>)
600043a0:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
600043a4:	2300      	movs	r3, #0
600043a6:	f44f 5112 	mov.w	r1, #9344	; 0x2480
600043aa:	48a2      	ldr	r0, [pc, #648]	; (60004634 <cbprintf_package_convert+0x3bc>)
				out_len -= 2;
600043ac:	3d02      	subs	r5, #2
600043ae:	f001 f863 	bl	60005478 <z_impl_z_log_msg_static_create>
600043b2:	46cd      	mov	sp, r9
				continue;
600043b4:	e7d2      	b.n	6000435c <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
600043b6:	f819 2b01 	ldrb.w	r2, [r9], #1
600043ba:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
600043bc:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
600043c0:	f005 fca3 	bl	60009d0a <strlen>
				if (strl && strl_cnt < strl_len) {
600043c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
600043c6:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
600043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600043ca:	b13a      	cbz	r2, 600043dc <cbprintf_package_convert+0x164>
600043cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
600043d0:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
600043d2:	bf3e      	ittt	cc
600043d4:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
600043d6:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
600043da:	3601      	addcc	r6, #1
				out_len += len;
600043dc:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
600043de:	e799      	b.n	60004314 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
600043e0:	f01b 0604 	ands.w	r6, fp, #4
				str_pos += ros_nbr;
600043e4:	bf1c      	itt	ne
600043e6:	44d0      	addne	r8, sl
	size_t strl_cnt = 0;
600043e8:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
600043ea:	e7ab      	b.n	60004344 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
600043ec:	693b      	ldr	r3, [r7, #16]
600043ee:	b123      	cbz	r3, 600043fa <cbprintf_package_convert+0x182>
600043f0:	69f8      	ldr	r0, [r7, #28]
600043f2:	f005 f89d 	bl	60009530 <is_ptr>
600043f6:	2800      	cmp	r0, #0
600043f8:	d1c6      	bne.n	60004388 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
600043fa:	f01b 0f01 	tst.w	fp, #1
600043fe:	d105      	bne.n	6000440c <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
60004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
60004402:	1aed      	subs	r5, r5, r3
60004404:	e7aa      	b.n	6000435c <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
60004406:	6a3b      	ldr	r3, [r7, #32]
60004408:	2b00      	cmp	r3, #0
6000440a:	d0a7      	beq.n	6000435c <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
6000440c:	4648      	mov	r0, r9
6000440e:	f005 fc7c 	bl	60009d0a <strlen>
				if (strl && strl_cnt < strl_len) {
60004412:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
60004414:	b143      	cbz	r3, 60004428 <cbprintf_package_convert+0x1b0>
60004416:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
6000441a:	429e      	cmp	r6, r3
		return 1 + strlen(str);
6000441c:	bf3f      	itttt	cc
6000441e:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
60004420:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
60004422:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
60004426:	3601      	addcc	r6, #1
				out_len += (len - 1);
60004428:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
6000442a:	e797      	b.n	6000435c <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
6000442c:	f1ba 0f00 	cmp.w	sl, #0
60004430:	d072      	beq.n	60004518 <cbprintf_package_convert+0x2a0>
60004432:	f01b 0604 	ands.w	r6, fp, #4
60004436:	d072      	beq.n	6000451e <cbprintf_package_convert+0x2a6>
		keep_cnt = ros_nbr;
60004438:	46d1      	mov	r9, sl
		scpy_cnt = 0;
6000443a:	2600      	movs	r6, #0
		dst = keep_str_pos;
6000443c:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
60004440:	4652      	mov	r2, sl
60004442:	4641      	mov	r1, r8
60004444:	f005 fc71 	bl	60009d2a <memcpy>
	str_pos += ros_nbr;
60004448:	697b      	ldr	r3, [r7, #20]
6000444a:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
6000444c:	005b      	lsls	r3, r3, #1
6000444e:	60bb      	str	r3, [r7, #8]
60004450:	697b      	ldr	r3, [r7, #20]
60004452:	eb08 0343 	add.w	r3, r8, r3, lsl #1
60004456:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
60004458:	f00b 0302 	and.w	r3, fp, #2
6000445c:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
6000445e:	697b      	ldr	r3, [r7, #20]
60004460:	4598      	cmp	r8, r3
60004462:	d15e      	bne.n	60004522 <cbprintf_package_convert+0x2aa>
	out_desc.len = in_desc->len;
60004464:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
60004466:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
6000446a:	61fb      	str	r3, [r7, #28]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
6000446c:	bf08      	it	eq
6000446e:	ea4f 0159 	moveq.w	r1, r9, lsr #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
60004472:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
60004474:	bf18      	it	ne
60004476:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
60004478:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
6000447c:	eb06 0203 	add.w	r2, r6, r3
60004480:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
60004482:	f040 809d 	bne.w	600045c0 <cbprintf_package_convert+0x348>
60004486:	f01b 0f04 	tst.w	fp, #4
6000448a:	bf14      	ite	ne
6000448c:	4648      	movne	r0, r9
6000448e:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
60004490:	f894 b002 	ldrb.w	fp, [r4, #2]
60004494:	f894 8003 	ldrb.w	r8, [r4, #3]
60004498:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
6000449a:	7062      	strb	r2, [r4, #1]
6000449c:	70a0      	strb	r0, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
6000449e:	4620      	mov	r0, r4
	*in_desc = out_desc;
600044a0:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
600044a2:	69ba      	ldr	r2, [r7, #24]
600044a4:	68f9      	ldr	r1, [r7, #12]
600044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600044a8:	4798      	blx	r3
	if (rv < 0) {
600044aa:	1e05      	subs	r5, r0, #0
600044ac:	f6ff af11 	blt.w	600042d2 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
600044b0:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
600044b2:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
600044b4:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
600044b8:	f107 0040 	add.w	r0, r7, #64	; 0x40
	*in_desc = in_desc_backup;
600044bc:	7023      	strb	r3, [r4, #0]
600044be:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
600044c0:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
600044c2:	7063      	strb	r3, [r4, #1]
600044c4:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
600044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600044ca:	4798      	blx	r3
	if (rv < 0) {
600044cc:	f1b0 0800 	subs.w	r8, r0, #0
600044d0:	f2c0 80a3 	blt.w	6000461a <cbprintf_package_convert+0x3a2>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
600044d4:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
600044d6:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
600044d8:	eba3 010a 	sub.w	r1, r3, sl
600044dc:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
600044de:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
600044e0:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
600044e2:	68bb      	ldr	r3, [r7, #8]
600044e4:	1ac9      	subs	r1, r1, r3
600044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600044e8:	4798      	blx	r3
	if (rv < 0) {
600044ea:	2800      	cmp	r0, #0
600044ec:	f2c0 8097 	blt.w	6000461e <cbprintf_package_convert+0x3a6>
	out_len += rv;
600044f0:	44a8      	add	r8, r5
	for (unsigned int i = 0; i < scpy_cnt; i++) {
600044f2:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
600044f6:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	out_len += rv;
600044fa:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
600044fe:	45b3      	cmp	fp, r6
60004500:	d360      	bcc.n	600045c4 <cbprintf_package_convert+0x34c>
	(void)cb(NULL, 0, ctx);
60004502:	2100      	movs	r1, #0
60004504:	69ba      	ldr	r2, [r7, #24]
60004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
60004508:	4608      	mov	r0, r1
6000450a:	4798      	blx	r3
	return out_len;
6000450c:	e6e1      	b.n	600042d2 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
6000450e:	f04f 0900 	mov.w	r9, #0
60004512:	f107 0030 	add.w	r0, r7, #48	; 0x30
60004516:	e793      	b.n	60004440 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
60004518:	4656      	mov	r6, sl
		keep_cnt = 0;
6000451a:	46d1      	mov	r9, sl
6000451c:	e794      	b.n	60004448 <cbprintf_package_convert+0x1d0>
6000451e:	46b1      	mov	r9, r6
60004520:	e792      	b.n	60004448 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
60004522:	f818 1b02 	ldrb.w	r1, [r8], #2
60004526:	4a3f      	ldr	r2, [pc, #252]	; (60004624 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
60004528:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
6000452c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
60004530:	4293      	cmp	r3, r2
60004532:	d302      	bcc.n	6000453a <cbprintf_package_convert+0x2c2>
60004534:	4a3c      	ldr	r2, [pc, #240]	; (60004628 <cbprintf_package_convert+0x3b0>)
60004536:	4293      	cmp	r3, r2
60004538:	d31c      	bcc.n	60004574 <cbprintf_package_convert+0x2fc>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
6000453a:	693b      	ldr	r3, [r7, #16]
6000453c:	b123      	cbz	r3, 60004548 <cbprintf_package_convert+0x2d0>
6000453e:	69f8      	ldr	r0, [r7, #28]
60004540:	f004 fff6 	bl	60009530 <is_ptr>
60004544:	2800      	cmp	r0, #0
60004546:	d18a      	bne.n	6000445e <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
60004548:	687b      	ldr	r3, [r7, #4]
6000454a:	b9f3      	cbnz	r3, 6000458a <cbprintf_package_convert+0x312>
				keep_str_pos[keep_cnt++] = arg_idx;
6000454c:	f109 0228 	add.w	r2, r9, #40	; 0x28
60004550:	f107 0028 	add.w	r0, r7, #40	; 0x28
60004554:	f109 0301 	add.w	r3, r9, #1
				keep_str_pos[keep_cnt++] = arg_pos;
60004558:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
6000455c:	4402      	add	r2, r0
				keep_str_pos[keep_cnt++] = arg_pos;
6000455e:	fa5f f989 	uxtb.w	r9, r9
				keep_str_pos[keep_cnt++] = arg_idx;
60004562:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
60004566:	f107 0250 	add.w	r2, r7, #80	; 0x50
6000456a:	fa52 f383 	uxtab	r3, r2, r3
6000456e:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
60004572:	e774      	b.n	6000445e <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
60004574:	693b      	ldr	r3, [r7, #16]
60004576:	b12b      	cbz	r3, 60004584 <cbprintf_package_convert+0x30c>
60004578:	69f8      	ldr	r0, [r7, #28]
6000457a:	f004 ffd9 	bl	60009530 <is_ptr>
6000457e:	2800      	cmp	r0, #0
60004580:	f47f af6d 	bne.w	6000445e <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
60004584:	f01b 0f01 	tst.w	fp, #1
60004588:	d009      	beq.n	6000459e <cbprintf_package_convert+0x326>
				cpy_str_pos[scpy_cnt++] = arg_pos;
6000458a:	f106 0228 	add.w	r2, r6, #40	; 0x28
6000458e:	f107 0128 	add.w	r1, r7, #40	; 0x28
60004592:	1c73      	adds	r3, r6, #1
60004594:	1856      	adds	r6, r2, r1
60004596:	f806 5c20 	strb.w	r5, [r6, #-32]
6000459a:	b2de      	uxtb	r6, r3
6000459c:	e75f      	b.n	6000445e <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
6000459e:	f01b 0f04 	tst.w	fp, #4
600045a2:	f43f af5c 	beq.w	6000445e <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
600045a6:	f109 0228 	add.w	r2, r9, #40	; 0x28
600045aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
600045ae:	f109 0301 	add.w	r3, r9, #1
600045b2:	eb02 0901 	add.w	r9, r2, r1
600045b6:	f809 5c10 	strb.w	r5, [r9, #-16]
600045ba:	fa5f f983 	uxtb.w	r9, r3
600045be:	e74e      	b.n	6000445e <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
600045c0:	2000      	movs	r0, #0
600045c2:	e765      	b.n	60004490 <cbprintf_package_convert+0x218>
		uint8_t loc = cpy_str_pos[i];
600045c4:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
600045c8:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
600045cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
600045d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
600045d2:	b1fb      	cbz	r3, 60004614 <cbprintf_package_convert+0x39c>
600045d4:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
600045d8:	69ba      	ldr	r2, [r7, #24]
600045da:	2101      	movs	r1, #1
600045dc:	f107 002f 	add.w	r0, r7, #47	; 0x2f
600045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600045e2:	4798      	blx	r3
		if (rv < 0) {
600045e4:	2800      	cmp	r0, #0
600045e6:	db1a      	blt.n	6000461e <cbprintf_package_convert+0x3a6>
		out_len += rv;
600045e8:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
600045ea:	f1b8 0f00 	cmp.w	r8, #0
600045ee:	d106      	bne.n	600045fe <cbprintf_package_convert+0x386>
600045f0:	4648      	mov	r0, r9
600045f2:	f005 fb8a 	bl	60009d0a <strlen>
600045f6:	f100 0801 	add.w	r8, r0, #1
600045fa:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
600045fe:	69ba      	ldr	r2, [r7, #24]
60004600:	4641      	mov	r1, r8
60004602:	4648      	mov	r0, r9
60004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
60004606:	4798      	blx	r3
		if (rv < 0) {
60004608:	2800      	cmp	r0, #0
6000460a:	db08      	blt.n	6000461e <cbprintf_package_convert+0x3a6>
		out_len += rv;
6000460c:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
6000460e:	f10b 0b01 	add.w	fp, fp, #1
60004612:	e774      	b.n	600044fe <cbprintf_package_convert+0x286>
		uint16_t str_len = strl ? strl[i] : 0;
60004614:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
60004618:	e7de      	b.n	600045d8 <cbprintf_package_convert+0x360>
6000461a:	4645      	mov	r5, r8
6000461c:	e659      	b.n	600042d2 <cbprintf_package_convert+0x5a>
6000461e:	4605      	mov	r5, r0
60004620:	e657      	b.n	600042d2 <cbprintf_package_convert+0x5a>
60004622:	bf00      	nop
60004624:	6000b274 	.word	0x6000b274
60004628:	6000ce20 	.word	0x6000ce20
6000462c:	6000c39e 	.word	0x6000c39e
60004630:	01000004 	.word	0x01000004
60004634:	6000b850 	.word	0x6000b850

60004638 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
60004638:	4b01      	ldr	r3, [pc, #4]	; (60004640 <__printk_hook_install+0x8>)
6000463a:	6018      	str	r0, [r3, #0]
}
6000463c:	4770      	bx	lr
6000463e:	bf00      	nop
60004640:	80000810 	.word	0x80000810

60004644 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
60004644:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
60004646:	2500      	movs	r5, #0
{
60004648:	b087      	sub	sp, #28
6000464a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
6000464c:	9500      	str	r5, [sp, #0]
	struct str_context ctx = { str, size, 0 };
6000464e:	9505      	str	r5, [sp, #20]
60004650:	e9cd 0103 	strd	r0, r1, [sp, #12]
60004654:	a903      	add	r1, sp, #12
60004656:	4805      	ldr	r0, [pc, #20]	; (6000466c <vsnprintk+0x28>)
60004658:	f000 f80a 	bl	60004670 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
6000465c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
60004660:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
60004662:	bfb8      	it	lt
60004664:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
60004666:	b007      	add	sp, #28
60004668:	bd30      	pop	{r4, r5, pc}
6000466a:	bf00      	nop
6000466c:	6000957f 	.word	0x6000957f

60004670 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
60004670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60004674:	4681      	mov	r9, r0
60004676:	b095      	sub	sp, #84	; 0x54
60004678:	468b      	mov	fp, r1
6000467a:	4617      	mov	r7, r2
6000467c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
6000467e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
60004680:	7838      	ldrb	r0, [r7, #0]
60004682:	b908      	cbnz	r0, 60004688 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
60004684:	4628      	mov	r0, r5
60004686:	e358      	b.n	60004d3a <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
60004688:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
6000468a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
6000468c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
6000468e:	d006      	beq.n	6000469e <z_cbvprintf_impl+0x2e>
			OUTC('%');
60004690:	4659      	mov	r1, fp
60004692:	47c8      	blx	r9
60004694:	2800      	cmp	r0, #0
60004696:	f2c0 8350 	blt.w	60004d3a <z_cbvprintf_impl+0x6ca>
6000469a:	3501      	adds	r5, #1
		if (bps == NULL) {
6000469c:	e1fb      	b.n	60004a96 <z_cbvprintf_impl+0x426>
		} state = {
6000469e:	2218      	movs	r2, #24
600046a0:	2100      	movs	r1, #0
600046a2:	a80e      	add	r0, sp, #56	; 0x38
600046a4:	f005 fb4c 	bl	60009d40 <memset>
	if (*sp == '%') {
600046a8:	787b      	ldrb	r3, [r7, #1]
600046aa:	2b25      	cmp	r3, #37	; 0x25
600046ac:	d07d      	beq.n	600047aa <z_cbvprintf_impl+0x13a>
600046ae:	2300      	movs	r3, #0
600046b0:	1c78      	adds	r0, r7, #1
600046b2:	4698      	mov	r8, r3
600046b4:	469e      	mov	lr, r3
600046b6:	469c      	mov	ip, r3
600046b8:	461e      	mov	r6, r3
600046ba:	4601      	mov	r1, r0
		switch (*sp) {
600046bc:	f810 2b01 	ldrb.w	r2, [r0], #1
600046c0:	2a2b      	cmp	r2, #43	; 0x2b
600046c2:	f000 80a1 	beq.w	60004808 <z_cbvprintf_impl+0x198>
600046c6:	f200 8098 	bhi.w	600047fa <z_cbvprintf_impl+0x18a>
600046ca:	2a20      	cmp	r2, #32
600046cc:	f000 809f 	beq.w	6000480e <z_cbvprintf_impl+0x19e>
600046d0:	2a23      	cmp	r2, #35	; 0x23
600046d2:	f000 809f 	beq.w	60004814 <z_cbvprintf_impl+0x1a4>
600046d6:	b12b      	cbz	r3, 600046e4 <z_cbvprintf_impl+0x74>
600046d8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
600046dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600046e0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
600046e4:	f1b8 0f00 	cmp.w	r8, #0
600046e8:	d005      	beq.n	600046f6 <z_cbvprintf_impl+0x86>
600046ea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
600046ee:	f043 0320 	orr.w	r3, r3, #32
600046f2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
600046f6:	f1be 0f00 	cmp.w	lr, #0
600046fa:	d005      	beq.n	60004708 <z_cbvprintf_impl+0x98>
600046fc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
60004700:	f043 0310 	orr.w	r3, r3, #16
60004704:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
60004708:	f1bc 0f00 	cmp.w	ip, #0
6000470c:	d005      	beq.n	6000471a <z_cbvprintf_impl+0xaa>
6000470e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
60004712:	f043 0308 	orr.w	r3, r3, #8
60004716:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
6000471a:	b12e      	cbz	r6, 60004728 <z_cbvprintf_impl+0xb8>
6000471c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
60004720:	f043 0304 	orr.w	r3, r3, #4
60004724:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
60004728:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
6000472c:	f003 0044 	and.w	r0, r3, #68	; 0x44
60004730:	2844      	cmp	r0, #68	; 0x44
60004732:	d103      	bne.n	6000473c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
60004734:	f36f 1386 	bfc	r3, #6, #1
60004738:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
6000473c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
60004740:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
60004742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
60004746:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
6000474a:	d17f      	bne.n	6000484c <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
6000474c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
60004750:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
60004752:	f042 0201 	orr.w	r2, r2, #1
60004756:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
6000475a:	781a      	ldrb	r2, [r3, #0]
6000475c:	2a2e      	cmp	r2, #46	; 0x2e
6000475e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
60004762:	bf0c      	ite	eq
60004764:	2101      	moveq	r1, #1
60004766:	2100      	movne	r1, #0
60004768:	f361 0241 	bfi	r2, r1, #1, #1
6000476c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
60004770:	d178      	bne.n	60004864 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
60004772:	785a      	ldrb	r2, [r3, #1]
60004774:	2a2a      	cmp	r2, #42	; 0x2a
60004776:	d06e      	beq.n	60004856 <z_cbvprintf_impl+0x1e6>
	++sp;
60004778:	3301      	adds	r3, #1
	size_t val = 0;
6000477a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
6000477c:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
60004780:	4619      	mov	r1, r3
60004782:	f811 0b01 	ldrb.w	r0, [r1], #1
60004786:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
6000478a:	2e09      	cmp	r6, #9
6000478c:	f240 8095 	bls.w	600048ba <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
60004790:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
60004794:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
60004796:	f3c1 0040 	ubfx	r0, r1, #1, #1
6000479a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
6000479e:	460a      	mov	r2, r1
600047a0:	f360 0241 	bfi	r2, r0, #1, #1
600047a4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
600047a8:	e05c      	b.n	60004864 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
600047aa:	1cba      	adds	r2, r7, #2
600047ac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
600047b0:	9203      	str	r2, [sp, #12]
		if (conv->width_star) {
600047b2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
600047b6:	07da      	lsls	r2, r3, #31
600047b8:	f140 812e 	bpl.w	60004a18 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
600047bc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
600047c0:	f1b8 0f00 	cmp.w	r8, #0
600047c4:	da07      	bge.n	600047d6 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
600047c6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
600047ca:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
600047ce:	f042 0204 	orr.w	r2, r2, #4
600047d2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
600047d6:	075e      	lsls	r6, r3, #29
600047d8:	f140 8127 	bpl.w	60004a2a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
600047dc:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
600047e0:	f1ba 0f00 	cmp.w	sl, #0
600047e4:	f280 8126 	bge.w	60004a34 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
600047e8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
600047ec:	f36f 0341 	bfc	r3, #1, #1
600047f0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
600047f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
600047f8:	e11c      	b.n	60004a34 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
600047fa:	2a2d      	cmp	r2, #45	; 0x2d
600047fc:	d00d      	beq.n	6000481a <z_cbvprintf_impl+0x1aa>
600047fe:	2a30      	cmp	r2, #48	; 0x30
60004800:	f47f af69 	bne.w	600046d6 <z_cbvprintf_impl+0x66>
60004804:	2301      	movs	r3, #1
	} while (loop);
60004806:	e758      	b.n	600046ba <z_cbvprintf_impl+0x4a>
		switch (*sp) {
60004808:	f04f 0c01 	mov.w	ip, #1
6000480c:	e755      	b.n	600046ba <z_cbvprintf_impl+0x4a>
6000480e:	f04f 0e01 	mov.w	lr, #1
60004812:	e752      	b.n	600046ba <z_cbvprintf_impl+0x4a>
60004814:	f04f 0801 	mov.w	r8, #1
60004818:	e74f      	b.n	600046ba <z_cbvprintf_impl+0x4a>
6000481a:	2601      	movs	r6, #1
6000481c:	e74d      	b.n	600046ba <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
6000481e:	fb0e 6202 	mla	r2, lr, r2, r6
60004822:	4603      	mov	r3, r0
60004824:	3a30      	subs	r2, #48	; 0x30
60004826:	4618      	mov	r0, r3
60004828:	f810 6b01 	ldrb.w	r6, [r0], #1
6000482c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
60004830:	f1bc 0f09 	cmp.w	ip, #9
60004834:	d9f3      	bls.n	6000481e <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
60004836:	4299      	cmp	r1, r3
60004838:	d08f      	beq.n	6000475a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
6000483a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
6000483e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
60004840:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
60004842:	f362 0141 	bfi	r1, r2, #1, #1
60004846:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
6000484a:	e786      	b.n	6000475a <z_cbvprintf_impl+0xea>
6000484c:	460b      	mov	r3, r1
	size_t val = 0;
6000484e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
60004850:	f04f 0e0a 	mov.w	lr, #10
60004854:	e7e7      	b.n	60004826 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
60004856:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
6000485a:	3302      	adds	r3, #2
		conv->prec_star = true;
6000485c:	f042 0204 	orr.w	r2, r2, #4
60004860:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
60004864:	781a      	ldrb	r2, [r3, #0]
60004866:	2a6c      	cmp	r2, #108	; 0x6c
60004868:	d047      	beq.n	600048fa <z_cbvprintf_impl+0x28a>
6000486a:	d82b      	bhi.n	600048c4 <z_cbvprintf_impl+0x254>
6000486c:	2a68      	cmp	r2, #104	; 0x68
6000486e:	d031      	beq.n	600048d4 <z_cbvprintf_impl+0x264>
60004870:	2a6a      	cmp	r2, #106	; 0x6a
60004872:	d04b      	beq.n	6000490c <z_cbvprintf_impl+0x29c>
60004874:	2a4c      	cmp	r2, #76	; 0x4c
60004876:	d051      	beq.n	6000491c <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
60004878:	461a      	mov	r2, r3
6000487a:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
6000487e:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
60004880:	9203      	str	r2, [sp, #12]
60004882:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
60004886:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
6000488a:	f200 80be 	bhi.w	60004a0a <z_cbvprintf_impl+0x39a>
6000488e:	2b6d      	cmp	r3, #109	; 0x6d
60004890:	d851      	bhi.n	60004936 <z_cbvprintf_impl+0x2c6>
60004892:	2b69      	cmp	r3, #105	; 0x69
60004894:	f200 80b9 	bhi.w	60004a0a <z_cbvprintf_impl+0x39a>
60004898:	2b57      	cmp	r3, #87	; 0x57
6000489a:	d867      	bhi.n	6000496c <z_cbvprintf_impl+0x2fc>
6000489c:	2b41      	cmp	r3, #65	; 0x41
6000489e:	d003      	beq.n	600048a8 <z_cbvprintf_impl+0x238>
600048a0:	3b45      	subs	r3, #69	; 0x45
600048a2:	2b02      	cmp	r3, #2
600048a4:	f200 80b1 	bhi.w	60004a0a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
600048a8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
600048ac:	2204      	movs	r2, #4
600048ae:	f362 0302 	bfi	r3, r2, #0, #3
600048b2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
600048b6:	2301      	movs	r3, #1
			break;
600048b8:	e073      	b.n	600049a2 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
600048ba:	fb0c 0202 	mla	r2, ip, r2, r0
600048be:	460b      	mov	r3, r1
600048c0:	3a30      	subs	r2, #48	; 0x30
600048c2:	e75d      	b.n	60004780 <z_cbvprintf_impl+0x110>
	switch (*sp) {
600048c4:	2a74      	cmp	r2, #116	; 0x74
600048c6:	d025      	beq.n	60004914 <z_cbvprintf_impl+0x2a4>
600048c8:	2a7a      	cmp	r2, #122	; 0x7a
600048ca:	d1d5      	bne.n	60004878 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
600048cc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
600048d0:	2106      	movs	r1, #6
600048d2:	e00c      	b.n	600048ee <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
600048d4:	785a      	ldrb	r2, [r3, #1]
600048d6:	2a68      	cmp	r2, #104	; 0x68
600048d8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
600048dc:	d106      	bne.n	600048ec <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
600048de:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
600048e0:	f361 02c6 	bfi	r2, r1, #3, #4
			++sp;
600048e4:	3302      	adds	r3, #2
			conv->length_mod = LENGTH_LL;
600048e6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
600048ea:	e7c5      	b.n	60004878 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
600048ec:	2102      	movs	r1, #2
600048ee:	f361 02c6 	bfi	r2, r1, #3, #4
600048f2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
600048f6:	3301      	adds	r3, #1
600048f8:	e7be      	b.n	60004878 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
600048fa:	785a      	ldrb	r2, [r3, #1]
600048fc:	2a6c      	cmp	r2, #108	; 0x6c
600048fe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
60004902:	d101      	bne.n	60004908 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
60004904:	2104      	movs	r1, #4
60004906:	e7eb      	b.n	600048e0 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
60004908:	2103      	movs	r1, #3
6000490a:	e7f0      	b.n	600048ee <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
6000490c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
60004910:	2105      	movs	r1, #5
60004912:	e7ec      	b.n	600048ee <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
60004914:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
60004918:	2107      	movs	r1, #7
6000491a:	e7e8      	b.n	600048ee <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
6000491c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
60004920:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
60004924:	f022 0202 	bic.w	r2, r2, #2
60004928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
6000492c:	f042 0202 	orr.w	r2, r2, #2
60004930:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
60004934:	e7df      	b.n	600048f6 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
60004936:	3b6e      	subs	r3, #110	; 0x6e
60004938:	b2d9      	uxtb	r1, r3
6000493a:	2301      	movs	r3, #1
6000493c:	408b      	lsls	r3, r1
6000493e:	f240 4182 	movw	r1, #1154	; 0x482
60004942:	420b      	tst	r3, r1
60004944:	d137      	bne.n	600049b6 <z_cbvprintf_impl+0x346>
60004946:	f013 0f24 	tst.w	r3, #36	; 0x24
6000494a:	d151      	bne.n	600049f0 <z_cbvprintf_impl+0x380>
6000494c:	07d8      	lsls	r0, r3, #31
6000494e:	d55c      	bpl.n	60004a0a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
60004950:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
60004954:	2103      	movs	r1, #3
60004956:	f361 0302 	bfi	r3, r1, #0, #3
6000495a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
6000495e:	f002 0378 	and.w	r3, r2, #120	; 0x78
60004962:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
60004966:	424b      	negs	r3, r1
60004968:	414b      	adcs	r3, r1
6000496a:	e01a      	b.n	600049a2 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
6000496c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
60004970:	2001      	movs	r0, #1
60004972:	b2c9      	uxtb	r1, r1
60004974:	fa00 f101 	lsl.w	r1, r0, r1
60004978:	f411 4f62 	tst.w	r1, #57856	; 0xe200
6000497c:	d194      	bne.n	600048a8 <z_cbvprintf_impl+0x238>
6000497e:	f640 0601 	movw	r6, #2049	; 0x801
60004982:	4231      	tst	r1, r6
60004984:	d11d      	bne.n	600049c2 <z_cbvprintf_impl+0x352>
60004986:	f411 3f04 	tst.w	r1, #135168	; 0x21000
6000498a:	d03e      	beq.n	60004a0a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
6000498c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
60004990:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
60004994:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_SINT;
60004998:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
6000499c:	2a40      	cmp	r2, #64	; 0x40
6000499e:	d034      	beq.n	60004a0a <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
600049a0:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
600049a2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
600049a6:	f3c2 0140 	ubfx	r1, r2, #1, #1
600049aa:	430b      	orrs	r3, r1
600049ac:	f363 0241 	bfi	r2, r3, #1, #1
600049b0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
600049b4:	e6fd      	b.n	600047b2 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
600049b6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
600049ba:	2102      	movs	r1, #2
600049bc:	f361 0302 	bfi	r3, r1, #0, #3
600049c0:	e7e8      	b.n	60004994 <z_cbvprintf_impl+0x324>
600049c2:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
600049c6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
600049c8:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
600049cc:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
600049d0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
600049d2:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
600049d6:	bf02      	ittt	eq
600049d8:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
600049dc:	f041 0101 	orreq.w	r1, r1, #1
600049e0:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
600049e4:	2b63      	cmp	r3, #99	; 0x63
600049e6:	d1db      	bne.n	600049a0 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
600049e8:	1e13      	subs	r3, r2, #0
600049ea:	bf18      	it	ne
600049ec:	2301      	movne	r3, #1
600049ee:	e7d8      	b.n	600049a2 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
600049f0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
600049f4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
600049f6:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
600049fa:	f361 0302 	bfi	r3, r1, #0, #3
600049fe:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
60004a02:	bf14      	ite	ne
60004a04:	2301      	movne	r3, #1
60004a06:	2300      	moveq	r3, #0
60004a08:	e7cb      	b.n	600049a2 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
60004a0a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
60004a0e:	f043 0301 	orr.w	r3, r3, #1
60004a12:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
60004a16:	e7c3      	b.n	600049a0 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
60004a18:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
60004a1c:	2a00      	cmp	r2, #0
			width = conv->width_value;
60004a1e:	bfb4      	ite	lt
60004a20:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
60004a24:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
60004a28:	e6d5      	b.n	600047d6 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
60004a2a:	0798      	lsls	r0, r3, #30
60004a2c:	f57f aee2 	bpl.w	600047f4 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
60004a30:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
60004a34:	2300      	movs	r3, #0
			= (enum length_mod_enum)conv->length_mod;
60004a36:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_pre_exp = 0;
60004a3a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
60004a3e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
60004a42:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		enum specifier_cat_enum specifier_cat
60004a46:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
60004a4a:	2b01      	cmp	r3, #1
60004a4c:	d133      	bne.n	60004ab6 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
60004a4e:	1ecb      	subs	r3, r1, #3
60004a50:	2b04      	cmp	r3, #4
60004a52:	d804      	bhi.n	60004a5e <z_cbvprintf_impl+0x3ee>
60004a54:	e8df f003 	tbb	[pc, r3]
60004a58:	21464621 	.word	0x21464621
60004a5c:	21          	.byte	0x21
60004a5d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
60004a5e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
60004a60:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
60004a62:	ea4f 72e3 	mov.w	r2, r3, asr #31
60004a66:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
60004a6a:	d11c      	bne.n	60004aa6 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
60004a6c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
60004a70:	17da      	asrs	r2, r3, #31
60004a72:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
60004a76:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
60004a78:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
60004a7c:	f013 0603 	ands.w	r6, r3, #3
60004a80:	d050      	beq.n	60004b24 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
60004a82:	9b03      	ldr	r3, [sp, #12]
60004a84:	463a      	mov	r2, r7
60004a86:	4659      	mov	r1, fp
60004a88:	4648      	mov	r0, r9
60004a8a:	f004 fdf4 	bl	60009676 <outs>
60004a8e:	2800      	cmp	r0, #0
60004a90:	f2c0 8153 	blt.w	60004d3a <z_cbvprintf_impl+0x6ca>
60004a94:	4405      	add	r5, r0
			continue;
60004a96:	9f03      	ldr	r7, [sp, #12]
60004a98:	e5f2      	b.n	60004680 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
60004a9a:	f854 3b04 	ldr.w	r3, [r4], #4
60004a9e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
60004aa0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
60004aa4:	e7e8      	b.n	60004a78 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
60004aa6:	2902      	cmp	r1, #2
60004aa8:	d1e5      	bne.n	60004a76 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
60004aaa:	b21a      	sxth	r2, r3
60004aac:	f343 33c0 	sbfx	r3, r3, #15, #1
60004ab0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
60004ab4:	e7df      	b.n	60004a76 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
60004ab6:	2b02      	cmp	r3, #2
60004ab8:	d124      	bne.n	60004b04 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
60004aba:	1ecb      	subs	r3, r1, #3
60004abc:	2b04      	cmp	r3, #4
60004abe:	d804      	bhi.n	60004aca <z_cbvprintf_impl+0x45a>
60004ac0:	e8df f003 	tbb	[pc, r3]
60004ac4:	18101018 	.word	0x18101018
60004ac8:	18          	.byte	0x18
60004ac9:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
60004aca:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
60004acc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
60004ad0:	f04f 0200 	mov.w	r2, #0
60004ad4:	d014      	beq.n	60004b00 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
60004ad6:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
60004ad8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
60004adc:	d1cc      	bne.n	60004a78 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
60004ade:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
60004ae0:	930e      	str	r3, [sp, #56]	; 0x38
60004ae2:	e7c9      	b.n	60004a78 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
60004ae4:	3407      	adds	r4, #7
60004ae6:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
60004aea:	e8f4 2302 	ldrd	r2, r3, [r4], #8
60004aee:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
60004af2:	e7c1      	b.n	60004a78 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
60004af4:	f854 3b04 	ldr.w	r3, [r4], #4
60004af8:	930e      	str	r3, [sp, #56]	; 0x38
60004afa:	2300      	movs	r3, #0
60004afc:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
60004afe:	e7bb      	b.n	60004a78 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
60004b00:	b2db      	uxtb	r3, r3
60004b02:	e7cd      	b.n	60004aa0 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
60004b04:	2b04      	cmp	r3, #4
60004b06:	d108      	bne.n	60004b1a <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
60004b08:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
60004b0a:	f024 0407 	bic.w	r4, r4, #7
60004b0e:	e9d4 2300 	ldrd	r2, r3, [r4]
60004b12:	3408      	adds	r4, #8
60004b14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
60004b18:	e7ae      	b.n	60004a78 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
60004b1a:	2b03      	cmp	r3, #3
60004b1c:	d1ac      	bne.n	60004a78 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
60004b1e:	f854 3b04 	ldr.w	r3, [r4], #4
60004b22:	e7dd      	b.n	60004ae0 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
60004b24:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
60004b28:	2878      	cmp	r0, #120	; 0x78
60004b2a:	d8b4      	bhi.n	60004a96 <z_cbvprintf_impl+0x426>
60004b2c:	2862      	cmp	r0, #98	; 0x62
60004b2e:	d81c      	bhi.n	60004b6a <z_cbvprintf_impl+0x4fa>
60004b30:	2825      	cmp	r0, #37	; 0x25
60004b32:	f43f adad 	beq.w	60004690 <z_cbvprintf_impl+0x20>
60004b36:	2858      	cmp	r0, #88	; 0x58
60004b38:	d1ad      	bne.n	60004a96 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
60004b3a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
60004b3e:	aa10      	add	r2, sp, #64	; 0x40
60004b40:	9300      	str	r3, [sp, #0]
60004b42:	ab08      	add	r3, sp, #32
60004b44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
60004b48:	f004 fd4f 	bl	600095ea <encode_uint>
			if (precision >= 0) {
60004b4c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
60004b50:	4607      	mov	r7, r0
			if (precision >= 0) {
60004b52:	f280 809a 	bge.w	60004c8a <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
60004b56:	2f00      	cmp	r7, #0
60004b58:	d09d      	beq.n	60004a96 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
60004b5a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
60004b5e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
60004b60:	2e00      	cmp	r6, #0
60004b62:	f000 80c1 	beq.w	60004ce8 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
60004b66:	3001      	adds	r0, #1
60004b68:	e0be      	b.n	60004ce8 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
60004b6a:	3863      	subs	r0, #99	; 0x63
60004b6c:	2815      	cmp	r0, #21
60004b6e:	d892      	bhi.n	60004a96 <z_cbvprintf_impl+0x426>
60004b70:	a201      	add	r2, pc, #4	; (adr r2, 60004b78 <z_cbvprintf_impl+0x508>)
60004b72:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
60004b76:	bf00      	nop
60004b78:	60004c4d 	.word	0x60004c4d
60004b7c:	60004c5f 	.word	0x60004c5f
60004b80:	60004a97 	.word	0x60004a97
60004b84:	60004a97 	.word	0x60004a97
60004b88:	60004a97 	.word	0x60004a97
60004b8c:	60004a97 	.word	0x60004a97
60004b90:	60004c5f 	.word	0x60004c5f
60004b94:	60004a97 	.word	0x60004a97
60004b98:	60004a97 	.word	0x60004a97
60004b9c:	60004a97 	.word	0x60004a97
60004ba0:	60004a97 	.word	0x60004a97
60004ba4:	60004ced 	.word	0x60004ced
60004ba8:	60004c85 	.word	0x60004c85
60004bac:	60004cab 	.word	0x60004cab
60004bb0:	60004a97 	.word	0x60004a97
60004bb4:	60004a97 	.word	0x60004a97
60004bb8:	60004bd1 	.word	0x60004bd1
60004bbc:	60004a97 	.word	0x60004a97
60004bc0:	60004c85 	.word	0x60004c85
60004bc4:	60004a97 	.word	0x60004a97
60004bc8:	60004a97 	.word	0x60004a97
60004bcc:	60004c85 	.word	0x60004c85
			if (precision >= 0) {
60004bd0:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
60004bd4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
60004bd6:	db35      	blt.n	60004c44 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
60004bd8:	4651      	mov	r1, sl
60004bda:	4638      	mov	r0, r7
60004bdc:	f005 f89c 	bl	60009d18 <strnlen>
			bpe = bps + len;
60004be0:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
60004be4:	2f00      	cmp	r7, #0
60004be6:	f43f af56 	beq.w	60004a96 <z_cbvprintf_impl+0x426>
		char sign = 0;
60004bea:	2600      	movs	r6, #0
		if (conv->altform_0c) {
60004bec:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
60004bf0:	f013 0210 	ands.w	r2, r3, #16
60004bf4:	9205      	str	r2, [sp, #20]
60004bf6:	f000 8093 	beq.w	60004d20 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
60004bfa:	3002      	adds	r0, #2
		if (conv->pad_fp) {
60004bfc:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
60004bfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
60004c00:	bf48      	it	mi
60004c02:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
60004c04:	4410      	add	r0, r2
60004c06:	9204      	str	r2, [sp, #16]
			nj_len += conv->pad0_pre_exp;
60004c08:	bf48      	it	mi
60004c0a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
60004c0c:	f1b8 0f00 	cmp.w	r8, #0
60004c10:	f340 809f 	ble.w	60004d52 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
60004c14:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
60004c18:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
60004c1c:	f3c2 0380 	ubfx	r3, r2, #2, #1
60004c20:	0750      	lsls	r0, r2, #29
60004c22:	9306      	str	r3, [sp, #24]
60004c24:	f100 8095 	bmi.w	60004d52 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
60004c28:	0651      	lsls	r1, r2, #25
60004c2a:	f140 8089 	bpl.w	60004d40 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
60004c2e:	b13e      	cbz	r6, 60004c40 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
60004c30:	4659      	mov	r1, fp
60004c32:	4630      	mov	r0, r6
60004c34:	47c8      	blx	r9
60004c36:	2800      	cmp	r0, #0
60004c38:	db7f      	blt.n	60004d3a <z_cbvprintf_impl+0x6ca>
60004c3a:	9b06      	ldr	r3, [sp, #24]
60004c3c:	3501      	adds	r5, #1
60004c3e:	461e      	mov	r6, r3
					pad = '0';
60004c40:	2230      	movs	r2, #48	; 0x30
60004c42:	e07e      	b.n	60004d42 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
60004c44:	4638      	mov	r0, r7
60004c46:	f005 f860 	bl	60009d0a <strlen>
60004c4a:	e7c9      	b.n	60004be0 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
60004c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
60004c4e:	2600      	movs	r6, #0
			bps = buf;
60004c50:	af08      	add	r7, sp, #32
			bpe = buf + 1;
60004c52:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
60004c56:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
60004c58:	f88d 3020 	strb.w	r3, [sp, #32]
		if (sign != 0) {
60004c5c:	e7c6      	b.n	60004bec <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
60004c5e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
60004c60:	bf56      	itet	pl
60004c62:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
				sign = '+';
60004c66:	262b      	movmi	r6, #43	; 0x2b
			} else if (conv->flag_space) {
60004c68:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
60004c6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
60004c6e:	2b00      	cmp	r3, #0
60004c70:	f6bf af63 	bge.w	60004b3a <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
60004c74:	4252      	negs	r2, r2
				sign = '-';
60004c76:	f04f 062d 	mov.w	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
60004c7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
60004c7e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
60004c82:	e75a      	b.n	60004b3a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
60004c84:	2600      	movs	r6, #0
60004c86:	e758      	b.n	60004b3a <z_cbvprintf_impl+0x4ca>
		char sign = 0;
60004c88:	2600      	movs	r6, #0
				size_t len = bpe - bps;
60004c8a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
				conv->flag_zero = false;
60004c8e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
60004c92:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
60004c94:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
60004c98:	459a      	cmp	sl, r3
				conv->flag_zero = false;
60004c9a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
60004c9e:	f67f af5a 	bls.w	60004b56 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
60004ca2:	ebaa 0303 	sub.w	r3, sl, r3
60004ca6:	9311      	str	r3, [sp, #68]	; 0x44
60004ca8:	e755      	b.n	60004b56 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
60004caa:	980e      	ldr	r0, [sp, #56]	; 0x38
60004cac:	b390      	cbz	r0, 60004d14 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
60004cae:	f10d 0336 	add.w	r3, sp, #54	; 0x36
60004cb2:	aa10      	add	r2, sp, #64	; 0x40
60004cb4:	2100      	movs	r1, #0
60004cb6:	9300      	str	r3, [sp, #0]
60004cb8:	ab08      	add	r3, sp, #32
60004cba:	f004 fc96 	bl	600095ea <encode_uint>
				conv->altform_0c = true;
60004cbe:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
60004cc2:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
60004cc6:	4607      	mov	r7, r0
				conv->altform_0c = true;
60004cc8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
60004ccc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
60004cd0:	f043 0310 	orr.w	r3, r3, #16
60004cd4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
60004cd8:	dad6      	bge.n	60004c88 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
60004cda:	2800      	cmp	r0, #0
60004cdc:	f43f aedb 	beq.w	60004a96 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
60004ce0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
		char sign = 0;
60004ce4:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
60004ce6:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
60004ce8:	469a      	mov	sl, r3
60004cea:	e77f      	b.n	60004bec <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
60004cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
60004cee:	2907      	cmp	r1, #7
60004cf0:	f63f aed1 	bhi.w	60004a96 <z_cbvprintf_impl+0x426>
60004cf4:	e8df f001 	tbb	[pc, r1]
60004cf8:	0c06040c 	.word	0x0c06040c
60004cfc:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
60004d00:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
60004d02:	e6c8      	b.n	60004a96 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
60004d04:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
60004d06:	e6c6      	b.n	60004a96 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
60004d08:	17ea      	asrs	r2, r5, #31
60004d0a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
60004d0e:	e6c2      	b.n	60004a96 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
60004d10:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
60004d12:	e6c0      	b.n	60004a96 <z_cbvprintf_impl+0x426>
60004d14:	4f2e      	ldr	r7, [pc, #184]	; (60004dd0 <z_cbvprintf_impl+0x760>)
		char sign = 0;
60004d16:	4606      	mov	r6, r0
		size_t nj_len = (bpe - bps);
60004d18:	2005      	movs	r0, #5
			bpe = bps + 5;
60004d1a:	f107 0a05 	add.w	sl, r7, #5
60004d1e:	e765      	b.n	60004bec <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
60004d20:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
60004d22:	bf48      	it	mi
60004d24:	3001      	addmi	r0, #1
60004d26:	e769      	b.n	60004bfc <z_cbvprintf_impl+0x58c>
					OUTC(pad);
60004d28:	4610      	mov	r0, r2
60004d2a:	9307      	str	r3, [sp, #28]
60004d2c:	9206      	str	r2, [sp, #24]
60004d2e:	4659      	mov	r1, fp
60004d30:	47c8      	blx	r9
60004d32:	2800      	cmp	r0, #0
60004d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
60004d38:	da04      	bge.n	60004d44 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
60004d3a:	b015      	add	sp, #84	; 0x54
60004d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
60004d40:	2220      	movs	r2, #32
					pad = '0';
60004d42:	4643      	mov	r3, r8
				while (width-- > 0) {
60004d44:	4619      	mov	r1, r3
60004d46:	3b01      	subs	r3, #1
60004d48:	2900      	cmp	r1, #0
60004d4a:	dced      	bgt.n	60004d28 <z_cbvprintf_impl+0x6b8>
60004d4c:	4445      	add	r5, r8
60004d4e:	4698      	mov	r8, r3
60004d50:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
60004d52:	b12e      	cbz	r6, 60004d60 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
60004d54:	4659      	mov	r1, fp
60004d56:	4630      	mov	r0, r6
60004d58:	47c8      	blx	r9
60004d5a:	2800      	cmp	r0, #0
60004d5c:	dbed      	blt.n	60004d3a <z_cbvprintf_impl+0x6ca>
60004d5e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
60004d60:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
60004d64:	06da      	lsls	r2, r3, #27
60004d66:	d401      	bmi.n	60004d6c <z_cbvprintf_impl+0x6fc>
60004d68:	071b      	lsls	r3, r3, #28
60004d6a:	d505      	bpl.n	60004d78 <z_cbvprintf_impl+0x708>
				OUTC('0');
60004d6c:	4659      	mov	r1, fp
60004d6e:	2030      	movs	r0, #48	; 0x30
60004d70:	47c8      	blx	r9
60004d72:	2800      	cmp	r0, #0
60004d74:	dbe1      	blt.n	60004d3a <z_cbvprintf_impl+0x6ca>
60004d76:	3501      	adds	r5, #1
			if (conv->altform_0c) {
60004d78:	9b05      	ldr	r3, [sp, #20]
60004d7a:	b133      	cbz	r3, 60004d8a <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
60004d7c:	4659      	mov	r1, fp
60004d7e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
60004d82:	47c8      	blx	r9
60004d84:	2800      	cmp	r0, #0
60004d86:	dbd8      	blt.n	60004d3a <z_cbvprintf_impl+0x6ca>
60004d88:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
60004d8a:	9e04      	ldr	r6, [sp, #16]
60004d8c:	442e      	add	r6, r5
60004d8e:	e005      	b.n	60004d9c <z_cbvprintf_impl+0x72c>
				OUTC('0');
60004d90:	4659      	mov	r1, fp
60004d92:	2030      	movs	r0, #48	; 0x30
60004d94:	47c8      	blx	r9
60004d96:	2800      	cmp	r0, #0
60004d98:	dbcf      	blt.n	60004d3a <z_cbvprintf_impl+0x6ca>
60004d9a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
60004d9c:	1b73      	subs	r3, r6, r5
60004d9e:	2b00      	cmp	r3, #0
60004da0:	dcf6      	bgt.n	60004d90 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
60004da2:	4653      	mov	r3, sl
60004da4:	463a      	mov	r2, r7
60004da6:	4659      	mov	r1, fp
60004da8:	4648      	mov	r0, r9
60004daa:	f004 fc64 	bl	60009676 <outs>
60004dae:	2800      	cmp	r0, #0
60004db0:	dbc3      	blt.n	60004d3a <z_cbvprintf_impl+0x6ca>
60004db2:	4405      	add	r5, r0
		while (width > 0) {
60004db4:	44a8      	add	r8, r5
60004db6:	eba8 0305 	sub.w	r3, r8, r5
60004dba:	2b00      	cmp	r3, #0
60004dbc:	f77f ae6b 	ble.w	60004a96 <z_cbvprintf_impl+0x426>
			OUTC(' ');
60004dc0:	4659      	mov	r1, fp
60004dc2:	2020      	movs	r0, #32
60004dc4:	47c8      	blx	r9
60004dc6:	2800      	cmp	r0, #0
60004dc8:	dbb7      	blt.n	60004d3a <z_cbvprintf_impl+0x6ca>
60004dca:	3501      	adds	r5, #1
			--width;
60004dcc:	e7f3      	b.n	60004db6 <z_cbvprintf_impl+0x746>
60004dce:	bf00      	nop
60004dd0:	6000c452 	.word	0x6000c452

60004dd4 <CLOCK_SetDiv>:
static inline void CLOCK_SetMux(clock_mux_t mux, uint32_t value)
{
    uint32_t busyShift;

    busyShift               = CCM_TUPLE_BUSY_SHIFT(mux);
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60004dd4:	b2c3      	uxtb	r3, r0
    busyShift               = CCM_TUPLE_BUSY_SHIFT(mux);
60004dd6:	0e82      	lsrs	r2, r0, #26
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60004dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
                              (((uint32_t)((value) << CCM_TUPLE_SHIFT(mux))) & CCM_TUPLE_MASK(mux));

    assert(busyShift <= CCM_NO_BUSY_WAIT);

    /* Clock switch need Handshake? */
    if (CCM_NO_BUSY_WAIT != busyShift)
60004ddc:	2a20      	cmp	r2, #32
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60004dde:	f503 237c 	add.w	r3, r3, #1032192	; 0xfc000
{
60004de2:	b530      	push	{r4, r5, lr}
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60004de4:	f3c0 2504 	ubfx	r5, r0, #8, #5
60004de8:	681c      	ldr	r4, [r3, #0]
60004dea:	f3c0 304c 	ubfx	r0, r0, #13, #13
                              (((uint32_t)((value) << CCM_TUPLE_SHIFT(mux))) & CCM_TUPLE_MASK(mux));
60004dee:	fa01 f105 	lsl.w	r1, r1, r5
    CCM_TUPLE_REG(CCM, mux) = (CCM_TUPLE_REG(CCM, mux) & (~CCM_TUPLE_MASK(mux))) |
60004df2:	fa00 f005 	lsl.w	r0, r0, r5
60004df6:	ea81 0104 	eor.w	r1, r1, r4
60004dfa:	ea00 0001 	and.w	r0, r0, r1
60004dfe:	ea80 0004 	eor.w	r0, r0, r4
60004e02:	6018      	str	r0, [r3, #0]
    if (CCM_NO_BUSY_WAIT != busyShift)
60004e04:	d005      	beq.n	60004e12 <CLOCK_SetDiv+0x3e>
60004e06:	2301      	movs	r3, #1
    {
        /* Wait until CCM internal handshake finish. */
        while ((CCM->CDHIPR & (1UL << busyShift)) != 0UL)
60004e08:	4902      	ldr	r1, [pc, #8]	; (60004e14 <CLOCK_SetDiv+0x40>)
60004e0a:	4093      	lsls	r3, r2
60004e0c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
60004e0e:	421a      	tst	r2, r3
60004e10:	d1fc      	bne.n	60004e0c <CLOCK_SetDiv+0x38>
        {
        }
    }
}
60004e12:	bd30      	pop	{r4, r5, pc}
60004e14:	400fc000 	.word	0x400fc000

60004e18 <imxrt_init>:
 *
 * @return 0
 */

static int imxrt_init(const struct device *arg)
{
60004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
60004e1a:	f04f 0310 	mov.w	r3, #16
60004e1e:	f3ef 8411 	mrs	r4, BASEPRI
60004e22:	f383 8812 	msr	BASEPRI_MAX, r3
60004e26:	f3bf 8f6f 	isb	sy
	/* SystemInit enables code cache, disable it here */
	SCB_DisableICache();
#endif

	if (IS_ENABLED(CONFIG_IMXRT1XXX_DATA_CACHE)) {
		if ((SCB->CCR & SCB_CCR_DC_Msk) == 0) {
60004e2a:	4a3b      	ldr	r2, [pc, #236]	; (60004f18 <imxrt_init+0x100>)
60004e2c:	6953      	ldr	r3, [r2, #20]
60004e2e:	03db      	lsls	r3, r3, #15
60004e30:	d427      	bmi.n	60004e82 <imxrt_init+0x6a>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
60004e32:	6953      	ldr	r3, [r2, #20]
60004e34:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
60004e38:	d123      	bne.n	60004e82 <imxrt_init+0x6a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
60004e3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
60004e3e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
60004e42:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
60004e46:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
60004e4a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
60004e4e:	f3c3 334e 	ubfx	r3, r3, #13, #15
60004e52:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
60004e54:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
60004e58:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
60004e5a:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
60004e5e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
60004e60:	f8c2 6260 	str.w	r6, [r2, #608]	; 0x260
      } while (ways-- != 0U);
60004e64:	d2f9      	bcs.n	60004e5a <imxrt_init+0x42>
    } while(sets-- != 0U);
60004e66:	3b20      	subs	r3, #32
60004e68:	f113 0f20 	cmn.w	r3, #32
60004e6c:	d1f2      	bne.n	60004e54 <imxrt_init+0x3c>
60004e6e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
60004e72:	6953      	ldr	r3, [r2, #20]
60004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
60004e78:	6153      	str	r3, [r2, #20]
60004e7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
60004e7e:	f3bf 8f6f 	isb	sy
 *
 * @param freq The XTAL input clock frequency in Hz.
 */
static inline void CLOCK_SetXtalFreq(uint32_t freq)
{
    g_xtalFreq = freq;
60004e82:	4b26      	ldr	r3, [pc, #152]	; (60004f1c <imxrt_init+0x104>)
	CLOCK_SetMux(kCLOCK_PeriphClk2Mux, 0x1);
60004e84:	2101      	movs	r1, #1
60004e86:	4a26      	ldr	r2, [pc, #152]	; (60004f20 <imxrt_init+0x108>)
60004e88:	4826      	ldr	r0, [pc, #152]	; (60004f24 <imxrt_init+0x10c>)
60004e8a:	601a      	str	r2, [r3, #0]
 *
 * @param freq The RTC XTAL input clock frequency in Hz.
 */
static inline void CLOCK_SetRtcXtalFreq(uint32_t freq)
{
    g_rtcXtalFreq = freq;
60004e8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
60004e90:	4b25      	ldr	r3, [pc, #148]	; (60004f28 <imxrt_init+0x110>)
60004e92:	601a      	str	r2, [r3, #0]
60004e94:	f7ff ff9e 	bl	60004dd4 <CLOCK_SetDiv>
	CLOCK_SetMux(kCLOCK_PeriphMux, 0x1);
60004e98:	2101      	movs	r1, #1
60004e9a:	4824      	ldr	r0, [pc, #144]	; (60004f2c <imxrt_init+0x114>)
60004e9c:	f7ff ff9a 	bl	60004dd4 <CLOCK_SetDiv>
	DCDC->REG3 = (DCDC->REG3 & (~DCDC_REG3_TRG_MASK)) | DCDC_REG3_TRG(CONFIG_DCDC_VALUE);
60004ea0:	4a23      	ldr	r2, [pc, #140]	; (60004f30 <imxrt_init+0x118>)
60004ea2:	68d3      	ldr	r3, [r2, #12]
60004ea4:	f023 031f 	bic.w	r3, r3, #31
60004ea8:	f043 0312 	orr.w	r3, r3, #18
60004eac:	60d3      	str	r3, [r2, #12]
			(DCDC_REG0_STS_DC_OK_MASK & DCDC->REG0)) {
60004eae:	6813      	ldr	r3, [r2, #0]
	while (DCDC_REG0_STS_DC_OK_MASK !=
60004eb0:	2b00      	cmp	r3, #0
60004eb2:	dafc      	bge.n	60004eae <imxrt_init+0x96>
	CLOCK_InitEnetPll(&ethPllConfig);
60004eb4:	481f      	ldr	r0, [pc, #124]	; (60004f34 <imxrt_init+0x11c>)
60004eb6:	f002 fbc9 	bl	6000764c <CLOCK_InitEnetPll>
	CLOCK_SetDiv(kCLOCK_ArmDiv, DT_PROP(DT_CHILD(CCM_NODE, arm_podf), clock_div) - 1);
60004eba:	2100      	movs	r1, #0
60004ebc:	481e      	ldr	r0, [pc, #120]	; (60004f38 <imxrt_init+0x120>)
60004ebe:	f7ff ff89 	bl	60004dd4 <CLOCK_SetDiv>
	CLOCK_SetDiv(kCLOCK_AhbDiv, DT_PROP(DT_CHILD(CCM_NODE, ahb_podf), clock_div) - 1);
60004ec2:	2100      	movs	r1, #0
60004ec4:	481d      	ldr	r0, [pc, #116]	; (60004f3c <imxrt_init+0x124>)
60004ec6:	f7ff ff85 	bl	60004dd4 <CLOCK_SetDiv>
	CLOCK_SetDiv(kCLOCK_IpgDiv, DT_PROP(DT_CHILD(CCM_NODE, ipg_podf), clock_div) - 1);
60004eca:	2103      	movs	r1, #3
60004ecc:	481c      	ldr	r0, [pc, #112]	; (60004f40 <imxrt_init+0x128>)
60004ece:	f7ff ff81 	bl	60004dd4 <CLOCK_SetDiv>
	CLOCK_SetMux(kCLOCK_PrePeriphMux, 0x3);
60004ed2:	2103      	movs	r1, #3
60004ed4:	481b      	ldr	r0, [pc, #108]	; (60004f44 <imxrt_init+0x12c>)
60004ed6:	f7ff ff7d 	bl	60004dd4 <CLOCK_SetDiv>
	CLOCK_SetMux(kCLOCK_PeriphMux, 0x0);
60004eda:	2100      	movs	r1, #0
60004edc:	4813      	ldr	r0, [pc, #76]	; (60004f2c <imxrt_init+0x114>)
60004ede:	f7ff ff79 	bl	60004dd4 <CLOCK_SetDiv>
	CLOCK_SetMux(kCLOCK_UartMux, 0); /* Set UART source to PLL3 80M */
60004ee2:	2100      	movs	r1, #0
60004ee4:	4818      	ldr	r0, [pc, #96]	; (60004f48 <imxrt_init+0x130>)
60004ee6:	f7ff ff75 	bl	60004dd4 <CLOCK_SetDiv>
	CLOCK_SetDiv(kCLOCK_UartDiv, 0); /* Set UART divider to 1 */
60004eea:	2100      	movs	r1, #0
60004eec:	4817      	ldr	r0, [pc, #92]	; (60004f4c <imxrt_init+0x134>)
60004eee:	f7ff ff71 	bl	60004dd4 <CLOCK_SetDiv>
	CLOCK_SetMux(kCLOCK_LpspiMux, 1); /* Set SPI source to USB1 PFD0 720M */
60004ef2:	2101      	movs	r1, #1
60004ef4:	4816      	ldr	r0, [pc, #88]	; (60004f50 <imxrt_init+0x138>)
60004ef6:	f7ff ff6d 	bl	60004dd4 <CLOCK_SetDiv>
	CLOCK_SetDiv(kCLOCK_LpspiDiv, 7); /* Set SPI divider to 8 */
60004efa:	2107      	movs	r1, #7
60004efc:	4815      	ldr	r0, [pc, #84]	; (60004f54 <imxrt_init+0x13c>)
60004efe:	f7ff ff69 	bl	60004dd4 <CLOCK_SetDiv>
    CCM->CLPCR = (CCM->CLPCR & ~CCM_CLPCR_LPM_MASK) | CCM_CLPCR_LPM((uint32_t)mode);
60004f02:	4a15      	ldr	r2, [pc, #84]	; (60004f58 <imxrt_init+0x140>)
60004f04:	6d53      	ldr	r3, [r2, #84]	; 0x54
60004f06:	f023 0303 	bic.w	r3, r3, #3
60004f0a:	6553      	str	r3, [r2, #84]	; 0x54
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
60004f0c:	f384 8811 	msr	BASEPRI, r4
60004f10:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	/* restore interrupt state */
	irq_unlock(oldLevel);
	return 0;
}
60004f14:	2000      	movs	r0, #0
60004f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60004f18:	e000ed00 	.word	0xe000ed00
60004f1c:	80001bb4 	.word	0x80001bb4
60004f20:	016e3600 	.word	0x016e3600
60004f24:	80006c18 	.word	0x80006c18
60004f28:	80001bb0 	.word	0x80001bb0
60004f2c:	14003914 	.word	0x14003914
60004f30:	40080000 	.word	0x40080000
60004f34:	6000c458 	.word	0x6000c458
60004f38:	4000e010 	.word	0x4000e010
60004f3c:	0400ea14 	.word	0x0400ea14
60004f40:	80006814 	.word	0x80006814
60004f44:	80007218 	.word	0x80007218
60004f48:	80002624 	.word	0x80002624
60004f4c:	8007e024 	.word	0x8007e024
60004f50:	80006418 	.word	0x80006418
60004f54:	8000fa18 	.word	0x8000fa18
60004f58:	400fc000 	.word	0x400fc000

60004f5c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
60004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60004f60:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
60004f62:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
60004f64:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
60004f68:	f8df 8050 	ldr.w	r8, [pc, #80]	; 60004fbc <activate_foreach_backend+0x60>
	while (mask_cpy) {
60004f6c:	b914      	cbnz	r4, 60004f74 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
60004f6e:	4638      	mov	r0, r7
60004f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
60004f74:	fa94 f5a4 	rbit	r5, r4
60004f78:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
60004f7c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
60004f80:	012e      	lsls	r6, r5, #4
60004f82:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
60004f86:	ea6f 0a03 	mvn.w	sl, r3
60004f8a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
60004f8e:	7b2b      	ldrb	r3, [r5, #12]
60004f90:	2b00      	cmp	r3, #0
60004f92:	d0eb      	beq.n	60004f6c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
60004f94:	f858 3006 	ldr.w	r3, [r8, r6]
60004f98:	691b      	ldr	r3, [r3, #16]
60004f9a:	b94b      	cbnz	r3, 60004fb0 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
60004f9c:	4446      	add	r6, r8
			log_backend_enable(backend,
60004f9e:	2204      	movs	r2, #4
60004fa0:	4628      	mov	r0, r5
			mask &= ~BIT(i);
60004fa2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
60004fa6:	6873      	ldr	r3, [r6, #4]
60004fa8:	6819      	ldr	r1, [r3, #0]
60004faa:	f000 fa51 	bl	60005450 <log_backend_enable>
60004fae:	e7dd      	b.n	60004f6c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
60004fb0:	4628      	mov	r0, r5
60004fb2:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
60004fb4:	2800      	cmp	r0, #0
60004fb6:	d1d9      	bne.n	60004f6c <activate_foreach_backend+0x10>
60004fb8:	e7f0      	b.n	60004f9c <activate_foreach_backend+0x40>
60004fba:	bf00      	nop
60004fbc:	6000b8a8 	.word	0x6000b8a8

60004fc0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
60004fc0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
60004fc2:	2200      	movs	r2, #0
{
60004fc4:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
60004fc6:	490f      	ldr	r1, [pc, #60]	; (60005004 <enable_logger+0x44>)
60004fc8:	480f      	ldr	r0, [pc, #60]	; (60005008 <enable_logger+0x48>)
60004fca:	f006 f917 	bl	6000b1fc <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
60004fce:	2200      	movs	r2, #0
60004fd0:	2300      	movs	r3, #0
60004fd2:	2400      	movs	r4, #0
60004fd4:	4d0d      	ldr	r5, [pc, #52]	; (6000500c <enable_logger+0x4c>)
60004fd6:	490e      	ldr	r1, [pc, #56]	; (60005010 <enable_logger+0x50>)
60004fd8:	4628      	mov	r0, r5
60004fda:	9400      	str	r4, [sp, #0]
60004fdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
60004fe0:	230e      	movs	r3, #14
60004fe2:	f44f 7240 	mov.w	r2, #768	; 0x300
60004fe6:	e9cd 3403 	strd	r3, r4, [sp, #12]
60004fea:	e9cd 4401 	strd	r4, r4, [sp, #4]
60004fee:	4b09      	ldr	r3, [pc, #36]	; (60005014 <enable_logger+0x54>)
60004ff0:	f003 fc28 	bl	60008844 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
60004ff4:	4908      	ldr	r1, [pc, #32]	; (60005018 <enable_logger+0x58>)
60004ff6:	4628      	mov	r0, r5
60004ff8:	f003 fb9c 	bl	60008734 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
60004ffc:	4620      	mov	r0, r4
60004ffe:	b009      	add	sp, #36	; 0x24
60005000:	bd30      	pop	{r4, r5, pc}
60005002:	bf00      	nop
60005004:	6000501d 	.word	0x6000501d
60005008:	80000e80 	.word	0x80000e80
6000500c:	800009b0 	.word	0x800009b0
60005010:	80001c80 	.word	0x80001c80
60005014:	600052fd 	.word	0x600052fd
60005018:	6000c46d 	.word	0x6000c46d

6000501c <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
6000501c:	4801      	ldr	r0, [pc, #4]	; (60005024 <log_process_thread_timer_expiry_fn+0x8>)
6000501e:	f003 bc8d 	b.w	6000893c <z_impl_k_sem_give>
60005022:	bf00      	nop
60005024:	8000099c 	.word	0x8000099c

60005028 <z_log_init>:
{
60005028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000502c:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
6000502e:	481e      	ldr	r0, [pc, #120]	; (600050a8 <z_log_init+0x80>)
{
60005030:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
60005032:	f004 fda1 	bl	60009b78 <atomic_inc>
60005036:	4606      	mov	r6, r0
60005038:	b378      	cbz	r0, 6000509a <z_log_init+0x72>
	uint32_t mask = 0;
6000503a:	2500      	movs	r5, #0
}
6000503c:	4628      	mov	r0, r5
6000503e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
60005042:	7b23      	ldrb	r3, [r4, #12]
60005044:	b173      	cbz	r3, 60005064 <z_log_init+0x3c>
	if (backend->api->init) {
60005046:	6823      	ldr	r3, [r4, #0]
60005048:	68db      	ldr	r3, [r3, #12]
6000504a:	b10b      	cbz	r3, 60005050 <z_log_init+0x28>
		backend->api->init(backend);
6000504c:	4620      	mov	r0, r4
6000504e:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
60005050:	6823      	ldr	r3, [r4, #0]
60005052:	691b      	ldr	r3, [r3, #16]
60005054:	b9cb      	cbnz	r3, 6000508a <z_log_init+0x62>
				log_backend_enable(backend,
60005056:	6863      	ldr	r3, [r4, #4]
60005058:	2204      	movs	r2, #4
6000505a:	4620      	mov	r0, r4
6000505c:	6819      	ldr	r1, [r3, #0]
6000505e:	f000 f9f7 	bl	60005450 <log_backend_enable>
			i++;
60005062:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005064:	3410      	adds	r4, #16
60005066:	454c      	cmp	r4, r9
60005068:	d3eb      	bcc.n	60005042 <z_log_init+0x1a>
	if (blocking) {
6000506a:	f1b8 0f00 	cmp.w	r8, #0
6000506e:	d0e5      	beq.n	6000503c <z_log_init+0x14>
		while (mask) {
60005070:	2d00      	cmp	r5, #0
60005072:	d0e2      	beq.n	6000503a <z_log_init+0x12>
			mask = activate_foreach_backend(mask);
60005074:	4628      	mov	r0, r5
60005076:	f7ff ff71 	bl	60004f5c <activate_foreach_backend>
6000507a:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
6000507c:	2f00      	cmp	r7, #0
6000507e:	d0f7      	beq.n	60005070 <z_log_init+0x48>
	return z_impl_k_sleep(timeout);
60005080:	2100      	movs	r1, #0
60005082:	2064      	movs	r0, #100	; 0x64
60005084:	f003 ff24 	bl	60008ed0 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
60005088:	e7f2      	b.n	60005070 <z_log_init+0x48>
		return backend->api->is_ready(backend);
6000508a:	4620      	mov	r0, r4
6000508c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
6000508e:	2800      	cmp	r0, #0
60005090:	d0e1      	beq.n	60005056 <z_log_init+0x2e>
				mask |= BIT(i);
60005092:	fa0a f306 	lsl.w	r3, sl, r6
60005096:	431d      	orrs	r5, r3
60005098:	e7e3      	b.n	60005062 <z_log_init+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000509a:	4c04      	ldr	r4, [pc, #16]	; (600050ac <z_log_init+0x84>)
	uint32_t mask = 0;
6000509c:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000509e:	f8df 9010 	ldr.w	r9, [pc, #16]	; 600050b0 <z_log_init+0x88>
				mask |= BIT(i);
600050a2:	f04f 0a01 	mov.w	sl, #1
600050a6:	e7de      	b.n	60005066 <z_log_init+0x3e>
600050a8:	800010a8 	.word	0x800010a8
600050ac:	6000b8a8 	.word	0x6000b8a8
600050b0:	6000b8b8 	.word	0x6000b8b8

600050b4 <log_format_func_t_get>:
}
600050b4:	4b01      	ldr	r3, [pc, #4]	; (600050bc <log_format_func_t_get+0x8>)
600050b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
600050ba:	4770      	bx	lr
600050bc:	6000b8d4 	.word	0x6000b8d4

600050c0 <log_set_timestamp_func>:
{
600050c0:	b508      	push	{r3, lr}
600050c2:	4603      	mov	r3, r0
600050c4:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
600050c6:	b12b      	cbz	r3, 600050d4 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
600050c8:	4a04      	ldr	r2, [pc, #16]	; (600050dc <log_set_timestamp_func+0x1c>)
600050ca:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
600050cc:	f000 fc48 	bl	60005960 <log_output_timestamp_freq_set>
	return 0;
600050d0:	2000      	movs	r0, #0
}
600050d2:	bd08      	pop	{r3, pc}
		return -EINVAL;
600050d4:	f06f 0015 	mvn.w	r0, #21
600050d8:	e7fb      	b.n	600050d2 <log_set_timestamp_func+0x12>
600050da:	bf00      	nop
600050dc:	80000814 	.word	0x80000814

600050e0 <z_log_notify_backend_enabled>:
{
600050e0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
600050e2:	4c04      	ldr	r4, [pc, #16]	; (600050f4 <z_log_notify_backend_enabled+0x14>)
600050e4:	7823      	ldrb	r3, [r4, #0]
600050e6:	b913      	cbnz	r3, 600050ee <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
600050e8:	4803      	ldr	r0, [pc, #12]	; (600050f8 <z_log_notify_backend_enabled+0x18>)
600050ea:	f003 fc27 	bl	6000893c <z_impl_k_sem_give>
	backend_attached = true;
600050ee:	2301      	movs	r3, #1
600050f0:	7023      	strb	r3, [r4, #0]
}
600050f2:	bd10      	pop	{r4, pc}
600050f4:	80001c61 	.word	0x80001c61
600050f8:	8000099c 	.word	0x8000099c

600050fc <z_log_dropped>:
{
600050fc:	b510      	push	{r4, lr}
600050fe:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
60005100:	4808      	ldr	r0, [pc, #32]	; (60005124 <z_log_dropped+0x28>)
60005102:	f004 fd39 	bl	60009b78 <atomic_inc>
	if (buffered) {
60005106:	b15c      	cbz	r4, 60005120 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
60005108:	4b07      	ldr	r3, [pc, #28]	; (60005128 <z_log_dropped+0x2c>)
6000510a:	f3bf 8f5b 	dmb	ish
6000510e:	e853 1f00 	ldrex	r1, [r3]
60005112:	3901      	subs	r1, #1
60005114:	e843 1200 	strex	r2, r1, [r3]
60005118:	2a00      	cmp	r2, #0
6000511a:	d1f8      	bne.n	6000510e <z_log_dropped+0x12>
6000511c:	f3bf 8f5b 	dmb	ish
}
60005120:	bd10      	pop	{r4, pc}
60005122:	bf00      	nop
60005124:	800010a0 	.word	0x800010a0
60005128:	800010a4 	.word	0x800010a4

6000512c <z_log_dropped_read_and_clear>:
}
6000512c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
6000512e:	4b06      	ldr	r3, [pc, #24]	; (60005148 <z_log_dropped_read_and_clear+0x1c>)
60005130:	f3bf 8f5b 	dmb	ish
60005134:	4601      	mov	r1, r0
60005136:	e853 0f00 	ldrex	r0, [r3]
6000513a:	e843 1200 	strex	r2, r1, [r3]
6000513e:	2a00      	cmp	r2, #0
60005140:	d1f9      	bne.n	60005136 <z_log_dropped_read_and_clear+0xa>
60005142:	f3bf 8f5b 	dmb	ish
60005146:	4770      	bx	lr
60005148:	800010a0 	.word	0x800010a0

6000514c <dropped_notify>:
{
6000514c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
6000514e:	f7ff ffed 	bl	6000512c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005152:	4c08      	ldr	r4, [pc, #32]	; (60005174 <dropped_notify+0x28>)
	uint32_t dropped = z_log_dropped_read_and_clear();
60005154:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005156:	4e08      	ldr	r6, [pc, #32]	; (60005178 <dropped_notify+0x2c>)
60005158:	42b4      	cmp	r4, r6
6000515a:	d300      	bcc.n	6000515e <dropped_notify+0x12>
}
6000515c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
6000515e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
60005160:	795b      	ldrb	r3, [r3, #5]
60005162:	b12b      	cbz	r3, 60005170 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
60005164:	6823      	ldr	r3, [r4, #0]
60005166:	685b      	ldr	r3, [r3, #4]
60005168:	b113      	cbz	r3, 60005170 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
6000516a:	4629      	mov	r1, r5
6000516c:	4620      	mov	r0, r4
6000516e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005170:	3410      	adds	r4, #16
60005172:	e7f1      	b.n	60005158 <dropped_notify+0xc>
60005174:	6000b8a8 	.word	0x6000b8a8
60005178:	6000b8b8 	.word	0x6000b8b8

6000517c <z_log_msg_init>:
{
6000517c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
6000517e:	4c04      	ldr	r4, [pc, #16]	; (60005190 <z_log_msg_init+0x14>)
60005180:	4904      	ldr	r1, [pc, #16]	; (60005194 <z_log_msg_init+0x18>)
60005182:	4620      	mov	r0, r4
60005184:	f004 fb88 	bl	60009898 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
60005188:	4b03      	ldr	r3, [pc, #12]	; (60005198 <z_log_msg_init+0x1c>)
6000518a:	601c      	str	r4, [r3, #0]
}
6000518c:	bd10      	pop	{r4, pc}
6000518e:	bf00      	nop
60005190:	80000960 	.word	0x80000960
60005194:	6000b8c0 	.word	0x6000b8c0
60005198:	80001098 	.word	0x80001098

6000519c <log_core_init>:
{
6000519c:	b508      	push	{r3, lr}
	panic_mode = false;
6000519e:	4a08      	ldr	r2, [pc, #32]	; (600051c0 <log_core_init+0x24>)
600051a0:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
600051a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
600051a6:	4807      	ldr	r0, [pc, #28]	; (600051c4 <log_core_init+0x28>)
	panic_mode = false;
600051a8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
600051aa:	4a07      	ldr	r2, [pc, #28]	; (600051c8 <log_core_init+0x2c>)
600051ac:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
600051ae:	4a07      	ldr	r2, [pc, #28]	; (600051cc <log_core_init+0x30>)
600051b0:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
600051b2:	f7ff ff85 	bl	600050c0 <log_set_timestamp_func>
}
600051b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
600051ba:	f7ff bfdf 	b.w	6000517c <z_log_msg_init>
600051be:	bf00      	nop
600051c0:	80001c62 	.word	0x80001c62
600051c4:	60009b93 	.word	0x60009b93
600051c8:	800010a0 	.word	0x800010a0
600051cc:	800010a4 	.word	0x800010a4

600051d0 <z_log_msg_alloc>:
{
600051d0:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
600051d2:	2200      	movs	r2, #0
600051d4:	2300      	movs	r3, #0
600051d6:	4801      	ldr	r0, [pc, #4]	; (600051dc <z_log_msg_alloc+0xc>)
600051d8:	f004 bb7f 	b.w	600098da <mpsc_pbuf_alloc>
600051dc:	80000960 	.word	0x80000960

600051e0 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
600051e0:	4801      	ldr	r0, [pc, #4]	; (600051e8 <z_log_msg_local_claim+0x8>)
600051e2:	f004 bc18 	b.w	60009a16 <mpsc_pbuf_claim>
600051e6:	bf00      	nop
600051e8:	80000960 	.word	0x80000960

600051ec <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
600051ec:	4b02      	ldr	r3, [pc, #8]	; (600051f8 <z_log_msg_free+0xc>)
{
600051ee:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
600051f0:	6818      	ldr	r0, [r3, #0]
600051f2:	f004 bc62 	b.w	60009aba <mpsc_pbuf_free>
600051f6:	bf00      	nop
600051f8:	80001098 	.word	0x80001098

600051fc <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
600051fc:	4801      	ldr	r0, [pc, #4]	; (60005204 <z_log_msg_pending+0x8>)
600051fe:	f004 bc98 	b.w	60009b32 <mpsc_pbuf_is_pending>
60005202:	bf00      	nop
60005204:	80000960 	.word	0x80000960

60005208 <z_impl_log_process>:
	if (!backend_attached) {
60005208:	4b25      	ldr	r3, [pc, #148]	; (600052a0 <z_impl_log_process+0x98>)
{
6000520a:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
6000520c:	7818      	ldrb	r0, [r3, #0]
6000520e:	2800      	cmp	r0, #0
60005210:	d044      	beq.n	6000529c <z_impl_log_process+0x94>
	return z_log_msg_local_claim();
60005212:	f7ff ffe5 	bl	600051e0 <z_log_msg_local_claim>
	if (msg) {
60005216:	4605      	mov	r5, r0
60005218:	b190      	cbz	r0, 60005240 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
6000521a:	4b22      	ldr	r3, [pc, #136]	; (600052a4 <z_impl_log_process+0x9c>)
6000521c:	f3bf 8f5b 	dmb	ish
60005220:	e853 1f00 	ldrex	r1, [r3]
60005224:	3901      	subs	r1, #1
60005226:	e843 1200 	strex	r2, r1, [r3]
6000522a:	2a00      	cmp	r2, #0
6000522c:	d1f8      	bne.n	60005220 <z_impl_log_process+0x18>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000522e:	4c1e      	ldr	r4, [pc, #120]	; (600052a8 <z_impl_log_process+0xa0>)
60005230:	f3bf 8f5b 	dmb	ish
60005234:	4e1d      	ldr	r6, [pc, #116]	; (600052ac <z_impl_log_process+0xa4>)
60005236:	42b4      	cmp	r4, r6
60005238:	d326      	bcc.n	60005288 <z_impl_log_process+0x80>
		z_log_msg_free(msg);
6000523a:	4628      	mov	r0, r5
6000523c:	f7ff ffd6 	bl	600051ec <z_log_msg_free>
	return dropped_cnt > 0;
60005240:	4b1b      	ldr	r3, [pc, #108]	; (600052b0 <z_impl_log_process+0xa8>)
60005242:	4c1c      	ldr	r4, [pc, #112]	; (600052b4 <z_impl_log_process+0xac>)
		if ((dropped_pend || unordered_pend) &&
60005244:	681b      	ldr	r3, [r3, #0]
60005246:	2b00      	cmp	r3, #0
60005248:	dd12      	ble.n	60005270 <z_impl_log_process+0x68>
	return z_impl_k_uptime_ticks();
6000524a:	f005 ffd5 	bl	6000b1f8 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
6000524e:	220a      	movs	r2, #10
60005250:	2300      	movs	r3, #0
60005252:	f7fe fc11 	bl	60003a78 <__aeabi_uldivmod>
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
60005256:	e9d4 3200 	ldrd	r3, r2, [r4]
6000525a:	1ac0      	subs	r0, r0, r3
		if ((dropped_pend || unordered_pend) &&
6000525c:	f240 33e9 	movw	r3, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
60005260:	eb61 0102 	sbc.w	r1, r1, r2
		if ((dropped_pend || unordered_pend) &&
60005264:	4298      	cmp	r0, r3
60005266:	f171 0100 	sbcs.w	r1, r1, #0
6000526a:	d301      	bcc.n	60005270 <z_impl_log_process+0x68>
				dropped_notify();
6000526c:	f7ff ff6e 	bl	6000514c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
60005270:	e9d4 3200 	ldrd	r3, r2, [r4]
60005274:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
60005278:	f142 0200 	adc.w	r2, r2, #0
6000527c:	e9c4 3200 	strd	r3, r2, [r4]
}
60005280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
60005284:	f7ff bfba 	b.w	600051fc <z_log_msg_pending>
	return backend->cb->active;
60005288:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
6000528a:	795b      	ldrb	r3, [r3, #5]
6000528c:	b123      	cbz	r3, 60005298 <z_impl_log_process+0x90>
	backend->api->process(backend, msg);
6000528e:	6823      	ldr	r3, [r4, #0]
60005290:	4629      	mov	r1, r5
60005292:	4620      	mov	r0, r4
60005294:	681b      	ldr	r3, [r3, #0]
60005296:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005298:	3410      	adds	r4, #16
6000529a:	e7cc      	b.n	60005236 <z_impl_log_process+0x2e>
}
6000529c:	bd70      	pop	{r4, r5, r6, pc}
6000529e:	bf00      	nop
600052a0:	80001c61 	.word	0x80001c61
600052a4:	800010a4 	.word	0x800010a4
600052a8:	6000b8a8 	.word	0x6000b8a8
600052ac:	6000b8b8 	.word	0x6000b8b8
600052b0:	800010a0 	.word	0x800010a0
600052b4:	80000e78 	.word	0x80000e78

600052b8 <z_impl_log_panic>:
{
600052b8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
600052ba:	4d0d      	ldr	r5, [pc, #52]	; (600052f0 <z_impl_log_panic+0x38>)
600052bc:	7829      	ldrb	r1, [r5, #0]
600052be:	b961      	cbnz	r1, 600052da <z_impl_log_panic+0x22>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
600052c0:	4c0c      	ldr	r4, [pc, #48]	; (600052f4 <z_impl_log_panic+0x3c>)
	(void)z_log_init(true, false);
600052c2:	2001      	movs	r0, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
600052c4:	4e0c      	ldr	r6, [pc, #48]	; (600052f8 <z_impl_log_panic+0x40>)
	(void)z_log_init(true, false);
600052c6:	f7ff feaf 	bl	60005028 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
600052ca:	42b4      	cmp	r4, r6
600052cc:	d306      	bcc.n	600052dc <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
600052ce:	f7ff ff9b 	bl	60005208 <z_impl_log_process>
		while (log_process() == true) {
600052d2:	2800      	cmp	r0, #0
600052d4:	d1fb      	bne.n	600052ce <z_impl_log_panic+0x16>
	panic_mode = true;
600052d6:	2301      	movs	r3, #1
600052d8:	702b      	strb	r3, [r5, #0]
}
600052da:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
600052dc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
600052de:	795b      	ldrb	r3, [r3, #5]
600052e0:	b11b      	cbz	r3, 600052ea <z_impl_log_panic+0x32>
	backend->api->panic(backend);
600052e2:	6823      	ldr	r3, [r4, #0]
600052e4:	4620      	mov	r0, r4
600052e6:	689b      	ldr	r3, [r3, #8]
600052e8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
600052ea:	3410      	adds	r4, #16
600052ec:	e7ed      	b.n	600052ca <z_impl_log_panic+0x12>
600052ee:	bf00      	nop
600052f0:	80001c62 	.word	0x80001c62
600052f4:	6000b8a8 	.word	0x6000b8a8
600052f8:	6000b8b8 	.word	0x6000b8b8

600052fc <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
600052fc:	2100      	movs	r1, #0
{
600052fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
60005302:	4608      	mov	r0, r1
60005304:	f7ff fe90 	bl	60005028 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
60005308:	4604      	mov	r4, r0
6000530a:	b348      	cbz	r0, 60005360 <log_process_thread_func+0x64>
6000530c:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
60005310:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
60005314:	f003 fdf4 	bl	60008f00 <z_impl_z_current_get>
	proc_tid = process_tid;
60005318:	4b1a      	ldr	r3, [pc, #104]	; (60005384 <log_process_thread_func+0x88>)
6000531a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
6000531c:	b130      	cbz	r0, 6000532c <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
6000531e:	4b1a      	ldr	r3, [pc, #104]	; (60005388 <log_process_thread_func+0x8c>)
	    process_tid &&
60005320:	681b      	ldr	r3, [r3, #0]
60005322:	2b09      	cmp	r3, #9
60005324:	dd02      	ble.n	6000532c <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
60005326:	4819      	ldr	r0, [pc, #100]	; (6000538c <log_process_thread_func+0x90>)
60005328:	f003 fb08 	bl	6000893c <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
6000532c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
6000532e:	4f18      	ldr	r7, [pc, #96]	; (60005390 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
60005330:	f8df a058 	ldr.w	sl, [pc, #88]	; 6000538c <log_process_thread_func+0x90>
		if (activate_mask) {
60005334:	b144      	cbz	r4, 60005348 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
60005336:	4620      	mov	r0, r4
60005338:	f7ff fe10 	bl	60004f5c <activate_foreach_backend>
			if (!activate_mask) {
6000533c:	4604      	mov	r4, r0
6000533e:	b918      	cbnz	r0, 60005348 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
60005340:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
60005344:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
60005348:	f7ff ff5e 	bl	60005208 <z_impl_log_process>
		if (log_process() == false) {
6000534c:	4606      	mov	r6, r0
6000534e:	b928      	cbnz	r0, 6000535c <log_process_thread_func+0x60>
			if (processed_any) {
60005350:	b9b5      	cbnz	r5, 60005380 <log_process_thread_func+0x84>
60005352:	4642      	mov	r2, r8
60005354:	464b      	mov	r3, r9
60005356:	4650      	mov	r0, sl
60005358:	f003 fb12 	bl	60008980 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
6000535c:	4635      	mov	r5, r6
6000535e:	e7e9      	b.n	60005334 <log_process_thread_func+0x38>
60005360:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
60005364:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
60005368:	e7d4      	b.n	60005314 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
6000536a:	682b      	ldr	r3, [r5, #0]
6000536c:	699b      	ldr	r3, [r3, #24]
6000536e:	b11b      	cbz	r3, 60005378 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
60005370:	2200      	movs	r2, #0
60005372:	4628      	mov	r0, r5
60005374:	4611      	mov	r1, r2
60005376:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
60005378:	3510      	adds	r5, #16
6000537a:	42bd      	cmp	r5, r7
6000537c:	d3f5      	bcc.n	6000536a <log_process_thread_func+0x6e>
6000537e:	e7e8      	b.n	60005352 <log_process_thread_func+0x56>
60005380:	4d04      	ldr	r5, [pc, #16]	; (60005394 <log_process_thread_func+0x98>)
60005382:	e7fa      	b.n	6000537a <log_process_thread_func+0x7e>
60005384:	8000109c 	.word	0x8000109c
60005388:	800010a4 	.word	0x800010a4
6000538c:	8000099c 	.word	0x8000099c
60005390:	6000b8b8 	.word	0x6000b8b8
60005394:	6000b8a8 	.word	0x6000b8a8

60005398 <z_log_msg_post_finalize>:
{
60005398:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
6000539a:	4818      	ldr	r0, [pc, #96]	; (600053fc <z_log_msg_post_finalize+0x64>)
6000539c:	f004 fbec 	bl	60009b78 <atomic_inc>
	if (panic_mode) {
600053a0:	4b17      	ldr	r3, [pc, #92]	; (60005400 <z_log_msg_post_finalize+0x68>)
600053a2:	781b      	ldrb	r3, [r3, #0]
600053a4:	b17b      	cbz	r3, 600053c6 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
600053a6:	f04f 0310 	mov.w	r3, #16
600053aa:	f3ef 8411 	mrs	r4, BASEPRI
600053ae:	f383 8812 	msr	BASEPRI_MAX, r3
600053b2:	f3bf 8f6f 	isb	sy
600053b6:	f7ff ff27 	bl	60005208 <z_impl_log_process>
	__asm__ volatile(
600053ba:	f384 8811 	msr	BASEPRI, r4
600053be:	f3bf 8f6f 	isb	sy
}
600053c2:	b002      	add	sp, #8
600053c4:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
600053c6:	4b0f      	ldr	r3, [pc, #60]	; (60005404 <z_log_msg_post_finalize+0x6c>)
600053c8:	681b      	ldr	r3, [r3, #0]
600053ca:	2b00      	cmp	r3, #0
600053cc:	d0f9      	beq.n	600053c2 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
600053ce:	b950      	cbnz	r0, 600053e6 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
600053d0:	2200      	movs	r2, #0
600053d2:	2300      	movs	r3, #0
600053d4:	480c      	ldr	r0, [pc, #48]	; (60005408 <z_log_msg_post_finalize+0x70>)
600053d6:	e9cd 2300 	strd	r2, r3, [sp]
600053da:	f242 7210 	movw	r2, #10000	; 0x2710
600053de:	2300      	movs	r3, #0
600053e0:	f004 f806 	bl	600093f0 <z_impl_k_timer_start>
600053e4:	e7ed      	b.n	600053c2 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
600053e6:	280a      	cmp	r0, #10
600053e8:	d1eb      	bne.n	600053c2 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
600053ea:	4807      	ldr	r0, [pc, #28]	; (60005408 <z_log_msg_post_finalize+0x70>)
600053ec:	f005 ff12 	bl	6000b214 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
600053f0:	4806      	ldr	r0, [pc, #24]	; (6000540c <z_log_msg_post_finalize+0x74>)
}
600053f2:	b002      	add	sp, #8
600053f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
600053f8:	f003 baa0 	b.w	6000893c <z_impl_k_sem_give>
600053fc:	800010a4 	.word	0x800010a4
60005400:	80001c62 	.word	0x80001c62
60005404:	8000109c 	.word	0x8000109c
60005408:	80000e80 	.word	0x80000e80
6000540c:	8000099c 	.word	0x8000099c

60005410 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
60005410:	4b06      	ldr	r3, [pc, #24]	; (6000542c <z_log_msg_commit+0x1c>)
{
60005412:	b510      	push	{r4, lr}
60005414:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
60005416:	681b      	ldr	r3, [r3, #0]
60005418:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
6000541a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
6000541c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
6000541e:	4804      	ldr	r0, [pc, #16]	; (60005430 <z_log_msg_commit+0x20>)
60005420:	f004 fad9 	bl	600099d6 <mpsc_pbuf_commit>
}
60005424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
60005428:	f7ff bfb6 	b.w	60005398 <z_log_msg_post_finalize>
6000542c:	80000814 	.word	0x80000814
60005430:	80000960 	.word	0x80000960

60005434 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
60005434:	4a04      	ldr	r2, [pc, #16]	; (60005448 <log_source_name_get+0x14>)
60005436:	4b05      	ldr	r3, [pc, #20]	; (6000544c <log_source_name_get+0x18>)
60005438:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
6000543a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
6000543e:	bf34      	ite	cc
60005440:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
60005444:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
60005446:	4770      	bx	lr
60005448:	6000b850 	.word	0x6000b850
6000544c:	6000b8a8 	.word	0x6000b8a8

60005450 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
60005450:	4b08      	ldr	r3, [pc, #32]	; (60005474 <log_backend_enable+0x24>)
60005452:	1ac3      	subs	r3, r0, r3
60005454:	111b      	asrs	r3, r3, #4
{
60005456:	b410      	push	{r4}
	id += backend - log_backend_get(0);
60005458:	3301      	adds	r3, #1
	backend->cb->id = id;
6000545a:	6844      	ldr	r4, [r0, #4]

	log_backend_id_set(backend, id);
6000545c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
6000545e:	6843      	ldr	r3, [r0, #4]
60005460:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
60005462:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
60005464:	6843      	ldr	r3, [r0, #4]
60005466:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
60005468:	6843      	ldr	r3, [r0, #4]
6000546a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
6000546c:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
6000546e:	f7ff be37 	b.w	600050e0 <z_log_notify_backend_enabled>
60005472:	bf00      	nop
60005474:	6000b8a8 	.word	0x6000b8a8

60005478 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
60005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
6000547c:	f3c1 44cb 	ubfx	r4, r1, #19, #12
60005480:	b08f      	sub	sp, #60	; 0x3c
60005482:	f3c1 2649 	ubfx	r6, r1, #9, #10
60005486:	460d      	mov	r5, r1
60005488:	4690      	mov	r8, r2
6000548a:	4699      	mov	r9, r3
6000548c:	3417      	adds	r4, #23
6000548e:	9005      	str	r0, [sp, #20]

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
60005490:	2e00      	cmp	r6, #0
60005492:	d03c      	beq.n	6000550e <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
60005494:	f04f 0b04 	mov.w	fp, #4
60005498:	af09      	add	r7, sp, #36	; 0x24
6000549a:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
6000549e:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
600054a0:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
600054a2:	ab0b      	add	r3, sp, #44	; 0x2c
600054a4:	4640      	mov	r0, r8
600054a6:	f8cd b008 	str.w	fp, [sp, #8]
600054aa:	9701      	str	r7, [sp, #4]
600054ac:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
600054b0:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
600054b2:	9607      	str	r6, [sp, #28]
	struct z_cbprintf_buf_desc buf_desc = {
600054b4:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
600054b8:	f7fe fede 	bl	60004278 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
600054bc:	f3c0 0309 	ubfx	r3, r0, #0, #10
600054c0:	1918      	adds	r0, r3, r4
600054c2:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
600054c4:	f363 2552 	bfi	r5, r3, #9, #10
600054c8:	9306      	str	r3, [sp, #24]
600054ca:	f020 0007 	bic.w	r0, r0, #7
600054ce:	0880      	lsrs	r0, r0, #2
600054d0:	f7ff fe7e 	bl	600051d0 <z_log_msg_alloc>
		if (msg) {
600054d4:	4604      	mov	r4, r0
600054d6:	b178      	cbz	r0, 600054f8 <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
600054d8:	3010      	adds	r0, #16
	struct z_cbprintf_buf_desc buf_desc = {
600054da:	9b06      	ldr	r3, [sp, #24]
600054dc:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
600054de:	9907      	ldr	r1, [sp, #28]
	struct z_cbprintf_buf_desc buf_desc = {
600054e0:	900b      	str	r0, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
600054e2:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
600054e4:	930c      	str	r3, [sp, #48]	; 0x30
	return cbprintf_package_convert(in_packaged, in_len,
600054e6:	ab0b      	add	r3, sp, #44	; 0x2c
	struct z_cbprintf_buf_desc buf_desc = {
600054e8:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
600054ea:	f8cd a000 	str.w	sl, [sp]
600054ee:	4a0b      	ldr	r2, [pc, #44]	; (6000551c <z_impl_z_log_msg_static_create+0xa4>)
600054f0:	e9cd 7b01 	strd	r7, fp, [sp, #4]
600054f4:	f7fe fec0 	bl	60004278 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
600054f8:	f366 2552 	bfi	r5, r6, #9, #10
600054fc:	464b      	mov	r3, r9
600054fe:	9905      	ldr	r1, [sp, #20]
60005500:	4620      	mov	r0, r4
60005502:	462a      	mov	r2, r5
}
60005504:	b00f      	add	sp, #60	; 0x3c
60005506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
6000550a:	f004 bb73 	b.w	60009bf4 <z_log_msg_finalize>
6000550e:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
60005512:	0880      	lsrs	r0, r0, #2
60005514:	f7ff fe5c 	bl	600051d0 <z_log_msg_alloc>
60005518:	4604      	mov	r4, r0
6000551a:	e7ed      	b.n	600054f8 <z_impl_z_log_msg_static_create+0x80>
6000551c:	60009bc9 	.word	0x60009bc9

60005520 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
60005520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60005524:	b087      	sub	sp, #28
60005526:	4604      	mov	r4, r0
60005528:	460f      	mov	r7, r1
6000552a:	4693      	mov	fp, r2
6000552c:	4698      	mov	r8, r3
6000552e:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
60005532:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
60005536:	b3b6      	cbz	r6, 600055a6 <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
60005538:	2110      	movs	r1, #16
6000553a:	4633      	mov	r3, r6
6000553c:	4652      	mov	r2, sl
6000553e:	2000      	movs	r0, #0
60005540:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
60005544:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
60005548:	f7fe fcc0 	bl	60003ecc <cbvprintf_package>
6000554c:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
6000554e:	f004 0407 	and.w	r4, r4, #7
60005552:	f00b 0b07 	and.w	fp, fp, #7
60005556:	4b15      	ldr	r3, [pc, #84]	; (600055ac <z_impl_z_log_msg_runtime_vcreate+0x8c>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
60005558:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
6000555c:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
6000555e:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
60005560:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
60005564:	4408      	add	r0, r1
	struct log_msg_desc desc =
60005566:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
6000556a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
6000556e:	431c      	orrs	r4, r3
60005570:	4b0f      	ldr	r3, [pc, #60]	; (600055b0 <z_impl_z_log_msg_runtime_vcreate+0x90>)
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
60005572:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
60005574:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
60005578:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
6000557a:	f7ff fe29 	bl	600051d0 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
6000557e:	4605      	mov	r5, r0
60005580:	b140      	cbz	r0, 60005594 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
60005582:	b13e      	cbz	r6, 60005594 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
60005584:	4633      	mov	r3, r6
60005586:	4652      	mov	r2, sl
60005588:	9903      	ldr	r1, [sp, #12]
6000558a:	3010      	adds	r0, #16
6000558c:	f8cd 9000 	str.w	r9, [sp]
60005590:	f7fe fc9c 	bl	60003ecc <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
60005594:	4643      	mov	r3, r8
60005596:	4622      	mov	r2, r4
60005598:	4639      	mov	r1, r7
6000559a:	4628      	mov	r0, r5
	}
}
6000559c:	b007      	add	sp, #28
6000559e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
600055a2:	f004 bb27 	b.w	60009bf4 <z_log_msg_finalize>
		plen = 0;
600055a6:	4631      	mov	r1, r6
600055a8:	e7d1      	b.n	6000554e <z_impl_z_log_msg_runtime_vcreate+0x2e>
600055aa:	bf00      	nop
600055ac:	0007fe00 	.word	0x0007fe00
600055b0:	7ff80000 	.word	0x7ff80000

600055b4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
600055b4:	b40e      	push	{r1, r2, r3}
600055b6:	b503      	push	{r0, r1, lr}
600055b8:	ab03      	add	r3, sp, #12
600055ba:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
600055bc:	4805      	ldr	r0, [pc, #20]	; (600055d4 <print_formatted+0x20>)
{
600055be:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
600055c2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
600055c4:	f004 fb3d 	bl	60009c42 <cbvprintf>
	va_end(args);

	return length;
}
600055c8:	b002      	add	sp, #8
600055ca:	f85d eb04 	ldr.w	lr, [sp], #4
600055ce:	b003      	add	sp, #12
600055d0:	4770      	bx	lr
600055d2:	bf00      	nop
600055d4:	60009c6b 	.word	0x60009c6b

600055d8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
600055d8:	06ca      	lsls	r2, r1, #27
600055da:	d405      	bmi.n	600055e8 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
600055dc:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
600055de:	bf4c      	ite	mi
600055e0:	4902      	ldrmi	r1, [pc, #8]	; (600055ec <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
600055e2:	4903      	ldrpl	r1, [pc, #12]	; (600055f0 <newline_print+0x18>)
600055e4:	f7ff bfe6 	b.w	600055b4 <print_formatted>
	}
}
600055e8:	4770      	bx	lr
600055ea:	bf00      	nop
600055ec:	6000c483 	.word	0x6000c483
600055f0:	6000c482 	.word	0x6000c482

600055f4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
600055f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600055f8:	b089      	sub	sp, #36	; 0x24
600055fa:	469b      	mov	fp, r3
600055fc:	4604      	mov	r4, r0
600055fe:	460d      	mov	r5, r1
60005600:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
60005604:	9206      	str	r2, [sp, #24]
60005606:	9304      	str	r3, [sp, #16]
60005608:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
6000560c:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
60005610:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
60005612:	9b04      	ldr	r3, [sp, #16]
60005614:	2b00      	cmp	r3, #0
60005616:	f000 8087 	beq.w	60005728 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
6000561a:	f006 0308 	and.w	r3, r6, #8
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
6000561e:	f006 0a02 	and.w	sl, r6, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
60005622:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
60005624:	f004 face 	bl	60009bc4 <z_log_get_tag>
	if (tag) {
60005628:	4602      	mov	r2, r0
6000562a:	2800      	cmp	r0, #0
6000562c:	d04b      	beq.n	600056c6 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
6000562e:	4986      	ldr	r1, [pc, #536]	; (60005848 <log_output_process+0x254>)
60005630:	4620      	mov	r0, r4
60005632:	f7ff ffbf 	bl	600055b4 <print_formatted>
60005636:	4680      	mov	r8, r0
	if (stamp) {
60005638:	f1ba 0f00 	cmp.w	sl, #0
6000563c:	d008      	beq.n	60005650 <log_output_process+0x5c>
	if (!format) {
6000563e:	f016 0f44 	tst.w	r6, #68	; 0x44
60005642:	d142      	bne.n	600056ca <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
60005644:	462a      	mov	r2, r5
60005646:	4981      	ldr	r1, [pc, #516]	; (6000584c <log_output_process+0x258>)
60005648:	4620      	mov	r0, r4
6000564a:	f7ff ffb3 	bl	600055b4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
6000564e:	4480      	add	r8, r0
	if (color) {
60005650:	f006 0301 	and.w	r3, r6, #1
60005654:	b15b      	cbz	r3, 6000566e <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
60005656:	4b7e      	ldr	r3, [pc, #504]	; (60005850 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
60005658:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
6000565a:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
6000565c:	497d      	ldr	r1, [pc, #500]	; (60005854 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
6000565e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
60005662:	4b7d      	ldr	r3, [pc, #500]	; (60005858 <log_output_process+0x264>)
60005664:	2a00      	cmp	r2, #0
60005666:	bf08      	it	eq
60005668:	461a      	moveq	r2, r3
6000566a:	f7ff ffa3 	bl	600055b4 <print_formatted>
	if (level_on) {
6000566e:	f006 0308 	and.w	r3, r6, #8
60005672:	2b00      	cmp	r3, #0
60005674:	d055      	beq.n	60005722 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
60005676:	4b79      	ldr	r3, [pc, #484]	; (6000585c <log_output_process+0x268>)
60005678:	4620      	mov	r0, r4
6000567a:	9a04      	ldr	r2, [sp, #16]
6000567c:	4978      	ldr	r1, [pc, #480]	; (60005860 <log_output_process+0x26c>)
6000567e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
60005682:	f7ff ff97 	bl	600055b4 <print_formatted>
60005686:	4605      	mov	r5, r0
	if (domain) {
60005688:	9b06      	ldr	r3, [sp, #24]
6000568a:	b12b      	cbz	r3, 60005698 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
6000568c:	461a      	mov	r2, r3
6000568e:	4975      	ldr	r1, [pc, #468]	; (60005864 <log_output_process+0x270>)
60005690:	4620      	mov	r0, r4
60005692:	f7ff ff8f 	bl	600055b4 <print_formatted>
60005696:	4405      	add	r5, r0
	if (source) {
60005698:	f1bb 0f00 	cmp.w	fp, #0
6000569c:	d005      	beq.n	600056aa <log_output_process+0xb6>
		total += print_formatted(output,
6000569e:	465a      	mov	r2, fp
600056a0:	4971      	ldr	r1, [pc, #452]	; (60005868 <log_output_process+0x274>)
600056a2:	4620      	mov	r0, r4
600056a4:	f7ff ff86 	bl	600055b4 <print_formatted>
600056a8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
600056aa:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
600056ac:	f1b9 0f00 	cmp.w	r9, #0
600056b0:	d149      	bne.n	60005746 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
600056b2:	2f00      	cmp	r7, #0
600056b4:	d14f      	bne.n	60005756 <log_output_process+0x162>
	if (color) {
600056b6:	07f3      	lsls	r3, r6, #31
600056b8:	f100 80c0 	bmi.w	6000583c <log_output_process+0x248>
	newline_print(output, flags);
600056bc:	4631      	mov	r1, r6
600056be:	4620      	mov	r0, r4
600056c0:	f7ff ff8a 	bl	600055d8 <newline_print>
}
600056c4:	e0b4      	b.n	60005830 <log_output_process+0x23c>
	uint32_t length = 0U;
600056c6:	4680      	mov	r8, r0
600056c8:	e7b6      	b.n	60005638 <log_output_process+0x44>
	} else if (freq != 0U) {
600056ca:	4b68      	ldr	r3, [pc, #416]	; (6000586c <log_output_process+0x278>)
600056cc:	6818      	ldr	r0, [r3, #0]
600056ce:	2800      	cmp	r0, #0
600056d0:	d0bd      	beq.n	6000564e <log_output_process+0x5a>
		timestamp /= timestamp_div;
600056d2:	4b67      	ldr	r3, [pc, #412]	; (60005870 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
600056d4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
600056d8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
		mins = seconds / 60U;
600056dc:	213c      	movs	r1, #60	; 0x3c
		timestamp /= timestamp_div;
600056de:	681b      	ldr	r3, [r3, #0]
600056e0:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
600056e4:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
600056e8:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
600056ec:	fb0e f505 	mul.w	r5, lr, r5
600056f0:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
600056f4:	fbb5 fcf0 	udiv	ip, r5, r0
600056f8:	fb02 321a 	mls	r2, r2, sl, r3
600056fc:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
60005700:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
60005704:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
60005708:	fb01 2213 	mls	r2, r1, r3, r2
6000570c:	4959      	ldr	r1, [pc, #356]	; (60005874 <log_output_process+0x280>)
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
6000570e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
60005712:	9200      	str	r2, [sp, #0]
60005714:	4620      	mov	r0, r4
60005716:	4652      	mov	r2, sl
60005718:	e9cd c501 	strd	ip, r5, [sp, #4]
6000571c:	f7ff ff4a 	bl	600055b4 <print_formatted>
60005720:	e795      	b.n	6000564e <log_output_process+0x5a>
	int total = 0;
60005722:	f006 0508 	and.w	r5, r6, #8
60005726:	e7af      	b.n	60005688 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
60005728:	f1bb 0f01 	cmp.w	fp, #1
6000572c:	d106      	bne.n	6000573c <log_output_process+0x148>
	if (package) {
6000572e:	f1b9 0f00 	cmp.w	r9, #0
60005732:	d164      	bne.n	600057fe <log_output_process+0x20a>
	if (data_len) {
60005734:	2f00      	cmp	r7, #0
60005736:	d07b      	beq.n	60005830 <log_output_process+0x23c>
		prefix_offset = 0;
60005738:	2500      	movs	r5, #0
6000573a:	e00c      	b.n	60005756 <log_output_process+0x162>
	if (package) {
6000573c:	f1b9 0f00 	cmp.w	r9, #0
60005740:	d0f8      	beq.n	60005734 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
60005742:	484d      	ldr	r0, [pc, #308]	; (60005878 <log_output_process+0x284>)
60005744:	e05c      	b.n	60005800 <log_output_process+0x20c>
		cb = out_func;
60005746:	484d      	ldr	r0, [pc, #308]	; (6000587c <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
60005748:	464b      	mov	r3, r9
6000574a:	4622      	mov	r2, r4
6000574c:	494c      	ldr	r1, [pc, #304]	; (60005880 <log_output_process+0x28c>)
6000574e:	f003 febe 	bl	600094ce <cbpprintf_external>
	if (data_len) {
60005752:	2f00      	cmp	r7, #0
60005754:	d068      	beq.n	60005828 <log_output_process+0x234>
		print_formatted(output, " ");
60005756:	f8df 912c 	ldr.w	r9, [pc, #300]	; 60005884 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
6000575a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 60005888 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
6000575e:	2f10      	cmp	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
60005760:	f04f 0b00 	mov.w	fp, #0
	newline_print(output, flags);
60005764:	4631      	mov	r1, r6
60005766:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
60005768:	46b8      	mov	r8, r7
6000576a:	bf28      	it	cs
6000576c:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
60005770:	f7ff ff32 	bl	600055d8 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
60005774:	455d      	cmp	r5, fp
60005776:	dc45      	bgt.n	60005804 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
60005778:	9b05      	ldr	r3, [sp, #20]
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
6000577a:	f04f 0b01 	mov.w	fp, #1
			print_formatted(output, "%02x ", data[i]);
6000577e:	4651      	mov	r1, sl
60005780:	4620      	mov	r0, r4
60005782:	781a      	ldrb	r2, [r3, #0]
60005784:	f7ff ff16 	bl	600055b4 <print_formatted>
		if (i > 0 && !(i % 8)) {
60005788:	f01b 0f07 	tst.w	fp, #7
6000578c:	d103      	bne.n	60005796 <log_output_process+0x1a2>
			print_formatted(output, " ");
6000578e:	4649      	mov	r1, r9
60005790:	4620      	mov	r0, r4
60005792:	f7ff ff0f 	bl	600055b4 <print_formatted>
		if (i < length) {
60005796:	45d8      	cmp	r8, fp
60005798:	d93b      	bls.n	60005812 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
6000579a:	9b05      	ldr	r3, [sp, #20]
6000579c:	4651      	mov	r1, sl
6000579e:	4620      	mov	r0, r4
600057a0:	f813 200b 	ldrb.w	r2, [r3, fp]
600057a4:	f7ff ff06 	bl	600055b4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
600057a8:	f10b 0b01 	add.w	fp, fp, #1
600057ac:	f1bb 0f10 	cmp.w	fp, #16
600057b0:	d1ea      	bne.n	60005788 <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
600057b2:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
600057b6:	4935      	ldr	r1, [pc, #212]	; (6000588c <log_output_process+0x298>)
600057b8:	4620      	mov	r0, r4
600057ba:	f7ff fefb 	bl	600055b4 <print_formatted>
		if (i < length) {
600057be:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
600057c0:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
600057c2:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
600057c4:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
600057c6:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
600057ca:	295f      	cmp	r1, #95	; 0x5f
600057cc:	4930      	ldr	r1, [pc, #192]	; (60005890 <log_output_process+0x29c>)
600057ce:	bf28      	it	cs
600057d0:	222e      	movcs	r2, #46	; 0x2e
600057d2:	f7ff feef 	bl	600055b4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
600057d6:	f10b 0b01 	add.w	fp, fp, #1
600057da:	f1bb 0f10 	cmp.w	fp, #16
600057de:	d01d      	beq.n	6000581c <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
600057e0:	f01b 0f07 	tst.w	fp, #7
600057e4:	d103      	bne.n	600057ee <log_output_process+0x1fa>
			print_formatted(output, " ");
600057e6:	4649      	mov	r1, r9
600057e8:	4620      	mov	r0, r4
600057ea:	f7ff fee3 	bl	600055b4 <print_formatted>
		if (i < length) {
600057ee:	45d8      	cmp	r8, fp
600057f0:	465a      	mov	r2, fp
600057f2:	d8e5      	bhi.n	600057c0 <log_output_process+0x1cc>
			print_formatted(output, " ");
600057f4:	4649      	mov	r1, r9
600057f6:	4620      	mov	r0, r4
600057f8:	f7ff fedc 	bl	600055b4 <print_formatted>
600057fc:	e7eb      	b.n	600057d6 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
600057fe:	481f      	ldr	r0, [pc, #124]	; (6000587c <log_output_process+0x288>)
		prefix_offset = 0;
60005800:	9d04      	ldr	r5, [sp, #16]
60005802:	e7a1      	b.n	60005748 <log_output_process+0x154>
		print_formatted(output, " ");
60005804:	4649      	mov	r1, r9
60005806:	4620      	mov	r0, r4
	for (int i = 0; i < prefix_offset; i++) {
60005808:	f10b 0b01 	add.w	fp, fp, #1
		print_formatted(output, " ");
6000580c:	f7ff fed2 	bl	600055b4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
60005810:	e7b0      	b.n	60005774 <log_output_process+0x180>
			print_formatted(output, "   ");
60005812:	4920      	ldr	r1, [pc, #128]	; (60005894 <log_output_process+0x2a0>)
60005814:	4620      	mov	r0, r4
60005816:	f7ff fecd 	bl	600055b4 <print_formatted>
6000581a:	e7c5      	b.n	600057a8 <log_output_process+0x1b4>
		data += length;
6000581c:	9b05      	ldr	r3, [sp, #20]
	} while (len);
6000581e:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
60005822:	4443      	add	r3, r8
60005824:	9305      	str	r3, [sp, #20]
	} while (len);
60005826:	d19a      	bne.n	6000575e <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
60005828:	9b04      	ldr	r3, [sp, #16]
6000582a:	2b00      	cmp	r3, #0
6000582c:	f47f af43 	bne.w	600056b6 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
60005830:	4620      	mov	r0, r4
}
60005832:	b009      	add	sp, #36	; 0x24
60005834:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
60005838:	f004 ba0a 	b.w	60009c50 <log_output_flush>
		print_formatted(output, "%s", log_color);
6000583c:	4a06      	ldr	r2, [pc, #24]	; (60005858 <log_output_process+0x264>)
6000583e:	4620      	mov	r0, r4
60005840:	4904      	ldr	r1, [pc, #16]	; (60005854 <log_output_process+0x260>)
60005842:	f7ff feb7 	bl	600055b4 <print_formatted>
}
60005846:	e739      	b.n	600056bc <log_output_process+0xc8>
60005848:	6000c48a 	.word	0x6000c48a
6000584c:	6000c48e 	.word	0x6000c48e
60005850:	6000b8e4 	.word	0x6000b8e4
60005854:	6000c4b3 	.word	0x6000c4b3
60005858:	6000c485 	.word	0x6000c485
6000585c:	6000b8f8 	.word	0x6000b8f8
60005860:	6000c4b6 	.word	0x6000c4b6
60005864:	6000c4bc 	.word	0x6000c4bc
60005868:	6000c4c0 	.word	0x6000c4c0
6000586c:	800010b0 	.word	0x800010b0
60005870:	800010ac 	.word	0x800010ac
60005874:	6000c497 	.word	0x6000c497
60005878:	60009ca1 	.word	0x60009ca1
6000587c:	60009c6b 	.word	0x60009c6b
60005880:	60009c43 	.word	0x60009c43
60005884:	6000c4cd 	.word	0x6000c4cd
60005888:	6000c4c5 	.word	0x6000c4c5
6000588c:	6000c4cf 	.word	0x6000c4cf
60005890:	6000c4d1 	.word	0x6000c4d1
60005894:	6000c4cb 	.word	0x6000c4cb

60005898 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
60005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
6000589c:	880f      	ldrh	r7, [r1, #0]
6000589e:	b086      	sub	sp, #24
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
600058a0:	684b      	ldr	r3, [r1, #4]
600058a2:	4605      	mov	r5, r0
600058a4:	460c      	mov	r4, r1
600058a6:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
600058a8:	688e      	ldr	r6, [r1, #8]
	return msg->hdr.desc.level;
600058aa:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
600058ae:	b15b      	cbz	r3, 600058c8 <log_output_msg_process+0x30>
600058b0:	4a14      	ldr	r2, [pc, #80]	; (60005904 <log_output_msg_process+0x6c>)
600058b2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
600058b4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
600058b8:	2900      	cmp	r1, #0
600058ba:	db20      	blt.n	600058fe <log_output_msg_process+0x66>
	return msg->hdr.desc.domain;
600058bc:	7820      	ldrb	r0, [r4, #0]
600058be:	f3c0 00c2 	ubfx	r0, r0, #3, #3
600058c2:	f7ff fdb7 	bl	60005434 <log_source_name_get>
600058c6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
600058c8:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
600058ca:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
600058cc:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
600058d0:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
600058d4:	9700      	str	r7, [sp, #0]
	*len = msg->hdr.desc.package_len;
600058d6:	f3c2 2249 	ubfx	r2, r2, #9, #10
600058da:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
600058dc:	eb01 0402 	add.w	r4, r1, r2
600058e0:	f04f 0200 	mov.w	r2, #0
600058e4:	bf08      	it	eq
600058e6:	2100      	moveq	r1, #0
600058e8:	e9cd 0803 	strd	r0, r8, [sp, #12]
600058ec:	e9cd 1401 	strd	r1, r4, [sp, #4]
600058f0:	4628      	mov	r0, r5
600058f2:	4631      	mov	r1, r6
600058f4:	f7ff fe7e 	bl	600055f4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
600058f8:	b006      	add	sp, #24
600058fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
600058fe:	2300      	movs	r3, #0
60005900:	e7e2      	b.n	600058c8 <log_output_msg_process+0x30>
60005902:	bf00      	nop
60005904:	6000b850 	.word	0x6000b850

60005908 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
60005908:	f242 730f 	movw	r3, #9999	; 0x270f
6000590c:	4a11      	ldr	r2, [pc, #68]	; (60005954 <log_output_dropped_process+0x4c>)
6000590e:	428b      	cmp	r3, r1
{
60005910:	b573      	push	{r0, r1, r4, r5, r6, lr}
60005912:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
60005914:	bf28      	it	cs
60005916:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
60005918:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
6000591a:	2105      	movs	r1, #5
6000591c:	4668      	mov	r0, sp
6000591e:	f003 fe4d 	bl	600095bc <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
60005922:	6863      	ldr	r3, [r4, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
60005924:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
60005926:	220b      	movs	r2, #11
60005928:	4628      	mov	r0, r5
6000592a:	685b      	ldr	r3, [r3, #4]
6000592c:	490a      	ldr	r1, [pc, #40]	; (60005958 <log_output_dropped_process+0x50>)
6000592e:	f004 f97b 	bl	60009c28 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
60005932:	6863      	ldr	r3, [r4, #4]
60005934:	4632      	mov	r2, r6
60005936:	4669      	mov	r1, sp
60005938:	4628      	mov	r0, r5
6000593a:	685b      	ldr	r3, [r3, #4]
6000593c:	f004 f974 	bl	60009c28 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
60005940:	6863      	ldr	r3, [r4, #4]
60005942:	221b      	movs	r2, #27
60005944:	4905      	ldr	r1, [pc, #20]	; (6000595c <log_output_dropped_process+0x54>)
60005946:	685b      	ldr	r3, [r3, #4]
60005948:	4628      	mov	r0, r5
6000594a:	f004 f96d 	bl	60009c28 <buffer_write>
		     output->control_block->ctx);
}
6000594e:	b002      	add	sp, #8
60005950:	bd70      	pop	{r4, r5, r6, pc}
60005952:	bf00      	nop
60005954:	6000ca17 	.word	0x6000ca17
60005958:	6000c4f0 	.word	0x6000c4f0
6000595c:	6000c4d4 	.word	0x6000c4d4

60005960 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
60005960:	2100      	movs	r1, #0
60005962:	2301      	movs	r3, #1
60005964:	4a06      	ldr	r2, [pc, #24]	; (60005980 <log_output_timestamp_freq_set+0x20>)
60005966:	4290      	cmp	r0, r2
60005968:	d806      	bhi.n	60005978 <log_output_timestamp_freq_set+0x18>
6000596a:	4a06      	ldr	r2, [pc, #24]	; (60005984 <log_output_timestamp_freq_set+0x24>)
6000596c:	b901      	cbnz	r1, 60005970 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
6000596e:	2301      	movs	r3, #1
60005970:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
60005972:	4b05      	ldr	r3, [pc, #20]	; (60005988 <log_output_timestamp_freq_set+0x28>)
60005974:	6018      	str	r0, [r3, #0]
}
60005976:	4770      	bx	lr
		frequency /= 2U;
60005978:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
6000597a:	2101      	movs	r1, #1
6000597c:	005b      	lsls	r3, r3, #1
6000597e:	e7f2      	b.n	60005966 <log_output_timestamp_freq_set+0x6>
60005980:	000f4240 	.word	0x000f4240
60005984:	800010ac 	.word	0x800010ac
60005988:	800010b0 	.word	0x800010b0

6000598c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
6000598c:	4b01      	ldr	r3, [pc, #4]	; (60005994 <format_set+0x8>)
	return 0;
}
6000598e:	2000      	movs	r0, #0
	log_format_current = log_type;
60005990:	6019      	str	r1, [r3, #0]
}
60005992:	4770      	bx	lr
60005994:	800010c8 	.word	0x800010c8

60005998 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
60005998:	4b02      	ldr	r3, [pc, #8]	; (600059a4 <panic+0xc>)
6000599a:	2201      	movs	r2, #1
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
6000599c:	4802      	ldr	r0, [pc, #8]	; (600059a8 <panic+0x10>)
6000599e:	701a      	strb	r2, [r3, #0]
600059a0:	f004 b956 	b.w	60009c50 <log_output_flush>
600059a4:	80001c64 	.word	0x80001c64
600059a8:	6000b928 	.word	0x6000b928

600059ac <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
600059ac:	4801      	ldr	r0, [pc, #4]	; (600059b4 <dropped+0x8>)
600059ae:	f7ff bfab 	b.w	60005908 <log_output_dropped_process>
600059b2:	bf00      	nop
600059b4:	6000b928 	.word	0x6000b928

600059b8 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
600059b8:	4b06      	ldr	r3, [pc, #24]	; (600059d4 <process+0x1c>)
{
600059ba:	b510      	push	{r4, lr}
600059bc:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
600059be:	6818      	ldr	r0, [r3, #0]
600059c0:	f7ff fb78 	bl	600050b4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
600059c4:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
600059c6:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
600059c8:	4621      	mov	r1, r4
600059ca:	4803      	ldr	r0, [pc, #12]	; (600059d8 <process+0x20>)
}
600059cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
600059d0:	4718      	bx	r3
600059d2:	bf00      	nop
600059d4:	800010c8 	.word	0x800010c8
600059d8:	6000b928 	.word	0x6000b928

600059dc <char_out>:
{
600059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600059de:	460d      	mov	r5, r1
600059e0:	4604      	mov	r4, r0
600059e2:	1846      	adds	r6, r0, r1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
600059e4:	4f05      	ldr	r7, [pc, #20]	; (600059fc <char_out+0x20>)
		for (size_t i = 0; i < length; i++) {
600059e6:	42b4      	cmp	r4, r6
600059e8:	d101      	bne.n	600059ee <char_out+0x12>
}
600059ea:	4628      	mov	r0, r5
600059ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
600059ee:	f814 1b01 	ldrb.w	r1, [r4], #1
600059f2:	68bb      	ldr	r3, [r7, #8]
600059f4:	4801      	ldr	r0, [pc, #4]	; (600059fc <char_out+0x20>)
600059f6:	685b      	ldr	r3, [r3, #4]
600059f8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
600059fa:	e7f4      	b.n	600059e6 <char_out+0xa>
600059fc:	6000b30c 	.word	0x6000b30c

60005a00 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
60005a00:	4901      	ldr	r1, [pc, #4]	; (60005a08 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
60005a02:	2210      	movs	r2, #16
	str	r2, [r1]
60005a04:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
60005a06:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
60005a08:	e000ed10 	.word	0xe000ed10

60005a0c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
60005a0c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
60005a0e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
60005a10:	f380 8811 	msr	BASEPRI, r0
	isb
60005a14:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
60005a18:	f3bf 8f4f 	dsb	sy
60005a1c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
60005a1e:	b662      	cpsie	i
	isb
60005a20:	f3bf 8f6f 	isb	sy

	bx	lr
60005a24:	4770      	bx	lr
60005a26:	bf00      	nop

60005a28 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
60005a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60005a2c:	4681      	mov	r9, r0
60005a2e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
60005a30:	460c      	mov	r4, r1
60005a32:	2900      	cmp	r1, #0
60005a34:	d04c      	beq.n	60005ad0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
60005a36:	466e      	mov	r6, sp
60005a38:	b08a      	sub	sp, #40	; 0x28
60005a3a:	68a3      	ldr	r3, [r4, #8]
60005a3c:	466d      	mov	r5, sp
60005a3e:	e9d1 1200 	ldrd	r1, r2, [r1]
60005a42:	4827      	ldr	r0, [pc, #156]	; (60005ae0 <z_arm_fatal_error+0xb8>)
60005a44:	f04f 0a05 	mov.w	sl, #5
60005a48:	46a8      	mov	r8, r5
60005a4a:	e9c5 0105 	strd	r0, r1, [r5, #20]
60005a4e:	e9c5 2307 	strd	r2, r3, [r5, #28]
60005a52:	f848 af10 	str.w	sl, [r8, #16]!
60005a56:	2300      	movs	r3, #0
60005a58:	4642      	mov	r2, r8
60005a5a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
60005a5e:	4821      	ldr	r0, [pc, #132]	; (60005ae4 <z_arm_fatal_error+0xbc>)
60005a60:	f7ff fd0a 	bl	60005478 <z_impl_z_log_msg_static_create>
60005a64:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
60005a66:	6963      	ldr	r3, [r4, #20]
60005a68:	46ad      	mov	sp, r5
60005a6a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
60005a6e:	481e      	ldr	r0, [pc, #120]	; (60005ae8 <z_arm_fatal_error+0xc0>)
60005a70:	f8c5 a010 	str.w	sl, [r5, #16]
60005a74:	e9c5 0105 	strd	r0, r1, [r5, #20]
60005a78:	e9c5 2307 	strd	r2, r3, [r5, #28]
60005a7c:	2300      	movs	r3, #0
60005a7e:	4642      	mov	r2, r8
60005a80:	f44f 5121 	mov.w	r1, #10304	; 0x2840
60005a84:	4817      	ldr	r0, [pc, #92]	; (60005ae4 <z_arm_fatal_error+0xbc>)
60005a86:	f7ff fcf7 	bl	60005478 <z_impl_z_log_msg_static_create>
60005a8a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
60005a8c:	69e3      	ldr	r3, [r4, #28]
60005a8e:	b088      	sub	sp, #32
60005a90:	466d      	mov	r5, sp
60005a92:	4a16      	ldr	r2, [pc, #88]	; (60005aec <z_arm_fatal_error+0xc4>)
60005a94:	f04f 0a03 	mov.w	sl, #3
60005a98:	46a8      	mov	r8, r5
60005a9a:	e9c5 2305 	strd	r2, r3, [r5, #20]
60005a9e:	f848 af10 	str.w	sl, [r8, #16]!
60005aa2:	2300      	movs	r3, #0
60005aa4:	4642      	mov	r2, r8
60005aa6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60005aaa:	480e      	ldr	r0, [pc, #56]	; (60005ae4 <z_arm_fatal_error+0xbc>)
60005aac:	f7ff fce4 	bl	60005478 <z_impl_z_log_msg_static_create>
60005ab0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
60005ab2:	69a3      	ldr	r3, [r4, #24]
60005ab4:	46ad      	mov	sp, r5
60005ab6:	4a0e      	ldr	r2, [pc, #56]	; (60005af0 <z_arm_fatal_error+0xc8>)
60005ab8:	f8c5 a010 	str.w	sl, [r5, #16]
60005abc:	e9c5 2305 	strd	r2, r3, [r5, #20]
60005ac0:	2300      	movs	r3, #0
60005ac2:	4642      	mov	r2, r8
60005ac4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60005ac8:	4806      	ldr	r0, [pc, #24]	; (60005ae4 <z_arm_fatal_error+0xbc>)
60005aca:	f7ff fcd5 	bl	60005478 <z_impl_z_log_msg_static_create>
60005ace:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
60005ad0:	4621      	mov	r1, r4
60005ad2:	4648      	mov	r0, r9
60005ad4:	f002 fc90 	bl	600083f8 <z_fatal_error>
}
60005ad8:	46bd      	mov	sp, r7
60005ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60005ade:	bf00      	nop
60005ae0:	6000c536 	.word	0x6000c536
60005ae4:	6000b888 	.word	0x6000b888
60005ae8:	6000c565 	.word	0x6000c565
60005aec:	6000c594 	.word	0x6000c594
60005af0:	6000c5a3 	.word	0x6000c5a3

60005af4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
60005af4:	b200      	sxth	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
60005af6:	2800      	cmp	r0, #0
60005af8:	db07      	blt.n	60005b0a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
60005afa:	2301      	movs	r3, #1
60005afc:	0941      	lsrs	r1, r0, #5
60005afe:	f000 001f 	and.w	r0, r0, #31
60005b02:	4a02      	ldr	r2, [pc, #8]	; (60005b0c <arch_irq_enable+0x18>)
60005b04:	4083      	lsls	r3, r0
60005b06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
60005b0a:	4770      	bx	lr
60005b0c:	e000e100 	.word	0xe000e100

60005b10 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
60005b10:	b200      	sxth	r0, r0
		prio += _IRQ_PRIO_OFFSET;
60005b12:	3101      	adds	r1, #1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
60005b14:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
60005b16:	ea4f 1101 	mov.w	r1, r1, lsl #4
60005b1a:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
60005b1c:	db06      	blt.n	60005b2c <z_arm_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
60005b1e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
60005b22:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
60005b26:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
60005b2a:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
60005b2c:	f000 000f 	and.w	r0, r0, #15
60005b30:	4b01      	ldr	r3, [pc, #4]	; (60005b38 <z_arm_irq_priority_set+0x28>)
60005b32:	5419      	strb	r1, [r3, r0]
}
60005b34:	4770      	bx	lr
60005b36:	bf00      	nop
60005b38:	e000ed14 	.word	0xe000ed14

60005b3c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
60005b3c:	bf30      	wfi
    b z_SysNmiOnReset
60005b3e:	f7ff bffd 	b.w	60005b3c <z_SysNmiOnReset>
60005b42:	bf00      	nop

60005b44 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
60005b44:	4a0f      	ldr	r2, [pc, #60]	; (60005b84 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
60005b46:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
60005b48:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
60005b4c:	4b0e      	ldr	r3, [pc, #56]	; (60005b88 <z_arm_prep_c+0x44>)
60005b4e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
60005b50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
60005b54:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
60005b58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
60005b5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
60005b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
60005b64:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
60005b68:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
60005b6c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
60005b70:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
60005b74:	f002 fcfc 	bl	60008570 <z_bss_zero>
	z_data_copy();
60005b78:	f003 fa2c 	bl	60008fd4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
60005b7c:	f000 fbda 	bl	60006334 <z_arm_interrupt_init>
	z_cstart();
60005b80:	f002 fd4a 	bl	60008618 <z_cstart>
60005b84:	60003800 	.word	0x60003800
60005b88:	e000ed00 	.word	0xe000ed00

60005b8c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
60005b8c:	4a0a      	ldr	r2, [pc, #40]	; (60005bb8 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
60005b8e:	490b      	ldr	r1, [pc, #44]	; (60005bbc <arch_swap+0x30>)
	_current->arch.basepri = key;
60005b90:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
60005b92:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
60005b94:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	_current->arch.swap_return_value = _k_neg_eagain;
60005b98:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
60005b9c:	4908      	ldr	r1, [pc, #32]	; (60005bc0 <arch_swap+0x34>)
60005b9e:	684b      	ldr	r3, [r1, #4]
60005ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
60005ba4:	604b      	str	r3, [r1, #4]
60005ba6:	2300      	movs	r3, #0
60005ba8:	f383 8811 	msr	BASEPRI, r3
60005bac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
60005bb0:	6893      	ldr	r3, [r2, #8]
}
60005bb2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
60005bb6:	4770      	bx	lr
60005bb8:	80001048 	.word	0x80001048
60005bbc:	6000c2f4 	.word	0x6000c2f4
60005bc0:	e000ed00 	.word	0xe000ed00

60005bc4 <z_arm_pendsv>:

SECTION_FUNC(TEXT, z_arm_pendsv)

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
    /* Register the context switch */
    push {r0, lr}
60005bc4:	b501      	push	{r0, lr}
    bl z_thread_mark_switched_out
60005bc6:	f005 fa00 	bl	6000afca <z_thread_mark_switched_out>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
60005bca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
60005bce:	4916      	ldr	r1, [pc, #88]	; (60005c28 <z_arm_pendsv+0x64>)
    ldr r2, [r1, #_kernel_offset_to_current]
60005bd0:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
60005bd2:	f04f 0048 	mov.w	r0, #72	; 0x48
    add r0, r2
60005bd6:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
60005bd8:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
60005bdc:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
60005be0:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
60005be2:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
60005be6:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
60005bea:	4f10      	ldr	r7, [pc, #64]	; (60005c2c <z_arm_pendsv+0x68>)
    ldr v3, =_SCS_ICSR_UNPENDSV
60005bec:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
60005bf0:	6b0a      	ldr	r2, [r1, #48]	; 0x30

    str r2, [r1, #_kernel_offset_to_current]
60005bf2:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
60005bf4:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
60005bf6:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    movs r3, #0
60005bfa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
60005bfc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
60005c00:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
60005c04:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
60005c06:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
60005c08:	f000 fbe0 	bl	600063cc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
60005c0c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
60005c10:	f102 0048 	add.w	r0, r2, #72	; 0x48
    ldmia r0, {v1-v8, ip}
60005c14:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
60005c18:	f38c 8809 	msr	PSP, ip
    pop {r2, lr}
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
    /* Register the context switch */
    push {r0, lr}
60005c1c:	b501      	push	{r0, lr}
    bl z_thread_mark_switched_in
60005c1e:	f002 fe87 	bl	60008930 <z_thread_mark_switched_in>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
60005c22:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
60005c26:	4770      	bx	lr
    ldr r1, =_kernel
60005c28:	80001048 	.word	0x80001048
    ldr v4, =_SCS_ICSR
60005c2c:	e000ed04 	.word	0xe000ed04

60005c30 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
60005c30:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
60005c34:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
60005c36:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
60005c3a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
60005c3e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
60005c40:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
60005c44:	2902      	cmp	r1, #2
    beq _oops
60005c46:	d0ff      	beq.n	60005c48 <_oops>

60005c48 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
60005c48:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
60005c4a:	f004 f838 	bl	60009cbe <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
60005c4e:	bd01      	pop	{r0, pc}

60005c50 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
60005c50:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
60005c54:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
60005c56:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
60005c58:	4908      	ldr	r1, [pc, #32]	; (60005c7c <arch_new_thread+0x2c>)
	iframe->a2 = (uint32_t)p1;
60005c5a:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
60005c5c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
60005c5e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
60005c62:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
60005c64:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
60005c66:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
60005c68:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
60005c6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
60005c6e:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
60005c70:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
60005c72:	6682      	str	r2, [r0, #104]	; 0x68
	thread->arch.basepri = 0;
60005c74:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
60005c78:	4770      	bx	lr
60005c7a:	bf00      	nop
60005c7c:	600095d7 	.word	0x600095d7

60005c80 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
60005c80:	4a0a      	ldr	r2, [pc, #40]	; (60005cac <z_check_thread_stack_fail+0x2c>)
{
60005c82:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
60005c84:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
60005c86:	b178      	cbz	r0, 60005ca8 <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
60005c88:	f113 0f16 	cmn.w	r3, #22
60005c8c:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
60005c90:	d005      	beq.n	60005c9e <z_check_thread_stack_fail+0x1e>
60005c92:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
60005c96:	429a      	cmp	r2, r3
60005c98:	d805      	bhi.n	60005ca6 <z_check_thread_stack_fail+0x26>
60005c9a:	4283      	cmp	r3, r0
60005c9c:	d203      	bcs.n	60005ca6 <z_check_thread_stack_fail+0x26>
		return 0;
60005c9e:	4281      	cmp	r1, r0
60005ca0:	bf28      	it	cs
60005ca2:	2000      	movcs	r0, #0
60005ca4:	4770      	bx	lr
60005ca6:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
60005ca8:	4770      	bx	lr
60005caa:	bf00      	nop
60005cac:	80001048 	.word	0x80001048

60005cb0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
60005cb0:	b508      	push	{r3, lr}
60005cb2:	4604      	mov	r4, r0
	z_arm_prepare_switch_to_main();

	_current = main_thread;
60005cb4:	4b0a      	ldr	r3, [pc, #40]	; (60005ce0 <arch_switch_to_main_thread+0x30>)
{
60005cb6:	460e      	mov	r6, r1
60005cb8:	4615      	mov	r5, r2
	_current = main_thread;
60005cba:	6098      	str	r0, [r3, #8]

	z_arm_tls_ptr = main_thread->tls;
#endif

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_in();
60005cbc:	f002 fe38 	bl	60008930 <z_thread_mark_switched_in>
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
60005cc0:	4620      	mov	r0, r4
60005cc2:	f000 fb83 	bl	600063cc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
60005cc6:	4628      	mov	r0, r5
60005cc8:	f386 8809 	msr	PSP, r6
60005ccc:	2100      	movs	r1, #0
60005cce:	b663      	cpsie	if
60005cd0:	f381 8811 	msr	BASEPRI, r1
60005cd4:	f3bf 8f6f 	isb	sy
60005cd8:	2200      	movs	r2, #0
60005cda:	2300      	movs	r3, #0
60005cdc:	f003 fc7b 	bl	600095d6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
60005ce0:	80001048 	.word	0x80001048

60005ce4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
60005ce4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
60005ce6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
60005cea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
60005cee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
60005cf2:	4904      	ldr	r1, [pc, #16]	; (60005d04 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
60005cf4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
60005cf6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
60005cf8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
60005cfa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
60005cfe:	4902      	ldr	r1, [pc, #8]	; (60005d08 <_isr_wrapper+0x24>)
	bx r1
60005d00:	4708      	bx	r1
60005d02:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
60005d04:	6000b39c 	.word	0x6000b39c
	ldr r1, =z_arm_int_exit
60005d08:	60005d0d 	.word	0x60005d0d

60005d0c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
60005d0c:	4b04      	ldr	r3, [pc, #16]	; (60005d20 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
60005d0e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
60005d10:	6b18      	ldr	r0, [r3, #48]	; 0x30
	cmp r0, r1
60005d12:	4288      	cmp	r0, r1
	beq _EXIT_EXC
60005d14:	d003      	beq.n	60005d1e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
60005d16:	4903      	ldr	r1, [pc, #12]	; (60005d24 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
60005d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
60005d1c:	600a      	str	r2, [r1, #0]

60005d1e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
60005d1e:	4770      	bx	lr
	ldr r3, =_kernel
60005d20:	80001048 	.word	0x80001048
	ldr r1, =_SCS_ICSR
60005d24:	e000ed04 	.word	0xe000ed04

60005d28 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
60005d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60005d2c:	b086      	sub	sp, #24
60005d2e:	4606      	mov	r6, r0
60005d30:	460d      	mov	r5, r1
60005d32:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
60005d34:	4b47      	ldr	r3, [pc, #284]	; (60005e54 <bus_fault.constprop.0+0x12c>)
60005d36:	2402      	movs	r4, #2
60005d38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005d3c:	f107 0210 	add.w	r2, r7, #16
60005d40:	617b      	str	r3, [r7, #20]
60005d42:	4845      	ldr	r0, [pc, #276]	; (60005e58 <bus_fault.constprop.0+0x130>)
60005d44:	613c      	str	r4, [r7, #16]
60005d46:	f003 ffc9 	bl	60009cdc <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
60005d4a:	4b44      	ldr	r3, [pc, #272]	; (60005e5c <bus_fault.constprop.0+0x134>)
60005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005d4e:	04d9      	lsls	r1, r3, #19
60005d50:	d56d      	bpl.n	60005e2e <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
60005d52:	4b43      	ldr	r3, [pc, #268]	; (60005e60 <bus_fault.constprop.0+0x138>)
60005d54:	f107 0210 	add.w	r2, r7, #16
60005d58:	483f      	ldr	r0, [pc, #252]	; (60005e58 <bus_fault.constprop.0+0x130>)
60005d5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005d5e:	e9c7 4304 	strd	r4, r3, [r7, #16]
60005d62:	f003 ffbb 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
60005d66:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
60005d68:	4b3c      	ldr	r3, [pc, #240]	; (60005e5c <bus_fault.constprop.0+0x134>)
60005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005d6c:	051a      	lsls	r2, r3, #20
60005d6e:	d50b      	bpl.n	60005d88 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
60005d70:	4b3c      	ldr	r3, [pc, #240]	; (60005e64 <bus_fault.constprop.0+0x13c>)
60005d72:	f107 0210 	add.w	r2, r7, #16
60005d76:	4838      	ldr	r0, [pc, #224]	; (60005e58 <bus_fault.constprop.0+0x130>)
60005d78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005d7c:	617b      	str	r3, [r7, #20]
60005d7e:	2302      	movs	r3, #2
60005d80:	613b      	str	r3, [r7, #16]
60005d82:	f003 ffab 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
60005d86:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
60005d88:	4c34      	ldr	r4, [pc, #208]	; (60005e5c <bus_fault.constprop.0+0x134>)
60005d8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
60005d8c:	059b      	lsls	r3, r3, #22
60005d8e:	d523      	bpl.n	60005dd8 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
60005d90:	46e8      	mov	r8, sp
60005d92:	4b35      	ldr	r3, [pc, #212]	; (60005e68 <bus_fault.constprop.0+0x140>)
60005d94:	f107 0210 	add.w	r2, r7, #16
60005d98:	482f      	ldr	r0, [pc, #188]	; (60005e58 <bus_fault.constprop.0+0x130>)
60005d9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005d9e:	617b      	str	r3, [r7, #20]
60005da0:	2302      	movs	r3, #2
60005da2:	613b      	str	r3, [r7, #16]
60005da4:	f003 ff9a 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
60005da8:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
60005daa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
60005dac:	0410      	lsls	r0, r2, #16
60005dae:	d512      	bpl.n	60005dd6 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
60005db0:	b088      	sub	sp, #32
60005db2:	466a      	mov	r2, sp
60005db4:	492d      	ldr	r1, [pc, #180]	; (60005e6c <bus_fault.constprop.0+0x144>)
60005db6:	4828      	ldr	r0, [pc, #160]	; (60005e58 <bus_fault.constprop.0+0x130>)
60005db8:	e9c2 1305 	strd	r1, r3, [r2, #20]
60005dbc:	2303      	movs	r3, #3
60005dbe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60005dc2:	f842 3f10 	str.w	r3, [r2, #16]!
60005dc6:	f003 ff89 	bl	60009cdc <z_log_msg_static_create.constprop.0>
60005dca:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
60005dcc:	b11e      	cbz	r6, 60005dd6 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
60005dce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
60005dd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
60005dd4:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
60005dd6:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
60005dd8:	4b20      	ldr	r3, [pc, #128]	; (60005e5c <bus_fault.constprop.0+0x134>)
60005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005ddc:	0559      	lsls	r1, r3, #21
60005dde:	d50b      	bpl.n	60005df8 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
60005de0:	4b23      	ldr	r3, [pc, #140]	; (60005e70 <bus_fault.constprop.0+0x148>)
60005de2:	f107 0210 	add.w	r2, r7, #16
60005de6:	481c      	ldr	r0, [pc, #112]	; (60005e58 <bus_fault.constprop.0+0x130>)
60005de8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005dec:	617b      	str	r3, [r7, #20]
60005dee:	2302      	movs	r3, #2
60005df0:	613b      	str	r3, [r7, #16]
60005df2:	f003 ff73 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
60005df6:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
60005df8:	4b18      	ldr	r3, [pc, #96]	; (60005e5c <bus_fault.constprop.0+0x134>)
60005dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
60005dfc:	05d2      	lsls	r2, r2, #23
60005dfe:	d518      	bpl.n	60005e32 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
60005e00:	4b1c      	ldr	r3, [pc, #112]	; (60005e74 <bus_fault.constprop.0+0x14c>)
60005e02:	f107 0210 	add.w	r2, r7, #16
60005e06:	4814      	ldr	r0, [pc, #80]	; (60005e58 <bus_fault.constprop.0+0x130>)
60005e08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005e0c:	617b      	str	r3, [r7, #20]
60005e0e:	2302      	movs	r3, #2
60005e10:	613b      	str	r3, [r7, #16]
60005e12:	f003 ff63 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
60005e16:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
60005e18:	4a10      	ldr	r2, [pc, #64]	; (60005e5c <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
60005e1a:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
60005e1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
60005e1e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
60005e22:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
60005e24:	2300      	movs	r3, #0
60005e26:	702b      	strb	r3, [r5, #0]
}
60005e28:	46bd      	mov	sp, r7
60005e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
60005e2e:	2016      	movs	r0, #22
60005e30:	e79a      	b.n	60005d68 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
60005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005e34:	049b      	lsls	r3, r3, #18
60005e36:	d5ef      	bpl.n	60005e18 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
60005e38:	4b0f      	ldr	r3, [pc, #60]	; (60005e78 <bus_fault.constprop.0+0x150>)
60005e3a:	f107 0210 	add.w	r2, r7, #16
60005e3e:	4806      	ldr	r0, [pc, #24]	; (60005e58 <bus_fault.constprop.0+0x130>)
60005e40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005e44:	617b      	str	r3, [r7, #20]
60005e46:	2302      	movs	r3, #2
60005e48:	613b      	str	r3, [r7, #16]
60005e4a:	f003 ff47 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
60005e4e:	201c      	movs	r0, #28
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
60005e50:	e7e2      	b.n	60005e18 <bus_fault.constprop.0+0xf0>
60005e52:	bf00      	nop
60005e54:	6000c5d1 	.word	0x6000c5d1
60005e58:	6000b888 	.word	0x6000b888
60005e5c:	e000ed00 	.word	0xe000ed00
60005e60:	6000c5e7 	.word	0x6000c5e7
60005e64:	6000c5f8 	.word	0x6000c5f8
60005e68:	6000c60b 	.word	0x6000c60b
60005e6c:	6000c624 	.word	0x6000c624
60005e70:	6000c639 	.word	0x6000c639
60005e74:	6000c654 	.word	0x6000c654
60005e78:	6000c66c 	.word	0x6000c66c

60005e7c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
60005e7c:	b510      	push	{r4, lr}
60005e7e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
60005e80:	4b36      	ldr	r3, [pc, #216]	; (60005f5c <usage_fault.constprop.0+0xe0>)
60005e82:	2402      	movs	r4, #2
60005e84:	aa04      	add	r2, sp, #16
60005e86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005e8a:	4835      	ldr	r0, [pc, #212]	; (60005f60 <usage_fault.constprop.0+0xe4>)
60005e8c:	9305      	str	r3, [sp, #20]
60005e8e:	9404      	str	r4, [sp, #16]
60005e90:	f003 ff24 	bl	60009cdc <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
60005e94:	4b33      	ldr	r3, [pc, #204]	; (60005f64 <usage_fault.constprop.0+0xe8>)
60005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005e98:	019a      	lsls	r2, r3, #6
60005e9a:	d55d      	bpl.n	60005f58 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
60005e9c:	4b32      	ldr	r3, [pc, #200]	; (60005f68 <usage_fault.constprop.0+0xec>)
60005e9e:	aa04      	add	r2, sp, #16
60005ea0:	482f      	ldr	r0, [pc, #188]	; (60005f60 <usage_fault.constprop.0+0xe4>)
60005ea2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005ea6:	e9cd 4304 	strd	r4, r3, [sp, #16]
60005eaa:	f003 ff17 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
60005eae:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
60005eb0:	4b2c      	ldr	r3, [pc, #176]	; (60005f64 <usage_fault.constprop.0+0xe8>)
60005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005eb4:	01db      	lsls	r3, r3, #7
60005eb6:	d50a      	bpl.n	60005ece <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
60005eb8:	4b2c      	ldr	r3, [pc, #176]	; (60005f6c <usage_fault.constprop.0+0xf0>)
60005eba:	aa04      	add	r2, sp, #16
60005ebc:	4828      	ldr	r0, [pc, #160]	; (60005f60 <usage_fault.constprop.0+0xe4>)
60005ebe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005ec2:	9305      	str	r3, [sp, #20]
60005ec4:	2302      	movs	r3, #2
60005ec6:	9304      	str	r3, [sp, #16]
60005ec8:	f003 ff08 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
60005ecc:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
60005ece:	4b25      	ldr	r3, [pc, #148]	; (60005f64 <usage_fault.constprop.0+0xe8>)
60005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005ed2:	031c      	lsls	r4, r3, #12
60005ed4:	d50a      	bpl.n	60005eec <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
60005ed6:	4b26      	ldr	r3, [pc, #152]	; (60005f70 <usage_fault.constprop.0+0xf4>)
60005ed8:	aa04      	add	r2, sp, #16
60005eda:	4821      	ldr	r0, [pc, #132]	; (60005f60 <usage_fault.constprop.0+0xe4>)
60005edc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005ee0:	9305      	str	r3, [sp, #20]
60005ee2:	2302      	movs	r3, #2
60005ee4:	9304      	str	r3, [sp, #16]
60005ee6:	f003 fef9 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
60005eea:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
60005eec:	4b1d      	ldr	r3, [pc, #116]	; (60005f64 <usage_fault.constprop.0+0xe8>)
60005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005ef0:	0359      	lsls	r1, r3, #13
60005ef2:	d50a      	bpl.n	60005f0a <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
60005ef4:	4b1f      	ldr	r3, [pc, #124]	; (60005f74 <usage_fault.constprop.0+0xf8>)
60005ef6:	aa04      	add	r2, sp, #16
60005ef8:	4819      	ldr	r0, [pc, #100]	; (60005f60 <usage_fault.constprop.0+0xe4>)
60005efa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005efe:	9305      	str	r3, [sp, #20]
60005f00:	2302      	movs	r3, #2
60005f02:	9304      	str	r3, [sp, #16]
60005f04:	f003 feea 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
60005f08:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
60005f0a:	4b16      	ldr	r3, [pc, #88]	; (60005f64 <usage_fault.constprop.0+0xe8>)
60005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005f0e:	039a      	lsls	r2, r3, #14
60005f10:	d50a      	bpl.n	60005f28 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
60005f12:	4b19      	ldr	r3, [pc, #100]	; (60005f78 <usage_fault.constprop.0+0xfc>)
60005f14:	aa04      	add	r2, sp, #16
60005f16:	4812      	ldr	r0, [pc, #72]	; (60005f60 <usage_fault.constprop.0+0xe4>)
60005f18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005f1c:	9305      	str	r3, [sp, #20]
60005f1e:	2302      	movs	r3, #2
60005f20:	9304      	str	r3, [sp, #16]
60005f22:	f003 fedb 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
60005f26:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
60005f28:	4b0e      	ldr	r3, [pc, #56]	; (60005f64 <usage_fault.constprop.0+0xe8>)
60005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005f2c:	03db      	lsls	r3, r3, #15
60005f2e:	d50a      	bpl.n	60005f46 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
60005f30:	4b12      	ldr	r3, [pc, #72]	; (60005f7c <usage_fault.constprop.0+0x100>)
60005f32:	aa04      	add	r2, sp, #16
60005f34:	480a      	ldr	r0, [pc, #40]	; (60005f60 <usage_fault.constprop.0+0xe4>)
60005f36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005f3a:	9305      	str	r3, [sp, #20]
60005f3c:	2302      	movs	r3, #2
60005f3e:	9304      	str	r3, [sp, #16]
60005f40:	f003 fecc 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
60005f44:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
60005f46:	4a07      	ldr	r2, [pc, #28]	; (60005f64 <usage_fault.constprop.0+0xe8>)
60005f48:	6a93      	ldr	r3, [r2, #40]	; 0x28
60005f4a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
60005f4e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
60005f52:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
60005f54:	b006      	add	sp, #24
60005f56:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
60005f58:	201d      	movs	r0, #29
60005f5a:	e7a9      	b.n	60005eb0 <usage_fault.constprop.0+0x34>
60005f5c:	6000c69b 	.word	0x6000c69b
60005f60:	6000b888 	.word	0x6000b888
60005f64:	e000ed00 	.word	0xe000ed00
60005f68:	6000c6b3 	.word	0x6000c6b3
60005f6c:	6000c6c6 	.word	0x6000c6c6
60005f70:	6000c6e0 	.word	0x6000c6e0
60005f74:	6000c6fe 	.word	0x6000c6fe
60005f78:	6000c723 	.word	0x6000c723
60005f7c:	6000c73d 	.word	0x6000c73d

60005f80 <mem_manage_fault>:
{
60005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60005f84:	b086      	sub	sp, #24
60005f86:	4681      	mov	r9, r0
60005f88:	468a      	mov	sl, r1
60005f8a:	4690      	mov	r8, r2
60005f8c:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
60005f8e:	4b51      	ldr	r3, [pc, #324]	; (600060d4 <mem_manage_fault+0x154>)
60005f90:	2402      	movs	r4, #2
60005f92:	f107 0210 	add.w	r2, r7, #16
60005f96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005f9a:	617b      	str	r3, [r7, #20]
60005f9c:	484e      	ldr	r0, [pc, #312]	; (600060d8 <mem_manage_fault+0x158>)
60005f9e:	613c      	str	r4, [r7, #16]
60005fa0:	f003 fe9c 	bl	60009cdc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
60005fa4:	4b4d      	ldr	r3, [pc, #308]	; (600060dc <mem_manage_fault+0x15c>)
60005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005fa8:	06de      	lsls	r6, r3, #27
60005faa:	d545      	bpl.n	60006038 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
60005fac:	4b4c      	ldr	r3, [pc, #304]	; (600060e0 <mem_manage_fault+0x160>)
60005fae:	f107 0210 	add.w	r2, r7, #16
60005fb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005fb6:	4848      	ldr	r0, [pc, #288]	; (600060d8 <mem_manage_fault+0x158>)
60005fb8:	e9c7 4304 	strd	r4, r3, [r7, #16]
		reason = K_ERR_ARM_MEM_STACKING;
60005fbc:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
60005fbe:	f003 fe8d 	bl	60009cdc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
60005fc2:	4b46      	ldr	r3, [pc, #280]	; (600060dc <mem_manage_fault+0x15c>)
60005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60005fc6:	071d      	lsls	r5, r3, #28
60005fc8:	d50b      	bpl.n	60005fe2 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
60005fca:	4b46      	ldr	r3, [pc, #280]	; (600060e4 <mem_manage_fault+0x164>)
		reason = K_ERR_ARM_MEM_UNSTACKING;
60005fcc:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
60005fce:	f107 0210 	add.w	r2, r7, #16
60005fd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005fd6:	617b      	str	r3, [r7, #20]
60005fd8:	2302      	movs	r3, #2
60005fda:	483f      	ldr	r0, [pc, #252]	; (600060d8 <mem_manage_fault+0x158>)
60005fdc:	613b      	str	r3, [r7, #16]
60005fde:	f003 fe7d 	bl	60009cdc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
60005fe2:	4d3e      	ldr	r5, [pc, #248]	; (600060dc <mem_manage_fault+0x15c>)
60005fe4:	6aab      	ldr	r3, [r5, #40]	; 0x28
60005fe6:	0798      	lsls	r0, r3, #30
60005fe8:	d528      	bpl.n	6000603c <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
60005fea:	466c      	mov	r4, sp
60005fec:	4b3e      	ldr	r3, [pc, #248]	; (600060e8 <mem_manage_fault+0x168>)
60005fee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60005ff2:	f107 0210 	add.w	r2, r7, #16
60005ff6:	4838      	ldr	r0, [pc, #224]	; (600060d8 <mem_manage_fault+0x158>)
60005ff8:	617b      	str	r3, [r7, #20]
60005ffa:	2302      	movs	r3, #2
60005ffc:	613b      	str	r3, [r7, #16]
60005ffe:	f003 fe6d 	bl	60009cdc <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
60006002:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
60006004:	6aab      	ldr	r3, [r5, #40]	; 0x28
60006006:	0619      	lsls	r1, r3, #24
60006008:	d560      	bpl.n	600060cc <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
6000600a:	b088      	sub	sp, #32
6000600c:	466a      	mov	r2, sp
6000600e:	4b37      	ldr	r3, [pc, #220]	; (600060ec <mem_manage_fault+0x16c>)
60006010:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60006014:	4830      	ldr	r0, [pc, #192]	; (600060d8 <mem_manage_fault+0x158>)
60006016:	e9c2 3605 	strd	r3, r6, [r2, #20]
6000601a:	2303      	movs	r3, #3
6000601c:	f842 3f10 	str.w	r3, [r2, #16]!
60006020:	f003 fe5c 	bl	60009cdc <z_log_msg_static_create.constprop.0>
60006024:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
60006026:	f1ba 0f00 	cmp.w	sl, #0
6000602a:	d003      	beq.n	60006034 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
6000602c:	6aab      	ldr	r3, [r5, #40]	; 0x28
6000602e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
60006032:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
60006034:	2413      	movs	r4, #19
60006036:	e003      	b.n	60006040 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
60006038:	2410      	movs	r4, #16
6000603a:	e7c2      	b.n	60005fc2 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
6000603c:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
60006040:	4b26      	ldr	r3, [pc, #152]	; (600060dc <mem_manage_fault+0x15c>)
60006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60006044:	07da      	lsls	r2, r3, #31
60006046:	d50b      	bpl.n	60006060 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
60006048:	4b29      	ldr	r3, [pc, #164]	; (600060f0 <mem_manage_fault+0x170>)
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
6000604a:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
6000604c:	f107 0210 	add.w	r2, r7, #16
60006050:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006054:	617b      	str	r3, [r7, #20]
60006056:	2302      	movs	r3, #2
60006058:	481f      	ldr	r0, [pc, #124]	; (600060d8 <mem_manage_fault+0x158>)
6000605a:	613b      	str	r3, [r7, #16]
6000605c:	f003 fe3e 	bl	60009cdc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
60006060:	4b1e      	ldr	r3, [pc, #120]	; (600060dc <mem_manage_fault+0x15c>)
60006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
60006064:	069b      	lsls	r3, r3, #26
60006066:	d50b      	bpl.n	60006080 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
60006068:	4b22      	ldr	r3, [pc, #136]	; (600060f4 <mem_manage_fault+0x174>)
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
6000606a:	2415      	movs	r4, #21
		PR_FAULT_INFO(
6000606c:	f107 0210 	add.w	r2, r7, #16
60006070:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006074:	617b      	str	r3, [r7, #20]
60006076:	2302      	movs	r3, #2
60006078:	4817      	ldr	r0, [pc, #92]	; (600060d8 <mem_manage_fault+0x158>)
6000607a:	613b      	str	r3, [r7, #16]
6000607c:	f003 fe2e 	bl	60009cdc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
60006080:	4b16      	ldr	r3, [pc, #88]	; (600060dc <mem_manage_fault+0x15c>)
60006082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
60006084:	06d5      	lsls	r5, r2, #27
60006086:	d402      	bmi.n	6000608e <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
60006088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
6000608a:	0790      	lsls	r0, r2, #30
6000608c:	d50a      	bpl.n	600060a4 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
6000608e:	685b      	ldr	r3, [r3, #4]
60006090:	0519      	lsls	r1, r3, #20
60006092:	d507      	bpl.n	600060a4 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
60006094:	4649      	mov	r1, r9
60006096:	4630      	mov	r0, r6
60006098:	f7ff fdf2 	bl	60005c80 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
6000609c:	b110      	cbz	r0, 600060a4 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
6000609e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
600060a2:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
600060a4:	4b0d      	ldr	r3, [pc, #52]	; (600060dc <mem_manage_fault+0x15c>)
600060a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
600060a8:	0692      	lsls	r2, r2, #26
600060aa:	d503      	bpl.n	600060b4 <mem_manage_fault+0x134>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
600060ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
600060ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
600060b2:	625a      	str	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
600060b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}
600060b6:	4620      	mov	r0, r4
600060b8:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
600060ba:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
600060be:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
600060c0:	2300      	movs	r3, #0
600060c2:	f888 3000 	strb.w	r3, [r8]
}
600060c6:	46bd      	mov	sp, r7
600060c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
600060cc:	f06f 0615 	mvn.w	r6, #21
600060d0:	e7b0      	b.n	60006034 <mem_manage_fault+0xb4>
600060d2:	bf00      	nop
600060d4:	6000c768 	.word	0x6000c768
600060d8:	6000b888 	.word	0x6000b888
600060dc:	e000ed00 	.word	0xe000ed00
600060e0:	6000c77e 	.word	0x6000c77e
600060e4:	6000c5f8 	.word	0x6000c5f8
600060e8:	6000c7b1 	.word	0x6000c7b1
600060ec:	6000c7c9 	.word	0x6000c7c9
600060f0:	6000c7df 	.word	0x6000c7df
600060f4:	6000c66c 	.word	0x6000c66c

600060f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
600060f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
600060fc:	4b77      	ldr	r3, [pc, #476]	; (600062dc <z_arm_fault+0x1e4>)
{
600060fe:	b08b      	sub	sp, #44	; 0x2c
60006100:	4605      	mov	r5, r0
60006102:	2600      	movs	r6, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
60006104:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
60006108:	af00      	add	r7, sp, #0
6000610a:	f3c8 0408 	ubfx	r4, r8, #0, #9
6000610e:	f386 8811 	msr	BASEPRI, r6
60006112:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
60006116:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
6000611a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
6000611e:	d10e      	bne.n	6000613e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
60006120:	f002 030c 	and.w	r3, r2, #12
60006124:	2b08      	cmp	r3, #8
60006126:	d119      	bne.n	6000615c <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
60006128:	4b6d      	ldr	r3, [pc, #436]	; (600062e0 <z_arm_fault+0x1e8>)
6000612a:	f107 0218 	add.w	r2, r7, #24
6000612e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006132:	486c      	ldr	r0, [pc, #432]	; (600062e4 <z_arm_fault+0x1ec>)
60006134:	61fb      	str	r3, [r7, #28]
60006136:	2302      	movs	r3, #2
60006138:	61bb      	str	r3, [r7, #24]
6000613a:	f003 fdcf 	bl	60009cdc <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
6000613e:	2600      	movs	r6, #0
		return NULL;
60006140:	4635      	mov	r5, r6
	*recoverable = false;
60006142:	2300      	movs	r3, #0
60006144:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
60006146:	1ee3      	subs	r3, r4, #3
60006148:	2b09      	cmp	r3, #9
6000614a:	f200 80a6 	bhi.w	6000629a <z_arm_fault+0x1a2>
6000614e:	e8df f003 	tbb	[pc, r3]
60006152:	990a      	.short	0x990a
60006154:	a4a4959c 	.word	0xa4a4959c
60006158:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
6000615c:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
6000615e:	bf4c      	ite	mi
60006160:	460d      	movmi	r5, r1
			*nested_exc = true;
60006162:	2601      	movpl	r6, #1
60006164:	e7ed      	b.n	60006142 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
60006166:	46e9      	mov	r9, sp
60006168:	4b5f      	ldr	r3, [pc, #380]	; (600062e8 <z_arm_fault+0x1f0>)
6000616a:	f04f 0802 	mov.w	r8, #2
6000616e:	f107 0218 	add.w	r2, r7, #24
60006172:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006176:	61fb      	str	r3, [r7, #28]
60006178:	485a      	ldr	r0, [pc, #360]	; (600062e4 <z_arm_fault+0x1ec>)
6000617a:	f8c7 8018 	str.w	r8, [r7, #24]
6000617e:	f003 fdad 	bl	60009cdc <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
60006182:	4c56      	ldr	r4, [pc, #344]	; (600062dc <z_arm_fault+0x1e4>)
	*recoverable = false;
60006184:	2300      	movs	r3, #0
60006186:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
60006188:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
6000618a:	079a      	lsls	r2, r3, #30
6000618c:	d50b      	bpl.n	600061a6 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
6000618e:	4b57      	ldr	r3, [pc, #348]	; (600062ec <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
60006190:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
60006194:	f107 0218 	add.w	r2, r7, #24
60006198:	f44f 5182 	mov.w	r1, #4160	; 0x1040
6000619c:	4851      	ldr	r0, [pc, #324]	; (600062e4 <z_arm_fault+0x1ec>)
6000619e:	f003 fd9d 	bl	60009cdc <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
600061a2:	2400      	movs	r4, #0
600061a4:	e041      	b.n	6000622a <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
600061a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
600061a8:	2b00      	cmp	r3, #0
600061aa:	da01      	bge.n	600061b0 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
600061ac:	4b50      	ldr	r3, [pc, #320]	; (600062f0 <z_arm_fault+0x1f8>)
600061ae:	e7ef      	b.n	60006190 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
600061b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
600061b2:	005b      	lsls	r3, r3, #1
600061b4:	d5f5      	bpl.n	600061a2 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
600061b6:	4b4f      	ldr	r3, [pc, #316]	; (600062f4 <z_arm_fault+0x1fc>)
600061b8:	f107 0218 	add.w	r2, r7, #24
600061bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600061c0:	4848      	ldr	r0, [pc, #288]	; (600062e4 <z_arm_fault+0x1ec>)
600061c2:	e9c7 8306 	strd	r8, r3, [r7, #24]
600061c6:	f003 fd89 	bl	60009cdc <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
600061ca:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
600061cc:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
600061ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
600061d2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
600061d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
600061d8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
600061dc:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
600061de:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
600061e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600061e6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
600061e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
600061ec:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
600061f0:	f64d 7302 	movw	r3, #57090	; 0xdf02
600061f4:	429a      	cmp	r2, r3
600061f6:	d008      	beq.n	6000620a <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
600061f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
600061fa:	b2db      	uxtb	r3, r3
600061fc:	b38b      	cbz	r3, 60006262 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
600061fe:	1dfa      	adds	r2, r7, #7
60006200:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
60006202:	4628      	mov	r0, r5
60006204:	f7ff febc 	bl	60005f80 <mem_manage_fault>
60006208:	e03a      	b.n	60006280 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
6000620a:	b088      	sub	sp, #32
6000620c:	682b      	ldr	r3, [r5, #0]
6000620e:	466a      	mov	r2, sp
60006210:	4939      	ldr	r1, [pc, #228]	; (600062f8 <z_arm_fault+0x200>)
60006212:	4834      	ldr	r0, [pc, #208]	; (600062e4 <z_arm_fault+0x1ec>)
60006214:	e9c2 1305 	strd	r1, r3, [r2, #20]
60006218:	2303      	movs	r3, #3
6000621a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000621e:	f842 3f10 	str.w	r3, [r2, #16]!
60006222:	f003 fd5b 	bl	60009cdc <z_log_msg_static_create.constprop.0>
60006226:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
60006228:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
6000622a:	79fb      	ldrb	r3, [r7, #7]
6000622c:	b9ab      	cbnz	r3, 6000625a <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
6000622e:	2220      	movs	r2, #32
60006230:	4629      	mov	r1, r5
60006232:	f107 0008 	add.w	r0, r7, #8
60006236:	f003 fd78 	bl	60009d2a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
6000623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
6000623c:	2e00      	cmp	r6, #0
6000623e:	d047      	beq.n	600062d0 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
60006240:	f3c3 0208 	ubfx	r2, r3, #0, #9
60006244:	b922      	cbnz	r2, 60006250 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
60006246:	ea6f 2353 	mvn.w	r3, r3, lsr #9
6000624a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
6000624e:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
60006250:	f107 0108 	add.w	r1, r7, #8
60006254:	4620      	mov	r0, r4
60006256:	f7ff fbe7 	bl	60005a28 <z_arm_fatal_error>
}
6000625a:	372c      	adds	r7, #44	; 0x2c
6000625c:	46bd      	mov	sp, r7
6000625e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
60006262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
60006264:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
60006268:	d004      	beq.n	60006274 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
6000626a:	1df9      	adds	r1, r7, #7
6000626c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
6000626e:	f7ff fd5b 	bl	60005d28 <bus_fault.constprop.0>
60006272:	e005      	b.n	60006280 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
60006274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
60006276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
6000627a:	d392      	bcc.n	600061a2 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
6000627c:	f7ff fdfe 	bl	60005e7c <usage_fault.constprop.0>
60006280:	4604      	mov	r4, r0
60006282:	e7d2      	b.n	6000622a <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
60006284:	1dfa      	adds	r2, r7, #7
60006286:	2100      	movs	r1, #0
60006288:	e7bb      	b.n	60006202 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
6000628a:	1df9      	adds	r1, r7, #7
6000628c:	2000      	movs	r0, #0
6000628e:	e7ee      	b.n	6000626e <z_arm_fault+0x176>
	PR_FAULT_INFO(
60006290:	4b1a      	ldr	r3, [pc, #104]	; (600062fc <z_arm_fault+0x204>)
60006292:	61fb      	str	r3, [r7, #28]
60006294:	2302      	movs	r3, #2
60006296:	61bb      	str	r3, [r7, #24]
60006298:	e77c      	b.n	60006194 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
6000629a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
6000629e:	4a18      	ldr	r2, [pc, #96]	; (60006300 <z_arm_fault+0x208>)
600062a0:	46e8      	mov	r8, sp
600062a2:	b08a      	sub	sp, #40	; 0x28
600062a4:	4b17      	ldr	r3, [pc, #92]	; (60006304 <z_arm_fault+0x20c>)
600062a6:	bf18      	it	ne
600062a8:	4613      	movne	r3, r2
600062aa:	466a      	mov	r2, sp
600062ac:	4916      	ldr	r1, [pc, #88]	; (60006308 <z_arm_fault+0x210>)
600062ae:	3c10      	subs	r4, #16
600062b0:	480c      	ldr	r0, [pc, #48]	; (600062e4 <z_arm_fault+0x1ec>)
600062b2:	61d4      	str	r4, [r2, #28]
600062b4:	e9c2 1305 	strd	r1, r3, [r2, #20]
600062b8:	f44f 7300 	mov.w	r3, #512	; 0x200
600062bc:	f44f 5111 	mov.w	r1, #9280	; 0x2440
600062c0:	8413      	strh	r3, [r2, #32]
600062c2:	4b12      	ldr	r3, [pc, #72]	; (6000630c <z_arm_fault+0x214>)
600062c4:	f842 3f10 	str.w	r3, [r2, #16]!
600062c8:	f003 fd08 	bl	60009cdc <z_log_msg_static_create.constprop.0>
600062cc:	46c5      	mov	sp, r8
}
600062ce:	e768      	b.n	600061a2 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
600062d0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
600062d4:	f023 0301 	bic.w	r3, r3, #1
600062d8:	e7b9      	b.n	6000624e <z_arm_fault+0x156>
600062da:	bf00      	nop
600062dc:	e000ed00 	.word	0xe000ed00
600062e0:	6000c82c 	.word	0x6000c82c
600062e4:	6000b888 	.word	0x6000b888
600062e8:	6000c857 	.word	0x6000c857
600062ec:	6000c86e 	.word	0x6000c86e
600062f0:	6000c88f 	.word	0x6000c88f
600062f4:	6000c89d 	.word	0x6000c89d
600062f8:	6000c8bc 	.word	0x6000c8bc
600062fc:	6000c8d8 	.word	0x6000c8d8
60006300:	6000c813 	.word	0x6000c813
60006304:	6000c7fe 	.word	0x6000c7fe
60006308:	6000c8fc 	.word	0x6000c8fc
6000630c:	01000004 	.word	0x01000004

60006310 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
60006310:	4a02      	ldr	r2, [pc, #8]	; (6000631c <z_arm_fault_init+0xc>)
60006312:	6953      	ldr	r3, [r2, #20]
60006314:	f043 0310 	orr.w	r3, r3, #16
60006318:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
6000631a:	4770      	bx	lr
6000631c:	e000ed00 	.word	0xe000ed00

60006320 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
60006320:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
60006324:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
60006328:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
6000632a:	4672      	mov	r2, lr
	bl z_arm_fault
6000632c:	f7ff fee4 	bl	600060f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
60006330:	bd01      	pop	{r0, pc}
60006332:	bf00      	nop

60006334 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
60006334:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
60006336:	4804      	ldr	r0, [pc, #16]	; (60006348 <z_arm_interrupt_init+0x14>)
60006338:	2110      	movs	r1, #16
6000633a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
6000633c:	3301      	adds	r3, #1
6000633e:	2b8e      	cmp	r3, #142	; 0x8e
60006340:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
60006344:	d1f9      	bne.n	6000633a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
60006346:	4770      	bx	lr
60006348:	e000e100 	.word	0xe000e100

6000634c <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
6000634c:	f003 fbff 	bl	60009b4e <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
60006350:	2010      	movs	r0, #16
    msr BASEPRI, r0
60006352:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
60006356:	480b      	ldr	r0, [pc, #44]	; (60006384 <__start+0x38>)
    ldr r1, =0xaa
60006358:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
6000635c:	f44f 6204 	mov.w	r2, #2112	; 0x840
    bl z_early_memset
60006360:	f004 fe27 	bl	6000afb2 <z_early_memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
60006364:	4807      	ldr	r0, [pc, #28]	; (60006384 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
60006366:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
6000636a:	1840      	adds	r0, r0, r1
    msr PSP, r0
6000636c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
60006370:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
60006374:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
60006376:	4308      	orrs	r0, r1
    msr CONTROL, r0
60006378:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
6000637c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
60006380:	f7ff fbe0 	bl	60005b44 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
60006384:	80001fc0 	.word	0x80001fc0

60006388 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
60006388:	4b08      	ldr	r3, [pc, #32]	; (600063ac <z_impl_k_thread_abort+0x24>)
6000638a:	689b      	ldr	r3, [r3, #8]
6000638c:	4283      	cmp	r3, r0
6000638e:	d10b      	bne.n	600063a8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
60006390:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
60006394:	b143      	cbz	r3, 600063a8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
60006396:	4b06      	ldr	r3, [pc, #24]	; (600063b0 <z_impl_k_thread_abort+0x28>)
60006398:	685a      	ldr	r2, [r3, #4]
6000639a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
6000639e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
600063a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
600063a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
600063a6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
600063a8:	f002 bdb0 	b.w	60008f0c <z_thread_abort>
600063ac:	80001048 	.word	0x80001048
600063b0:	e000ed00 	.word	0xe000ed00

600063b4 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
600063b4:	4b02      	ldr	r3, [pc, #8]	; (600063c0 <z_arm_configure_static_mpu_regions+0xc>)
600063b6:	2102      	movs	r1, #2
600063b8:	4a02      	ldr	r2, [pc, #8]	; (600063c4 <z_arm_configure_static_mpu_regions+0x10>)
600063ba:	4803      	ldr	r0, [pc, #12]	; (600063c8 <z_arm_configure_static_mpu_regions+0x14>)
600063bc:	f000 b894 	b.w	600064e8 <arm_core_mpu_configure_static_mpu_regions>
600063c0:	82000000 	.word	0x82000000
600063c4:	80000000 	.word	0x80000000
600063c8:	6000b938 	.word	0x6000b938

600063cc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
600063cc:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
600063d0:	2140      	movs	r1, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
600063d2:	4b05      	ldr	r3, [pc, #20]	; (600063e8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
600063d4:	3a40      	subs	r2, #64	; 0x40

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
600063d6:	4618      	mov	r0, r3
	dynamic_regions[region_num].start = guard_start;
600063d8:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
600063da:	4a04      	ldr	r2, [pc, #16]	; (600063ec <z_arm_configure_dynamic_mpu_regions+0x20>)
600063dc:	e9c3 1201 	strd	r1, r2, [r3, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
600063e0:	2101      	movs	r1, #1
600063e2:	f000 b88b 	b.w	600064fc <arm_core_mpu_configure_dynamic_mpu_regions>
600063e6:	bf00      	nop
600063e8:	800010cc 	.word	0x800010cc
600063ec:	150b0000 	.word	0x150b0000

600063f0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
600063f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
600063f4:	469c      	mov	ip, r3
600063f6:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
600063f8:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
600063fa:	2300      	movs	r3, #0
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
600063fc:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 600064ac <mpu_configure_regions+0xbc>
60006400:	428b      	cmp	r3, r1
60006402:	da1a      	bge.n	6000643a <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
60006404:	6844      	ldr	r4, [r0, #4]
60006406:	2c00      	cmp	r4, #0
60006408:	d04d      	beq.n	600064a6 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
6000640a:	f1bc 0f00 	cmp.w	ip, #0
6000640e:	d01d      	beq.n	6000644c <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
60006410:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
60006412:	4234      	tst	r4, r6
60006414:	d015      	beq.n	60006442 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
60006416:	466c      	mov	r4, sp
60006418:	b088      	sub	sp, #32
6000641a:	466a      	mov	r2, sp
6000641c:	4924      	ldr	r1, [pc, #144]	; (600064b0 <mpu_configure_regions+0xc0>)
6000641e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
60006422:	2303      	movs	r3, #3
60006424:	f842 3f10 	str.w	r3, [r2, #16]!
60006428:	2300      	movs	r3, #0
6000642a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000642e:	4821      	ldr	r0, [pc, #132]	; (600064b4 <mpu_configure_regions+0xc4>)
			return -EINVAL;
60006430:	f06f 0515 	mvn.w	r5, #21
60006434:	f7ff f820 	bl	60005478 <z_impl_z_log_msg_static_create>
60006438:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
6000643a:	4628      	mov	r0, r5
6000643c:	46bd      	mov	sp, r7
6000643e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
60006442:	2c1f      	cmp	r4, #31
60006444:	d9e7      	bls.n	60006416 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
60006446:	6802      	ldr	r2, [r0, #0]
		&&
60006448:	4216      	tst	r6, r2
6000644a:	d1e4      	bne.n	60006416 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
6000644c:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
6000644e:	fa5f f885 	uxtb.w	r8, r5
	region_conf.base = new_region->start;
60006452:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
60006454:	6886      	ldr	r6, [r0, #8]
	if (size <= 32U) {
60006456:	d914      	bls.n	60006482 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
60006458:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
6000645c:	d813      	bhi.n	60006486 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
6000645e:	3c01      	subs	r4, #1
60006460:	fab4 f484 	clz	r4, r4
60006464:	f1c4 041f 	rsb	r4, r4, #31
60006468:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
6000646a:	f1b8 0f0f 	cmp.w	r8, #15
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
6000646e:	ea46 0604 	orr.w	r6, r6, r4
60006472:	d90a      	bls.n	6000648a <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
60006474:	466c      	mov	r4, sp
60006476:	b088      	sub	sp, #32
60006478:	466a      	mov	r2, sp
6000647a:	4b0f      	ldr	r3, [pc, #60]	; (600064b8 <mpu_configure_regions+0xc8>)
6000647c:	e9c2 3505 	strd	r3, r5, [r2, #20]
60006480:	e7cf      	b.n	60006422 <mpu_configure_regions+0x32>
		return REGION_32B;
60006482:	2408      	movs	r4, #8
60006484:	e7f1      	b.n	6000646a <mpu_configure_regions+0x7a>
		return REGION_4G;
60006486:	243e      	movs	r4, #62	; 0x3e
60006488:	e7ef      	b.n	6000646a <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
6000648a:	f022 021f 	bic.w	r2, r2, #31
6000648e:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
60006492:	f046 0601 	orr.w	r6, r6, #1
				| MPU_RBAR_VALID_Msk | index;
60006496:	432a      	orrs	r2, r5
		reg_index++;
60006498:	3501      	adds	r5, #1
6000649a:	f042 0210 	orr.w	r2, r2, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
6000649e:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
600064a2:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
600064a6:	3301      	adds	r3, #1
600064a8:	300c      	adds	r0, #12
600064aa:	e7a9      	b.n	60006400 <mpu_configure_regions+0x10>
600064ac:	e000ed00 	.word	0xe000ed00
600064b0:	6000c913 	.word	0x6000c913
600064b4:	6000b880 	.word	0x6000b880
600064b8:	6000c936 	.word	0x6000c936

600064bc <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
600064bc:	4b04      	ldr	r3, [pc, #16]	; (600064d0 <arm_core_mpu_enable+0x14>)
600064be:	2205      	movs	r2, #5
600064c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
600064c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
600064c8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
600064cc:	4770      	bx	lr
600064ce:	bf00      	nop
600064d0:	e000ed00 	.word	0xe000ed00

600064d4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
600064d4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
600064d8:	4b02      	ldr	r3, [pc, #8]	; (600064e4 <arm_core_mpu_disable+0x10>)
600064da:	2200      	movs	r2, #0
600064dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
600064e0:	4770      	bx	lr
600064e2:	bf00      	nop
600064e4:	e000ed00 	.word	0xe000ed00

600064e8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
600064e8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
600064ea:	4c03      	ldr	r4, [pc, #12]	; (600064f8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
600064ec:	2301      	movs	r3, #1
600064ee:	7822      	ldrb	r2, [r4, #0]
600064f0:	f7ff ff7e 	bl	600063f0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
600064f4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
600064f6:	bd10      	pop	{r4, pc}
600064f8:	80001c65 	.word	0x80001c65

600064fc <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
600064fc:	4a09      	ldr	r2, [pc, #36]	; (60006524 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
600064fe:	b508      	push	{r3, lr}
60006500:	2300      	movs	r3, #0
60006502:	7812      	ldrb	r2, [r2, #0]
60006504:	f7ff ff74 	bl	600063f0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
60006508:	f110 0f16 	cmn.w	r0, #22
6000650c:	d003      	beq.n	60006516 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
6000650e:	4b06      	ldr	r3, [pc, #24]	; (60006528 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
60006510:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
60006512:	280f      	cmp	r0, #15
60006514:	dd00      	ble.n	60006518 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
60006516:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
60006518:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
6000651c:	3001      	adds	r0, #1
  MPU->RASR = 0U;
6000651e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
60006522:	e7f6      	b.n	60006512 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
60006524:	80001c65 	.word	0x80001c65
60006528:	e000ed00 	.word	0xe000ed00

6000652c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
6000652c:	4826      	ldr	r0, [pc, #152]	; (600065c8 <z_arm_mpu_init+0x9c>)
{
6000652e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mpu_config.num_regions > get_num_regions()) {
60006530:	6803      	ldr	r3, [r0, #0]
60006532:	2b10      	cmp	r3, #16
60006534:	d845      	bhi.n	600065c2 <z_arm_mpu_init+0x96>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
60006536:	f7ff ffcd 	bl	600064d4 <arm_core_mpu_disable>
	if (__get_SCTLR() & SCTLR_C_Msk) {
		L1C_CleanInvalidateDCacheAll();
	}
#else
#if !defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
	if (SCB->CCR & SCB_CCR_DC_Msk) {
6000653a:	4a24      	ldr	r2, [pc, #144]	; (600065cc <z_arm_mpu_init+0xa0>)
6000653c:	6953      	ldr	r3, [r2, #20]
6000653e:	03db      	lsls	r3, r3, #15
60006540:	d51e      	bpl.n	60006580 <z_arm_mpu_init+0x54>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
60006542:	2300      	movs	r3, #0
60006544:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
60006548:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
6000654c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
60006550:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
60006554:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
60006558:	f3c3 334e 	ubfx	r3, r3, #13, #15
6000655c:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
6000655e:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
60006562:	4621      	mov	r1, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
60006564:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
60006568:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
6000656a:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
6000656e:	d2f9      	bcs.n	60006564 <z_arm_mpu_init+0x38>
    } while(sets-- != 0U);
60006570:	3b20      	subs	r3, #32
60006572:	f113 0f20 	cmn.w	r3, #32
60006576:	d1f2      	bne.n	6000655e <z_arm_mpu_init+0x32>
60006578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
6000657c:	f3bf 8f6f 	isb	sy
60006580:	e9d0 4100 	ldrd	r4, r1, [r0]
	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
60006584:	2200      	movs	r2, #0
60006586:	4811      	ldr	r0, [pc, #68]	; (600065cc <z_arm_mpu_init+0xa0>)
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
60006588:	42a2      	cmp	r2, r4
6000658a:	f101 010c 	add.w	r1, r1, #12
6000658e:	d105      	bne.n	6000659c <z_arm_mpu_init+0x70>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
60006590:	4b0f      	ldr	r3, [pc, #60]	; (600065d0 <z_arm_mpu_init+0xa4>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
60006592:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
60006594:	701a      	strb	r2, [r3, #0]
	arm_core_mpu_enable();
60006596:	f7ff ff91 	bl	600064bc <arm_core_mpu_enable>
}
6000659a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
6000659c:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
600065a0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
600065a4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
600065a8:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
600065aa:	3201      	adds	r2, #1
600065ac:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
600065b0:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
600065b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
600065b8:	f043 0301 	orr.w	r3, r3, #1
600065bc:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
600065c0:	e7e2      	b.n	60006588 <z_arm_mpu_init+0x5c>
		return -1;
600065c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
600065c6:	e7e8      	b.n	6000659a <z_arm_mpu_init+0x6e>
600065c8:	6000b950 	.word	0x6000b950
600065cc:	e000ed00 	.word	0xe000ed00
600065d0:	80001c65 	.word	0x80001c65

600065d4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
600065d4:	4b01      	ldr	r3, [pc, #4]	; (600065dc <__stdout_hook_install+0x8>)
600065d6:	6018      	str	r0, [r3, #0]
}
600065d8:	4770      	bx	lr
600065da:	bf00      	nop
600065dc:	80000818 	.word	0x80000818

600065e0 <mcux_ccm_get_subsys_rate>:
#else
	uint32_t clock_name = (uint32_t) sub_system;
#endif
	uint32_t mux __unused;

	switch (clock_name) {
600065e0:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
{
600065e4:	b538      	push	{r3, r4, r5, lr}
600065e6:	4614      	mov	r4, r2
	switch (clock_name) {
600065e8:	d013      	beq.n	60006612 <mcux_ccm_get_subsys_rate+0x32>
600065ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
600065ee:	d032      	beq.n	60006656 <mcux_ccm_get_subsys_rate+0x76>
600065f0:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
600065f4:	d12b      	bne.n	6000664e <mcux_ccm_get_subsys_rate+0x6e>
    return (CCM_TUPLE_REG(CCM, mux) & CCM_TUPLE_MASK(mux)) >> CCM_TUPLE_SHIFT(mux);
600065f6:	4d19      	ldr	r5, [pc, #100]	; (6000665c <mcux_ccm_get_subsys_rate+0x7c>)
600065f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24

	} break;

#else
	case IMX_CCM_LPUART_CLK:
		if (CLOCK_GetMux(kCLOCK_UartMux) == 0) {
600065fa:	065a      	lsls	r2, r3, #25
600065fc:	d419      	bmi.n	60006632 <mcux_ccm_get_subsys_rate+0x52>
			*rate = CLOCK_GetPllFreq(kCLOCK_PllUsb1) / 6
600065fe:	4818      	ldr	r0, [pc, #96]	; (60006660 <mcux_ccm_get_subsys_rate+0x80>)
60006600:	f001 f858 	bl	600076b4 <CLOCK_GetPllFreq>
    return ((CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
60006604:	6a6b      	ldr	r3, [r5, #36]	; 0x24
60006606:	2206      	movs	r2, #6
60006608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
6000660c:	fbb0 f0f2 	udiv	r0, r0, r2
60006610:	e00a      	b.n	60006628 <mcux_ccm_get_subsys_rate+0x48>
    return (CCM_TUPLE_REG(CCM, mux) & CCM_TUPLE_MASK(mux)) >> CCM_TUPLE_SHIFT(mux);
60006612:	4d12      	ldr	r5, [pc, #72]	; (6000665c <mcux_ccm_get_subsys_rate+0x7c>)
		*rate = CLOCK_GetFreq(lpspi_clock)
60006614:	4a13      	ldr	r2, [pc, #76]	; (60006664 <mcux_ccm_get_subsys_rate+0x84>)
60006616:	69ab      	ldr	r3, [r5, #24]
60006618:	f3c3 1301 	ubfx	r3, r3, #4, #2
6000661c:	5cd0      	ldrb	r0, [r2, r3]
6000661e:	f001 f9db 	bl	600079d8 <CLOCK_GetFreq>
    return ((CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
60006622:	69ab      	ldr	r3, [r5, #24]
60006624:	f3c3 6382 	ubfx	r3, r3, #26, #3
				/ (CLOCK_GetDiv(kCLOCK_UartDiv) + 1);
60006628:	3301      	adds	r3, #1
6000662a:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
#endif

#ifdef CONFIG_DMA_MCUX_EDMA
	case IMX_CCM_EDMA_CLK:
		*rate = CLOCK_GetIpgFreq();
6000662e:	6020      	str	r0, [r4, #0]
		break;
60006630:	e00d      	b.n	6000664e <mcux_ccm_get_subsys_rate+0x6e>
    return ((XTALOSC24M->LOWPWR_CTRL & (uint32_t)XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK) != 0UL) ? 24000000UL : g_xtalFreq;
60006632:	4b0d      	ldr	r3, [pc, #52]	; (60006668 <mcux_ccm_get_subsys_rate+0x88>)
60006634:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
60006638:	06db      	lsls	r3, r3, #27
6000663a:	d40a      	bmi.n	60006652 <mcux_ccm_get_subsys_rate+0x72>
6000663c:	4b0b      	ldr	r3, [pc, #44]	; (6000666c <mcux_ccm_get_subsys_rate+0x8c>)
6000663e:	681a      	ldr	r2, [r3, #0]
    return ((CCM_TUPLE_REG(CCM, divider) & CCM_TUPLE_MASK(divider)) >> CCM_TUPLE_SHIFT(divider));
60006640:	6a6b      	ldr	r3, [r5, #36]	; 0x24
60006642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				/ (CLOCK_GetDiv(kCLOCK_UartDiv) + 1);
60006646:	3301      	adds	r3, #1
60006648:	fbb2 f2f3 	udiv	r2, r2, r3
			*rate = CLOCK_GetOscFreq()
6000664c:	6022      	str	r2, [r4, #0]
		break;
#endif
	}

	return 0;
}
6000664e:	2000      	movs	r0, #0
60006650:	bd38      	pop	{r3, r4, r5, pc}
    return ((XTALOSC24M->LOWPWR_CTRL & (uint32_t)XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK) != 0UL) ? 24000000UL : g_xtalFreq;
60006652:	4a07      	ldr	r2, [pc, #28]	; (60006670 <mcux_ccm_get_subsys_rate+0x90>)
60006654:	e7f4      	b.n	60006640 <mcux_ccm_get_subsys_rate+0x60>
		*rate = CLOCK_GetIpgFreq();
60006656:	f001 f981 	bl	6000795c <CLOCK_GetIpgFreq>
6000665a:	e7e8      	b.n	6000662e <mcux_ccm_get_subsys_rate+0x4e>
6000665c:	400fc000 	.word	0x400fc000
60006660:	0010000d 	.word	0x0010000d
60006664:	6000c986 	.word	0x6000c986
60006668:	400d8000 	.word	0x400d8000
6000666c:	80001bb4 	.word	0x80001bb4
60006670:	016e3600 	.word	0x016e3600

60006674 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
60006674:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
60006676:	4807      	ldr	r0, [pc, #28]	; (60006694 <uart_console_init+0x20>)
60006678:	f004 fc87 	bl	6000af8a <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
6000667c:	b138      	cbz	r0, 6000668e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
6000667e:	4806      	ldr	r0, [pc, #24]	; (60006698 <uart_console_init+0x24>)
60006680:	f7ff ffa8 	bl	600065d4 <__stdout_hook_install>
	__printk_hook_install(console_out);
60006684:	4804      	ldr	r0, [pc, #16]	; (60006698 <uart_console_init+0x24>)
60006686:	f7fd ffd7 	bl	60004638 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
6000668a:	2000      	movs	r0, #0
}
6000668c:	bd08      	pop	{r3, pc}
		return -ENODEV;
6000668e:	f06f 0012 	mvn.w	r0, #18
60006692:	e7fb      	b.n	6000668c <uart_console_init+0x18>
60006694:	6000b30c 	.word	0x6000b30c
60006698:	6000669d 	.word	0x6000669d

6000669c <console_out>:
	if ('\n' == c) {
6000669c:	280a      	cmp	r0, #10
{
6000669e:	b538      	push	{r3, r4, r5, lr}
600066a0:	4604      	mov	r4, r0
600066a2:	4d07      	ldr	r5, [pc, #28]	; (600066c0 <console_out+0x24>)
	if ('\n' == c) {
600066a4:	d104      	bne.n	600066b0 <console_out+0x14>
600066a6:	68ab      	ldr	r3, [r5, #8]
600066a8:	210d      	movs	r1, #13
600066aa:	4628      	mov	r0, r5
600066ac:	685b      	ldr	r3, [r3, #4]
600066ae:	4798      	blx	r3
600066b0:	68ab      	ldr	r3, [r5, #8]
600066b2:	b2e1      	uxtb	r1, r4
600066b4:	4802      	ldr	r0, [pc, #8]	; (600066c0 <console_out+0x24>)
600066b6:	685b      	ldr	r3, [r3, #4]
600066b8:	4798      	blx	r3
}
600066ba:	4620      	mov	r0, r4
600066bc:	bd38      	pop	{r3, r4, r5, pc}
600066be:	bf00      	nop
600066c0:	6000b30c 	.word	0x6000b30c

600066c4 <data_size_valid>:
#define DEV_EDMA_HANDLE(dev, ch) \
	((edma_handle_t *)(&(DEV_CHANNEL_DATA(dev, ch)->edma_handle)))

static bool data_size_valid(const size_t data_size)
{
	return (data_size == 4U || data_size == 2U ||
600066c4:	2802      	cmp	r0, #2
600066c6:	d809      	bhi.n	600066dc <data_size_valid+0x18>
600066c8:	3800      	subs	r0, #0
600066ca:	bf18      	it	ne
600066cc:	2001      	movne	r0, #1
600066ce:	4770      	bx	lr
600066d0:	4b05      	ldr	r3, [pc, #20]	; (600066e8 <data_size_valid+0x24>)
600066d2:	fa23 f000 	lsr.w	r0, r3, r0
600066d6:	f000 0001 	and.w	r0, r0, #1
600066da:	4770      	bx	lr
600066dc:	3804      	subs	r0, #4
600066de:	281c      	cmp	r0, #28
600066e0:	d9f6      	bls.n	600066d0 <data_size_valid+0xc>
{
600066e2:	2000      	movs	r0, #0
		data_size == 1U || data_size == 8U ||
		data_size == 16U ||
		data_size == 32U);
}
600066e4:	4770      	bx	lr
600066e6:	bf00      	nop
600066e8:	10001011 	.word	0x10001011

600066ec <dma_mcux_edma_init>:
	.get_status = dma_mcux_edma_get_status,
	.chan_filter = dma_mcux_edma_channel_filter,
};

static int dma_mcux_edma_init(const struct device *dev)
{
600066ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct dma_mcux_edma_config *config = dev->config;
600066ee:	6847      	ldr	r7, [r0, #4]
	struct dma_mcux_edma_data *data = dev->data;

	edma_config_t userConfig = { 0 };
600066f0:	2500      	movs	r5, #0
	struct dma_mcux_edma_data *data = dev->data;
600066f2:	6906      	ldr	r6, [r0, #16]
{
600066f4:	4604      	mov	r4, r0

	LOG_DBG("INIT NXP EDMA");
	DMAMUX_Init(DEV_DMAMUX_BASE(dev));
600066f6:	6878      	ldr	r0, [r7, #4]
	edma_config_t userConfig = { 0 };
600066f8:	9501      	str	r5, [sp, #4]
	DMAMUX_Init(DEV_DMAMUX_BASE(dev));
600066fa:	f001 facf 	bl	60007c9c <DMAMUX_Init>
	EDMA_GetDefaultConfig(&userConfig);
600066fe:	a801      	add	r0, sp, #4
60006700:	f003 ffee 	bl	6000a6e0 <EDMA_GetDefaultConfig>
	EDMA_Init(DEV_BASE(dev), &userConfig);
60006704:	6863      	ldr	r3, [r4, #4]
60006706:	a901      	add	r1, sp, #4
60006708:	6818      	ldr	r0, [r3, #0]
6000670a:	f001 fa37 	bl	60007b7c <EDMA_Init>
	config->irq_config_func(dev);
6000670e:	68fb      	ldr	r3, [r7, #12]
60006710:	4620      	mov	r0, r4
60006712:	4798      	blx	r3
	memset(dev->data, 0, sizeof(struct dma_mcux_edma_data));
60006714:	4629      	mov	r1, r5
60006716:	f44f 6229 	mov.w	r2, #2704	; 0xa90
6000671a:	6920      	ldr	r0, [r4, #16]
6000671c:	f003 fb10 	bl	60009d40 <memset>
	memset(tcdpool, 0, sizeof(tcdpool));
60006720:	f44f 6200 	mov.w	r2, #2048	; 0x800
60006724:	4629      	mov	r1, r5
60006726:	4806      	ldr	r0, [pc, #24]	; (60006740 <dma_mcux_edma_init+0x54>)
60006728:	f003 fb0a 	bl	60009d40 <memset>
	data->dma_ctx.magic = DMA_MAGIC;
6000672c:	4b05      	ldr	r3, [pc, #20]	; (60006744 <dma_mcux_edma_init+0x58>)
	data->dma_ctx.dma_channels = config->dma_channels;
	data->dma_ctx.atomic = data->channels_atomic;
	return 0;
}
6000672e:	4628      	mov	r0, r5
	data->dma_ctx.magic = DMA_MAGIC;
60006730:	6033      	str	r3, [r6, #0]
	data->dma_ctx.dma_channels = config->dma_channels;
60006732:	68bb      	ldr	r3, [r7, #8]
60006734:	6073      	str	r3, [r6, #4]
	data->dma_ctx.atomic = data->channels_atomic;
60006736:	f606 238c 	addw	r3, r6, #2700	; 0xa8c
6000673a:	60b3      	str	r3, [r6, #8]
}
6000673c:	b003      	add	sp, #12
6000673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60006740:	80000000 	.word	0x80000000
60006744:	47494749 	.word	0x47494749

60006748 <dma_mcux_edma_error_irq_handler>:
{
60006748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
6000674c:	4605      	mov	r5, r0
6000674e:	af00      	add	r7, sp, #0
	for (i = 0; i < DT_INST_PROP(0, dma_channels); i++) {
60006750:	2400      	movs	r4, #0
		if (DEV_CHANNEL_DATA(dev, i)->busy) {
60006752:	f04f 0b54 	mov.w	fp, #84	; 0x54
			LOG_INF("channel %d error status is 0x%x", i, flag);
60006756:	f8df 806c 	ldr.w	r8, [pc, #108]	; 600067c4 <dma_mcux_edma_error_irq_handler+0x7c>
6000675a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 600067c8 <dma_mcux_edma_error_irq_handler+0x80>
		if (DEV_CHANNEL_DATA(dev, i)->busy) {
6000675e:	692b      	ldr	r3, [r5, #16]
60006760:	fb0b f604 	mul.w	r6, fp, r4
60006764:	4433      	add	r3, r6
60006766:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
6000676a:	b32b      	cbz	r3, 600067b8 <dma_mcux_edma_error_irq_handler+0x70>
			flag = EDMA_GetChannelStatusFlags(DEV_BASE(dev), i);
6000676c:	686b      	ldr	r3, [r5, #4]
6000676e:	4621      	mov	r1, r4
			LOG_INF("channel %d error status is 0x%x", i, flag);
60006770:	46ea      	mov	sl, sp
			flag = EDMA_GetChannelStatusFlags(DEV_BASE(dev), i);
60006772:	6818      	ldr	r0, [r3, #0]
60006774:	f004 f875 	bl	6000a862 <EDMA_GetChannelStatusFlags>
			LOG_INF("channel %d error status is 0x%x", i, flag);
60006778:	b088      	sub	sp, #32
6000677a:	466a      	mov	r2, sp
6000677c:	2304      	movs	r3, #4
6000677e:	61d0      	str	r0, [r2, #28]
60006780:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
60006784:	4648      	mov	r0, r9
60006786:	e9c2 8405 	strd	r8, r4, [r2, #20]
6000678a:	f842 3f10 	str.w	r3, [r2, #16]!
6000678e:	f003 fc1d 	bl	60009fcc <z_log_msg_static_create.constprop.0>
			EDMA_ClearChannelStatusFlags(DEV_BASE(dev), i,
60006792:	686b      	ldr	r3, [r5, #4]
60006794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60006798:	46d5      	mov	sp, sl
6000679a:	6818      	ldr	r0, [r3, #0]
6000679c:	4621      	mov	r1, r4
6000679e:	f004 f874 	bl	6000a88a <EDMA_ClearChannelStatusFlags>
			EDMA_AbortTransfer(DEV_EDMA_HANDLE(dev, i));
600067a2:	f106 0324 	add.w	r3, r6, #36	; 0x24
600067a6:	6928      	ldr	r0, [r5, #16]
600067a8:	4418      	add	r0, r3
600067aa:	f004 f99f 	bl	6000aaec <EDMA_AbortTransfer>
			DEV_CHANNEL_DATA(dev, i)->busy = false;
600067ae:	692b      	ldr	r3, [r5, #16]
600067b0:	2200      	movs	r2, #0
600067b2:	4433      	add	r3, r6
600067b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < DT_INST_PROP(0, dma_channels); i++) {
600067b8:	3401      	adds	r4, #1
600067ba:	2c20      	cmp	r4, #32
600067bc:	d1cf      	bne.n	6000675e <dma_mcux_edma_error_irq_handler+0x16>
}
600067be:	46bd      	mov	sp, r7
600067c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
600067c4:	6000c98a 	.word	0x6000c98a
600067c8:	6000b860 	.word	0x6000b860

600067cc <dma_mcux_edma_configure>:
{
600067cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600067d0:	b08f      	sub	sp, #60	; 0x3c
600067d2:	460d      	mov	r5, r1
600067d4:	4614      	mov	r4, r2
	if (NULL == dev || NULL == config) {
600067d6:	4606      	mov	r6, r0
{
600067d8:	af04      	add	r7, sp, #16
	if (NULL == dev || NULL == config) {
600067da:	2800      	cmp	r0, #0
600067dc:	d039      	beq.n	60006852 <dma_mcux_edma_configure+0x86>
600067de:	2a00      	cmp	r2, #0
600067e0:	d037      	beq.n	60006852 <dma_mcux_edma_configure+0x86>
	edma_handle_t *p_handle = DEV_EDMA_HANDLE(dev, channel);
600067e2:	2354      	movs	r3, #84	; 0x54
600067e4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct dma_block_config *block_config = config->head_block;
600067e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
600067ec:	434b      	muls	r3, r1
	struct call_back *data = DEV_CHANNEL_DATA(dev, channel);
600067ee:	f103 020c 	add.w	r2, r3, #12
	edma_handle_t *p_handle = DEV_EDMA_HANDLE(dev, channel);
600067f2:	f103 0b24 	add.w	fp, r3, #36	; 0x24
	struct call_back *data = DEV_CHANNEL_DATA(dev, channel);
600067f6:	4442      	add	r2, r8
	edma_handle_t *p_handle = DEV_EDMA_HANDLE(dev, channel);
600067f8:	44c3      	add	fp, r8
	struct call_back *data = DEV_CHANNEL_DATA(dev, channel);
600067fa:	60fa      	str	r2, [r7, #12]
	uint32_t slot = config->dma_slot;
600067fc:	7822      	ldrb	r2, [r4, #0]
	if (slot > DT_INST_PROP(0, dma_requests)) {
600067fe:	2a80      	cmp	r2, #128	; 0x80
60006800:	d916      	bls.n	60006830 <dma_mcux_edma_configure+0x64>
		LOG_ERR("source number is outof scope %d", slot);
60006802:	466c      	mov	r4, sp
60006804:	b088      	sub	sp, #32
60006806:	ab04      	add	r3, sp, #16
60006808:	49a9      	ldr	r1, [pc, #676]	; (60006ab0 <dma_mcux_edma_configure+0x2e4>)
		return -ENOTSUP;
6000680a:	f06f 0a85 	mvn.w	sl, #133	; 0x85
		LOG_ERR("source number is outof scope %d", slot);
6000680e:	48a9      	ldr	r0, [pc, #676]	; (60006ab4 <dma_mcux_edma_configure+0x2e8>)
60006810:	e9c3 1205 	strd	r1, r2, [r3, #20]
60006814:	461a      	mov	r2, r3
60006816:	2303      	movs	r3, #3
60006818:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
6000681c:	f842 3f10 	str.w	r3, [r2, #16]!
60006820:	f003 fbd4 	bl	60009fcc <z_log_msg_static_create.constprop.0>
60006824:	46a5      	mov	sp, r4
}
60006826:	4650      	mov	r0, sl
60006828:	372c      	adds	r7, #44	; 0x2c
6000682a:	46bd      	mov	sp, r7
6000682c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (channel > DT_INST_PROP(0, dma_channels)) {
60006830:	2920      	cmp	r1, #32
60006832:	d911      	bls.n	60006858 <dma_mcux_edma_configure+0x8c>
		LOG_ERR("out of DMA channel %d", channel);
60006834:	466c      	mov	r4, sp
60006836:	b088      	sub	sp, #32
60006838:	aa04      	add	r2, sp, #16
6000683a:	4b9f      	ldr	r3, [pc, #636]	; (60006ab8 <dma_mcux_edma_configure+0x2ec>)
6000683c:	e9c2 3105 	strd	r3, r1, [r2, #20]
60006840:	2303      	movs	r3, #3
60006842:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60006846:	489b      	ldr	r0, [pc, #620]	; (60006ab4 <dma_mcux_edma_configure+0x2e8>)
60006848:	f842 3f10 	str.w	r3, [r2, #16]!
6000684c:	f003 fbbe 	bl	60009fcc <z_log_msg_static_create.constprop.0>
60006850:	46a5      	mov	sp, r4
		return -EINVAL;
60006852:	f06f 0a15 	mvn.w	sl, #21
60006856:	e7e6      	b.n	60006826 <dma_mcux_edma_configure+0x5a>
	data->transfer_settings.valid = false;
60006858:	4443      	add	r3, r8
6000685a:	2100      	movs	r1, #0
6000685c:	f883 105a 	strb.w	r1, [r3, #90]	; 0x5a
	switch (config->channel_direction) {
60006860:	7863      	ldrb	r3, [r4, #1]
60006862:	f003 0307 	and.w	r3, r3, #7
60006866:	2b03      	cmp	r3, #3
60006868:	d80e      	bhi.n	60006888 <dma_mcux_edma_configure+0xbc>
6000686a:	4994      	ldr	r1, [pc, #592]	; (60006abc <dma_mcux_edma_configure+0x2f0>)
6000686c:	5ccb      	ldrb	r3, [r1, r3]
	if (!data_size_valid(config->source_data_size)) {
6000686e:	88a1      	ldrh	r1, [r4, #4]
60006870:	60bb      	str	r3, [r7, #8]
60006872:	4608      	mov	r0, r1
60006874:	f7ff ff26 	bl	600066c4 <data_size_valid>
60006878:	b990      	cbnz	r0, 600068a0 <dma_mcux_edma_configure+0xd4>
		LOG_ERR("Source unit size error, %d", config->source_data_size);
6000687a:	466c      	mov	r4, sp
6000687c:	b088      	sub	sp, #32
6000687e:	aa04      	add	r2, sp, #16
60006880:	4b8f      	ldr	r3, [pc, #572]	; (60006ac0 <dma_mcux_edma_configure+0x2f4>)
60006882:	e9c2 3105 	strd	r3, r1, [r2, #20]
60006886:	e7db      	b.n	60006840 <dma_mcux_edma_configure+0x74>
		LOG_ERR("not support transfer direction");
60006888:	4b8e      	ldr	r3, [pc, #568]	; (60006ac4 <dma_mcux_edma_configure+0x2f8>)
6000688a:	f107 0220 	add.w	r2, r7, #32
6000688e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006892:	4888      	ldr	r0, [pc, #544]	; (60006ab4 <dma_mcux_edma_configure+0x2e8>)
60006894:	627b      	str	r3, [r7, #36]	; 0x24
60006896:	2302      	movs	r3, #2
60006898:	623b      	str	r3, [r7, #32]
6000689a:	f003 fb97 	bl	60009fcc <z_log_msg_static_create.constprop.0>
		return -EINVAL;
6000689e:	e7d8      	b.n	60006852 <dma_mcux_edma_configure+0x86>
	if (!data_size_valid(config->dest_data_size)) {
600068a0:	f8b4 a006 	ldrh.w	sl, [r4, #6]
600068a4:	4650      	mov	r0, sl
600068a6:	f7ff ff0d 	bl	600066c4 <data_size_valid>
600068aa:	b930      	cbnz	r0, 600068ba <dma_mcux_edma_configure+0xee>
		LOG_ERR("Dest unit size error, %d", config->dest_data_size);
600068ac:	466c      	mov	r4, sp
600068ae:	b088      	sub	sp, #32
600068b0:	aa04      	add	r2, sp, #16
600068b2:	4b85      	ldr	r3, [pc, #532]	; (60006ac8 <dma_mcux_edma_configure+0x2fc>)
600068b4:	e9c2 3a05 	strd	r3, sl, [r2, #20]
600068b8:	e7c2      	b.n	60006840 <dma_mcux_edma_configure+0x74>
	if (block_config->source_gather_en || block_config->dest_scatter_en) {
600068ba:	f899 301c 	ldrb.w	r3, [r9, #28]
600068be:	0798      	lsls	r0, r3, #30
600068c0:	d009      	beq.n	600068d6 <dma_mcux_edma_configure+0x10a>
		if (config->block_count > CONFIG_DMA_TCD_QUEUE_SIZE) {
600068c2:	68e3      	ldr	r3, [r4, #12]
600068c4:	2b02      	cmp	r3, #2
600068c6:	d906      	bls.n	600068d6 <dma_mcux_edma_configure+0x10a>
			LOG_ERR("please config DMA_TCD_QUEUE_SIZE as %d", config->block_count);
600068c8:	466c      	mov	r4, sp
600068ca:	b088      	sub	sp, #32
600068cc:	aa04      	add	r2, sp, #16
600068ce:	497f      	ldr	r1, [pc, #508]	; (60006acc <dma_mcux_edma_configure+0x300>)
600068d0:	e9c2 1305 	strd	r1, r3, [r2, #20]
600068d4:	e7b4      	b.n	60006840 <dma_mcux_edma_configure+0x74>
	data->transfer_settings.source_data_size = config->source_data_size;
600068d6:	2354      	movs	r3, #84	; 0x54
600068d8:	fb03 8305 	mla	r3, r3, r5, r8
600068dc:	6499      	str	r1, [r3, #72]	; 0x48
	data->transfer_settings.dest_data_size = config->dest_data_size;
600068de:	88e1      	ldrh	r1, [r4, #6]
600068e0:	64d9      	str	r1, [r3, #76]	; 0x4c
	data->transfer_settings.source_burst_length = config->source_burst_length;
600068e2:	8921      	ldrh	r1, [r4, #8]
600068e4:	6519      	str	r1, [r3, #80]	; 0x50
	data->transfer_settings.dest_burst_length = config->dest_burst_length;
600068e6:	8961      	ldrh	r1, [r4, #10]
600068e8:	6559      	str	r1, [r3, #84]	; 0x54
	data->transfer_settings.direction = config->channel_direction;
600068ea:	7861      	ldrb	r1, [r4, #1]
600068ec:	f3c1 0102 	ubfx	r1, r1, #0, #3
600068f0:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
	data->transfer_settings.transfer_type = transfer_type;
600068f4:	68b9      	ldr	r1, [r7, #8]
600068f6:	f883 1059 	strb.w	r1, [r3, #89]	; 0x59
	data->transfer_settings.valid = true;
600068fa:	2101      	movs	r1, #1
600068fc:	f883 105a 	strb.w	r1, [r3, #90]	; 0x5a
	__asm__ volatile(
60006900:	f04f 0310 	mov.w	r3, #16
60006904:	f3ef 8111 	mrs	r1, BASEPRI
60006908:	f383 8812 	msr	BASEPRI_MAX, r3
6000690c:	f3bf 8f6f 	isb	sy
	if (config->source_handshake || config->dest_handshake ||
60006910:	7863      	ldrb	r3, [r4, #1]
60006912:	6079      	str	r1, [r7, #4]
60006914:	f013 0f60 	tst.w	r3, #96	; 0x60
60006918:	6873      	ldr	r3, [r6, #4]
6000691a:	d103      	bne.n	60006924 <dma_mcux_edma_configure+0x158>
6000691c:	68b9      	ldr	r1, [r7, #8]
6000691e:	2900      	cmp	r1, #0
60006920:	f040 8093 	bne.w	60006a4a <dma_mcux_edma_configure+0x27e>
		DMAMUX_EnableAlwaysOn(DEV_DMAMUX_BASE(dev), channel, true);
60006924:	685a      	ldr	r2, [r3, #4]
{
    assert(channel < (uint32_t)FSL_FEATURE_DMAMUX_MODULE_CHANNEL);

    if (enable)
    {
        base->CHCFG[channel] |= DMAMUX_CHCFG_A_ON_MASK;
60006926:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
6000692a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
6000692e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
	DMAMUX_EnableChannel(DEV_DMAMUX_BASE(dev), channel);
60006932:	6873      	ldr	r3, [r6, #4]
60006934:	685a      	ldr	r2, [r3, #4]
    base->CHCFG[channel] |= DMAMUX_CHCFG_ENBL_MASK;
60006936:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
6000693a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
6000693e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
	if (data->busy) {
60006942:	2354      	movs	r3, #84	; 0x54
60006944:	fb03 8305 	mla	r3, r3, r5, r8
60006948:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
6000694c:	b113      	cbz	r3, 60006954 <dma_mcux_edma_configure+0x188>
		EDMA_AbortTransfer(p_handle);
6000694e:	4658      	mov	r0, fp
60006950:	f004 f8cc 	bl	6000aaec <EDMA_AbortTransfer>
	EDMA_ResetChannel(DEV_BASE(dev), channel);
60006954:	6873      	ldr	r3, [r6, #4]
60006956:	4629      	mov	r1, r5
60006958:	6818      	ldr	r0, [r3, #0]
6000695a:	f003 fefb 	bl	6000a754 <EDMA_ResetChannel>
	EDMA_CreateHandle(p_handle, DEV_BASE(dev), channel);
6000695e:	6873      	ldr	r3, [r6, #4]
60006960:	462a      	mov	r2, r5
60006962:	4658      	mov	r0, fp
60006964:	6819      	ldr	r1, [r3, #0]
60006966:	f001 f931 	bl	60007bcc <EDMA_CreateHandle>
	EDMA_SetCallback(p_handle, nxp_edma_callback, (void *)data);
6000696a:	68fa      	ldr	r2, [r7, #12]
6000696c:	4958      	ldr	r1, [pc, #352]	; (60006ad0 <dma_mcux_edma_configure+0x304>)
6000696e:	4658      	mov	r0, fp
60006970:	f003 ffa1 	bl	6000a8b6 <EDMA_SetCallback>
	EDMA_EnableChannelInterrupts(DEV_BASE(dev), channel, kEDMA_ErrorInterruptEnable);
60006974:	6873      	ldr	r3, [r6, #4]
60006976:	4629      	mov	r1, r5
60006978:	2201      	movs	r2, #1
6000697a:	6818      	ldr	r0, [r3, #0]
6000697c:	f003 febd 	bl	6000a6fa <EDMA_EnableChannelInterrupts>
	if (block_config->source_gather_en || block_config->dest_scatter_en) {
60006980:	f899 301c 	ldrb.w	r3, [r9, #28]
60006984:	0799      	lsls	r1, r3, #30
60006986:	d06b      	beq.n	60006a60 <dma_mcux_edma_configure+0x294>
		EDMA_InstallTCDMemory(p_handle, tcdpool[channel], CONFIG_DMA_TCD_QUEUE_SIZE);
60006988:	4952      	ldr	r1, [pc, #328]	; (60006ad4 <dma_mcux_edma_configure+0x308>)
	int ret = 0;
6000698a:	f04f 0a00 	mov.w	sl, #0
		EDMA_InstallTCDMemory(p_handle, tcdpool[channel], CONFIG_DMA_TCD_QUEUE_SIZE);
6000698e:	2202      	movs	r2, #2
60006990:	4658      	mov	r0, fp
60006992:	eb01 1185 	add.w	r1, r1, r5, lsl #6
60006996:	f003 ff85 	bl	6000a8a4 <EDMA_InstallTCDMemory>
			EDMA_PrepareTransfer(
6000699a:	68bb      	ldr	r3, [r7, #8]
6000699c:	88a2      	ldrh	r2, [r4, #4]
6000699e:	9303      	str	r3, [sp, #12]
600069a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
600069a4:	9302      	str	r3, [sp, #8]
600069a6:	8923      	ldrh	r3, [r4, #8]
600069a8:	9301      	str	r3, [sp, #4]
600069aa:	88e3      	ldrh	r3, [r4, #6]
600069ac:	9300      	str	r3, [sp, #0]
600069ae:	68f8      	ldr	r0, [r7, #12]
600069b0:	e9d9 1300 	ldrd	r1, r3, [r9]
600069b4:	f003 ff82 	bl	6000a8bc <EDMA_PrepareTransfer>
				EDMA_SubmitTransfer(p_handle, &(data->transferConfig));
600069b8:	68f9      	ldr	r1, [r7, #12]
600069ba:	4658      	mov	r0, fp
600069bc:	f003 ff9f 	bl	6000a8fe <EDMA_SubmitTransfer>
			if (submit_status != kStatus_Success) {
600069c0:	b180      	cbz	r0, 600069e4 <dma_mcux_edma_configure+0x218>
				LOG_ERR("Error submitting EDMA Transfer: 0x%x", submit_status);
600069c2:	46ea      	mov	sl, sp
600069c4:	b088      	sub	sp, #32
600069c6:	aa04      	add	r2, sp, #16
600069c8:	4b43      	ldr	r3, [pc, #268]	; (60006ad8 <dma_mcux_edma_configure+0x30c>)
600069ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
600069ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
600069d2:	2303      	movs	r3, #3
600069d4:	4837      	ldr	r0, [pc, #220]	; (60006ab4 <dma_mcux_edma_configure+0x2e8>)
600069d6:	f842 3f10 	str.w	r3, [r2, #16]!
600069da:	f003 faf7 	bl	60009fcc <z_log_msg_static_create.constprop.0>
600069de:	46d5      	mov	sp, sl
				ret = -EFAULT;
600069e0:	f06f 0a0d 	mvn.w	sl, #13
			block_config = block_config->next_block;
600069e4:	f8d9 9018 	ldr.w	r9, [r9, #24]
		while (block_config != NULL) {
600069e8:	f1b9 0f00 	cmp.w	r9, #0
600069ec:	d1d5      	bne.n	6000699a <dma_mcux_edma_configure+0x1ce>
	if (config->dest_chaining_en) {
600069ee:	78a3      	ldrb	r3, [r4, #2]
600069f0:	06da      	lsls	r2, r3, #27
600069f2:	d508      	bpl.n	60006a06 <dma_mcux_edma_configure+0x23a>
				    config->linked_channel);
600069f4:	8863      	ldrh	r3, [r4, #2]
		EDMA_SetChannelLink(DEV_BASE(dev), channel, kEDMA_MajorLink,
600069f6:	2202      	movs	r2, #2
600069f8:	6870      	ldr	r0, [r6, #4]
600069fa:	4629      	mov	r1, r5
600069fc:	f3c3 1346 	ubfx	r3, r3, #5, #7
60006a00:	6800      	ldr	r0, [r0, #0]
60006a02:	f003 ff10 	bl	6000a826 <EDMA_SetChannelLink>
	if (config->source_chaining_en) {
60006a06:	78a3      	ldrb	r3, [r4, #2]
60006a08:	071b      	lsls	r3, r3, #28
60006a0a:	d508      	bpl.n	60006a1e <dma_mcux_edma_configure+0x252>
				    config->linked_channel);
60006a0c:	8863      	ldrh	r3, [r4, #2]
		EDMA_SetChannelLink(DEV_BASE(dev), channel, kEDMA_MinorLink,
60006a0e:	2201      	movs	r2, #1
60006a10:	6870      	ldr	r0, [r6, #4]
60006a12:	4629      	mov	r1, r5
60006a14:	f3c3 1346 	ubfx	r3, r3, #5, #7
60006a18:	6800      	ldr	r0, [r0, #0]
60006a1a:	f003 ff04 	bl	6000a826 <EDMA_SetChannelLink>
	data->busy = false;
60006a1e:	2354      	movs	r3, #84	; 0x54
60006a20:	fb03 8805 	mla	r8, r3, r5, r8
60006a24:	2300      	movs	r3, #0
60006a26:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
	if (config->dma_callback) {
60006a2a:	69a3      	ldr	r3, [r4, #24]
60006a2c:	b13b      	cbz	r3, 60006a3e <dma_mcux_edma_configure+0x272>
		data->user_data = config->user_data;
60006a2e:	6963      	ldr	r3, [r4, #20]
60006a30:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
		data->dma_callback = config->dma_callback;
60006a34:	69a3      	ldr	r3, [r4, #24]
		data->dev = dev;
60006a36:	f8c8 603c 	str.w	r6, [r8, #60]	; 0x3c
		data->dma_callback = config->dma_callback;
60006a3a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
	__asm__ volatile(
60006a3e:	687b      	ldr	r3, [r7, #4]
60006a40:	f383 8811 	msr	BASEPRI, r3
60006a44:	f3bf 8f6f 	isb	sy
	return ret;
60006a48:	e6ed      	b.n	60006826 <dma_mcux_edma_configure+0x5a>
		DMAMUX_SetSource(DEV_DMAMUX_BASE(dev), channel, slot);
60006a4a:	6859      	ldr	r1, [r3, #4]
    base->CHCFG[channel] = ((base->CHCFG[channel] & ~DMAMUX_CHCFG_SOURCE_MASK) | DMAMUX_CHCFG_SOURCE(source));
60006a4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
60006a50:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
60006a54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60006a58:	431a      	orrs	r2, r3
60006a5a:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
}
60006a5e:	e768      	b.n	60006932 <dma_mcux_edma_configure+0x166>
		EDMA_PrepareTransfer(&(data->transferConfig),
60006a60:	68bb      	ldr	r3, [r7, #8]
60006a62:	88a2      	ldrh	r2, [r4, #4]
60006a64:	9303      	str	r3, [sp, #12]
60006a66:	f8d9 3014 	ldr.w	r3, [r9, #20]
60006a6a:	9302      	str	r3, [sp, #8]
60006a6c:	8923      	ldrh	r3, [r4, #8]
60006a6e:	9301      	str	r3, [sp, #4]
60006a70:	88e3      	ldrh	r3, [r4, #6]
60006a72:	9300      	str	r3, [sp, #0]
60006a74:	68f8      	ldr	r0, [r7, #12]
60006a76:	e9d9 1300 	ldrd	r1, r3, [r9]
60006a7a:	f003 ff1f 	bl	6000a8bc <EDMA_PrepareTransfer>
			EDMA_SubmitTransfer(p_handle, &(data->transferConfig));
60006a7e:	68f9      	ldr	r1, [r7, #12]
60006a80:	4658      	mov	r0, fp
60006a82:	f003 ff3c 	bl	6000a8fe <EDMA_SubmitTransfer>
		if (submit_status != kStatus_Success) {
60006a86:	4682      	mov	sl, r0
60006a88:	2800      	cmp	r0, #0
60006a8a:	d0b0      	beq.n	600069ee <dma_mcux_edma_configure+0x222>
			LOG_ERR("Error submitting EDMA Transfer: 0x%x", submit_status);
60006a8c:	46e9      	mov	r9, sp
60006a8e:	b088      	sub	sp, #32
60006a90:	aa04      	add	r2, sp, #16
60006a92:	4b11      	ldr	r3, [pc, #68]	; (60006ad8 <dma_mcux_edma_configure+0x30c>)
60006a94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			ret = -EFAULT;
60006a98:	f06f 0a0d 	mvn.w	sl, #13
			LOG_ERR("Error submitting EDMA Transfer: 0x%x", submit_status);
60006a9c:	e9c2 3005 	strd	r3, r0, [r2, #20]
60006aa0:	2303      	movs	r3, #3
60006aa2:	4804      	ldr	r0, [pc, #16]	; (60006ab4 <dma_mcux_edma_configure+0x2e8>)
60006aa4:	f842 3f10 	str.w	r3, [r2, #16]!
60006aa8:	f003 fa90 	bl	60009fcc <z_log_msg_static_create.constprop.0>
60006aac:	46cd      	mov	sp, r9
			ret = -EFAULT;
60006aae:	e79e      	b.n	600069ee <dma_mcux_edma_configure+0x222>
60006ab0:	6000c9aa 	.word	0x6000c9aa
60006ab4:	6000b860 	.word	0x6000b860
60006ab8:	6000c9ca 	.word	0x6000c9ca
60006abc:	6000cb04 	.word	0x6000cb04
60006ac0:	6000c9ff 	.word	0x6000c9ff
60006ac4:	6000c9e0 	.word	0x6000c9e0
60006ac8:	6000ca1a 	.word	0x6000ca1a
60006acc:	6000ca33 	.word	0x6000ca33
60006ad0:	60009d65 	.word	0x60009d65
60006ad4:	80000000 	.word	0x80000000
60006ad8:	6000ca5a 	.word	0x6000ca5a

60006adc <dma_mcux_edma_reload>:
{
60006adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
60006ae0:	b08b      	sub	sp, #44	; 0x2c
60006ae2:	460c      	mov	r4, r1
60006ae4:	4680      	mov	r8, r0
60006ae6:	4611      	mov	r1, r2
60006ae8:	af04      	add	r7, sp, #16
	struct call_back *data = DEV_CHANNEL_DATA(dev, channel);
60006aea:	6905      	ldr	r5, [r0, #16]
	__asm__ volatile(
60006aec:	f04f 0210 	mov.w	r2, #16
60006af0:	f3ef 8611 	mrs	r6, BASEPRI
60006af4:	f382 8812 	msr	BASEPRI_MAX, r2
60006af8:	f3bf 8f6f 	isb	sy
	if (!data->transfer_settings.valid) {
60006afc:	f04f 0c54 	mov.w	ip, #84	; 0x54
60006b00:	fb0c 5c04 	mla	ip, ip, r4, r5
60006b04:	f89c 205a 	ldrb.w	r2, [ip, #90]	; 0x5a
60006b08:	b96a      	cbnz	r2, 60006b26 <dma_mcux_edma_reload+0x4a>
		LOG_ERR("Invalid EDMA settings on initial config. Configure DMA before reload.");
60006b0a:	4b2a      	ldr	r3, [pc, #168]	; (60006bb4 <dma_mcux_edma_reload+0xd8>)
60006b0c:	f107 0210 	add.w	r2, r7, #16
60006b10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006b14:	4828      	ldr	r0, [pc, #160]	; (60006bb8 <dma_mcux_edma_reload+0xdc>)
60006b16:	617b      	str	r3, [r7, #20]
60006b18:	2302      	movs	r3, #2
60006b1a:	613b      	str	r3, [r7, #16]
60006b1c:	f003 fa56 	bl	60009fcc <z_log_msg_static_create.constprop.0>
		ret = -EFAULT;
60006b20:	f06f 000d 	mvn.w	r0, #13
60006b24:	e012      	b.n	60006b4c <dma_mcux_edma_reload+0x70>
	if (data->busy && data->edma_handle.tcdPool == NULL) {
60006b26:	f89c 205c 	ldrb.w	r2, [ip, #92]	; 0x5c
60006b2a:	b1ba      	cbz	r2, 60006b5c <dma_mcux_edma_reload+0x80>
60006b2c:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
60006b30:	b9a2      	cbnz	r2, 60006b5c <dma_mcux_edma_reload+0x80>
		LOG_ERR("EDMA busy. Wait until the transfer completes before reloading.");
60006b32:	4b22      	ldr	r3, [pc, #136]	; (60006bbc <dma_mcux_edma_reload+0xe0>)
60006b34:	f107 0210 	add.w	r2, r7, #16
60006b38:	481f      	ldr	r0, [pc, #124]	; (60006bb8 <dma_mcux_edma_reload+0xdc>)
60006b3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006b3e:	617b      	str	r3, [r7, #20]
60006b40:	2302      	movs	r3, #2
60006b42:	613b      	str	r3, [r7, #16]
60006b44:	f003 fa42 	bl	60009fcc <z_log_msg_static_create.constprop.0>
		ret = -EBUSY;
60006b48:	f06f 000f 	mvn.w	r0, #15
	__asm__ volatile(
60006b4c:	f386 8811 	msr	BASEPRI, r6
60006b50:	f3bf 8f6f 	isb	sy
}
60006b54:	371c      	adds	r7, #28
60006b56:	46bd      	mov	sp, r7
60006b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	EDMA_PrepareTransfer(
60006b5c:	2254      	movs	r2, #84	; 0x54
60006b5e:	4354      	muls	r4, r2
60006b60:	f104 090c 	add.w	r9, r4, #12
60006b64:	44a9      	add	r9, r5
60006b66:	4425      	add	r5, r4
		EDMA_SubmitTransfer(DEV_EDMA_HANDLE(dev, channel), &(data->transferConfig));
60006b68:	3424      	adds	r4, #36	; 0x24
	EDMA_PrepareTransfer(
60006b6a:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
60006b6e:	4648      	mov	r0, r9
60006b70:	9203      	str	r2, [sp, #12]
60006b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
60006b74:	9202      	str	r2, [sp, #8]
60006b76:	6d2a      	ldr	r2, [r5, #80]	; 0x50
60006b78:	9201      	str	r2, [sp, #4]
60006b7a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
60006b7c:	9200      	str	r2, [sp, #0]
60006b7e:	6caa      	ldr	r2, [r5, #72]	; 0x48
60006b80:	f003 fe9c 	bl	6000a8bc <EDMA_PrepareTransfer>
		EDMA_SubmitTransfer(DEV_EDMA_HANDLE(dev, channel), &(data->transferConfig));
60006b84:	f8d8 0010 	ldr.w	r0, [r8, #16]
60006b88:	4649      	mov	r1, r9
60006b8a:	4420      	add	r0, r4
60006b8c:	f003 feb7 	bl	6000a8fe <EDMA_SubmitTransfer>
	if (submit_status != kStatus_Success) {
60006b90:	2800      	cmp	r0, #0
60006b92:	d0db      	beq.n	60006b4c <dma_mcux_edma_reload+0x70>
		LOG_ERR("Error submitting EDMA Transfer: 0x%x", submit_status);
60006b94:	466c      	mov	r4, sp
60006b96:	b088      	sub	sp, #32
60006b98:	aa04      	add	r2, sp, #16
60006b9a:	4b09      	ldr	r3, [pc, #36]	; (60006bc0 <dma_mcux_edma_reload+0xe4>)
60006b9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60006ba0:	e9c2 3005 	strd	r3, r0, [r2, #20]
60006ba4:	2303      	movs	r3, #3
60006ba6:	4804      	ldr	r0, [pc, #16]	; (60006bb8 <dma_mcux_edma_reload+0xdc>)
60006ba8:	f842 3f10 	str.w	r3, [r2, #16]!
60006bac:	f003 fa0e 	bl	60009fcc <z_log_msg_static_create.constprop.0>
60006bb0:	46a5      	mov	sp, r4
		ret = -EFAULT;
60006bb2:	e7b5      	b.n	60006b20 <dma_mcux_edma_reload+0x44>
60006bb4:	6000ca7f 	.word	0x6000ca7f
60006bb8:	6000b860 	.word	0x6000b860
60006bbc:	6000cac5 	.word	0x6000cac5
60006bc0:	6000ca5a 	.word	0x6000ca5a

60006bc4 <imx_pinctrl_init>:
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
60006bc4:	4b12      	ldr	r3, [pc, #72]	; (60006c10 <imx_pinctrl_init+0x4c>)
60006bc6:	f103 0278 	add.w	r2, r3, #120	; 0x78
60006bca:	e852 2f00 	ldrex	r2, [r2]

static inline void _SDK_AtomicLocalClearAndSet4Byte(volatile uint32_t *addr, uint32_t clearBits, uint32_t setBits)
{
    uint32_t s_val;

    _SDK_ATOMIC_LOCAL_OPS_4BYTE(addr, s_val, s_val = (s_val & ~clearBits) | setBits);
60006bce:	f042 020c 	orr.w	r2, r2, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
60006bd2:	f103 0078 	add.w	r0, r3, #120	; 0x78
60006bd6:	e840 2100 	strex	r1, r2, [r0]
60006bda:	2900      	cmp	r1, #0
60006bdc:	d1f3      	bne.n	60006bc6 <imx_pinctrl_init+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
60006bde:	f103 0270 	add.w	r2, r3, #112	; 0x70
60006be2:	e852 2f00 	ldrex	r2, [r2]
60006be6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
60006bea:	f103 0070 	add.w	r0, r3, #112	; 0x70
60006bee:	e840 2100 	strex	r1, r2, [r0]
60006bf2:	2900      	cmp	r1, #0
60006bf4:	d1f3      	bne.n	60006bde <imx_pinctrl_init+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
60006bf6:	f103 0278 	add.w	r2, r3, #120	; 0x78
60006bfa:	e852 2f00 	ldrex	r2, [r2]
60006bfe:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
60006c02:	f103 0178 	add.w	r1, r3, #120	; 0x78
60006c06:	e841 2000 	strex	r0, r2, [r1]
60006c0a:	2800      	cmp	r0, #0
60006c0c:	d1f3      	bne.n	60006bf6 <imx_pinctrl_init+0x32>
#elif defined(CONFIG_SOC_MIMX8MQ6)
	CLOCK_EnableClock(kCLOCK_Iomux);
#endif /* CONFIG_SOC_SERIES_IMX_RT */

	return 0;
}
60006c0e:	4770      	bx	lr
60006c10:	400fc000 	.word	0x400fc000

60006c14 <spi_mcux_dma_callback>:
#ifdef CONFIG_SPI_MCUX_LPSPI_DMA

/* This function is executed in the interrupt context */
static void spi_mcux_dma_callback(const struct device *dev, void *arg,
			 uint32_t channel, int status)
{
60006c14:	b5b0      	push	{r4, r5, r7, lr}
60006c16:	4610      	mov	r0, r2
60006c18:	af00      	add	r7, sp, #0
	/* arg directly holds the spi device */
	const struct device *spi_dev = arg;
	struct spi_mcux_data *data = (struct spi_mcux_data *)spi_dev->data;
60006c1a:	690c      	ldr	r4, [r1, #16]

	if (status != 0) {
60006c1c:	b19b      	cbz	r3, 60006c46 <spi_mcux_dma_callback+0x32>
		LOG_ERR("DMA callback error with channel %d.", channel);
60006c1e:	466d      	mov	r5, sp
60006c20:	b088      	sub	sp, #32
60006c22:	466a      	mov	r2, sp
60006c24:	4b18      	ldr	r3, [pc, #96]	; (60006c88 <spi_mcux_dma_callback+0x74>)
		} else if (channel == data->dma_rx.channel) {
			/* this part of the transfer ends */
			data->status_flags |= SPI_MCUX_LPSPI_DMA_RX_DONE_FLAG;
			LOG_DBG("DMA RX Block Complete");
		} else {
			LOG_ERR("DMA callback channel %d is not valid.",
60006c26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
60006c2a:	e9c2 3005 	strd	r3, r0, [r2, #20]
60006c2e:	2303      	movs	r3, #3
60006c30:	4816      	ldr	r0, [pc, #88]	; (60006c8c <spi_mcux_dma_callback+0x78>)
60006c32:	f842 3f10 	str.w	r3, [r2, #16]!
60006c36:	f003 fcce 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
								channel);
			data->status_flags |= SPI_MCUX_LPSPI_DMA_ERROR_FLAG;
60006c3a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
60006c3e:	46ad      	mov	sp, r5
60006c40:	f043 0301 	orr.w	r3, r3, #1
60006c44:	e007      	b.n	60006c56 <spi_mcux_dma_callback+0x42>
		if (channel == data->dma_tx.channel) {
60006c46:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
60006c4a:	4293      	cmp	r3, r2
60006c4c:	d10d      	bne.n	60006c6a <spi_mcux_dma_callback+0x56>
			data->status_flags |= SPI_MCUX_LPSPI_DMA_TX_DONE_FLAG;
60006c4e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
60006c52:	f043 0304 	orr.w	r3, r3, #4
			data->status_flags |= SPI_MCUX_LPSPI_DMA_ERROR_FLAG;
60006c56:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			ctx->owner = NULL;
			k_sem_give(&ctx->lock);
		}
	}
#else
	ctx->sync_status = status;
60006c5a:	2300      	movs	r3, #0
60006c5c:	66e3      	str	r3, [r4, #108]	; 0x6c
60006c5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
60006c62:	f001 fe6b 	bl	6000893c <z_impl_k_sem_give>
		}
	}
	spi_context_complete(&data->ctx, spi_dev, 0);
}
60006c66:	46bd      	mov	sp, r7
60006c68:	bdb0      	pop	{r4, r5, r7, pc}
		} else if (channel == data->dma_rx.channel) {
60006c6a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
60006c6e:	4293      	cmp	r3, r2
60006c70:	d104      	bne.n	60006c7c <spi_mcux_dma_callback+0x68>
			data->status_flags |= SPI_MCUX_LPSPI_DMA_RX_DONE_FLAG;
60006c72:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
60006c76:	f043 0302 	orr.w	r3, r3, #2
60006c7a:	e7ec      	b.n	60006c56 <spi_mcux_dma_callback+0x42>
			LOG_ERR("DMA callback channel %d is not valid.",
60006c7c:	466d      	mov	r5, sp
60006c7e:	b088      	sub	sp, #32
60006c80:	466a      	mov	r2, sp
60006c82:	4b03      	ldr	r3, [pc, #12]	; (60006c90 <spi_mcux_dma_callback+0x7c>)
60006c84:	e7cf      	b.n	60006c26 <spi_mcux_dma_callback+0x12>
60006c86:	bf00      	nop
60006c88:	6000cb87 	.word	0x6000cb87
60006c8c:	6000b890 	.word	0x6000b890
60006c90:	6000cbab 	.word	0x6000cbab

60006c94 <spi_mcux_transceive>:

static int spi_mcux_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
60006c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60006c98:	b099      	sub	sp, #100	; 0x64
60006c9a:	461e      	mov	r6, r3
60006c9c:	4680      	mov	r8, r0
60006c9e:	460d      	mov	r5, r1
	LPSPI_Type *base = config->base;
60006ca0:	6843      	ldr	r3, [r0, #4]
{
60006ca2:	af00      	add	r7, sp, #0
	struct spi_mcux_data *data = dev->data;
60006ca4:	6904      	ldr	r4, [r0, #16]
	LPSPI_Type *base = config->base;
60006ca6:	681b      	ldr	r3, [r3, #0]
{
60006ca8:	623a      	str	r2, [r7, #32]
	LPSPI_Type *base = config->base;
60006caa:	627b      	str	r3, [r7, #36]	; 0x24
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
60006cac:	888b      	ldrh	r3, [r1, #4]
60006cae:	0498      	lsls	r0, r3, #18
60006cb0:	d432      	bmi.n	60006d18 <spi_mcux_transceive+0x84>
	return z_impl_k_sem_take(sem, timeout);
60006cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60006cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
60006cba:	f104 004c 	add.w	r0, r4, #76	; 0x4c
60006cbe:	f001 fe5f 	bl	60008980 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
60006cc2:	6425      	str	r5, [r4, #64]	; 0x40
	struct spi_mcux_data *data = dev->data;
60006cc4:	f8d8 a010 	ldr.w	sl, [r8, #16]
	const struct spi_mcux_config *config = dev->config;
60006cc8:	f8d8 b004 	ldr.w	fp, [r8, #4]
	if (spi_context_configured(&data->ctx, spi_cfg)) {
60006ccc:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
60006cd0:	429d      	cmp	r5, r3
60006cd2:	f000 8099 	beq.w	60006e08 <spi_mcux_transceive+0x174>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
60006cd6:	88ab      	ldrh	r3, [r5, #4]
	LPSPI_Type *base = config->base;
60006cd8:	f8db 9000 	ldr.w	r9, [fp]
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
60006cdc:	0519      	lsls	r1, r3, #20
60006cde:	d522      	bpl.n	60006d26 <spi_mcux_transceive+0x92>
		LOG_ERR("Half-duplex not supported");
60006ce0:	4b78      	ldr	r3, [pc, #480]	; (60006ec4 <spi_mcux_transceive+0x230>)
		return -ENOTSUP;
60006ce2:	f06f 0b85 	mvn.w	fp, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
60006ce6:	f107 0250 	add.w	r2, r7, #80	; 0x50
60006cea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006cee:	657b      	str	r3, [r7, #84]	; 0x54
60006cf0:	2302      	movs	r3, #2
60006cf2:	4875      	ldr	r0, [pc, #468]	; (60006ec8 <spi_mcux_transceive+0x234>)
60006cf4:	653b      	str	r3, [r7, #80]	; 0x50
60006cf6:	f003 fc6e 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
60006cfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
60006cfc:	889b      	ldrh	r3, [r3, #4]
60006cfe:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
60006d02:	d104      	bne.n	60006d0e <spi_mcux_transceive+0x7a>
		ctx->owner = NULL;
60006d04:	6423      	str	r3, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
60006d06:	f104 004c 	add.w	r0, r4, #76	; 0x4c
60006d0a:	f001 fe17 	bl	6000893c <z_impl_k_sem_give>
#ifdef CONFIG_SPI_MCUX_LPSPI_DMA
	return transceive_dma(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
#endif /* CONFIG_SPI_MCUX_LPSPI_DMA */
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
60006d0e:	4658      	mov	r0, fp
60006d10:	3764      	adds	r7, #100	; 0x64
60006d12:	46bd      	mov	sp, r7
60006d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
60006d18:	6d63      	ldr	r3, [r4, #84]	; 0x54
60006d1a:	2b00      	cmp	r3, #0
60006d1c:	d1c9      	bne.n	60006cb2 <spi_mcux_transceive+0x1e>
		(k_sem_count_get(&ctx->lock) == 0) &&
60006d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
60006d20:	4299      	cmp	r1, r3
60006d22:	d1c6      	bne.n	60006cb2 <spi_mcux_transceive+0x1e>
60006d24:	e7ce      	b.n	60006cc4 <spi_mcux_transceive+0x30>
	LPSPI_MasterGetDefaultConfig(&master_config);
60006d26:	f107 0040 	add.w	r0, r7, #64	; 0x40
60006d2a:	f001 f80f 	bl	60007d4c <LPSPI_MasterGetDefaultConfig>
	if (spi_cfg->slave > CHIP_SELECT_COUNT) {
60006d2e:	88eb      	ldrh	r3, [r5, #6]
60006d30:	2b04      	cmp	r3, #4
60006d32:	d912      	bls.n	60006d5a <spi_mcux_transceive+0xc6>
		LOG_ERR("Slave %d is greater than %d",
60006d34:	466d      	mov	r5, sp
60006d36:	b088      	sub	sp, #32
60006d38:	466a      	mov	r2, sp
60006d3a:	4964      	ldr	r1, [pc, #400]	; (60006ecc <spi_mcux_transceive+0x238>)
60006d3c:	4862      	ldr	r0, [pc, #392]	; (60006ec8 <spi_mcux_transceive+0x234>)
60006d3e:	e9c2 1305 	strd	r1, r3, [r2, #20]
60006d42:	2304      	movs	r3, #4
60006d44:	f44f 5101 	mov.w	r1, #8256	; 0x2040
60006d48:	61d3      	str	r3, [r2, #28]
60006d4a:	f842 3f10 	str.w	r3, [r2, #16]!
60006d4e:	f003 fc42 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
60006d52:	46ad      	mov	sp, r5
		return -EINVAL;
60006d54:	f06f 0b15 	mvn.w	fp, #21
60006d58:	e7cf      	b.n	60006cfa <spi_mcux_transceive+0x66>
	word_size = SPI_WORD_SIZE_GET(spi_cfg->operation);
60006d5a:	88ab      	ldrh	r3, [r5, #4]
60006d5c:	f3c3 1245 	ubfx	r2, r3, #5, #6
	master_config.bitsPerFrame = word_size;
60006d60:	647a      	str	r2, [r7, #68]	; 0x44
		: kLPSPI_ClockPolarityActiveHigh;
60006d62:	f3c3 0240 	ubfx	r2, r3, #1, #1
	master_config.cpol =
60006d66:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
		: kLPSPI_ClockPhaseFirstEdge;
60006d6a:	f3c3 0280 	ubfx	r2, r3, #2, #1
		: kLPSPI_MsbFirst;
60006d6e:	f3c3 1300 	ubfx	r3, r3, #4, #1
	master_config.cpha =
60006d72:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
	master_config.direction =
60006d76:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	master_config.baudRate = spi_cfg->frequency;
60006d7a:	682b      	ldr	r3, [r5, #0]
60006d7c:	643b      	str	r3, [r7, #64]	; 0x40
	master_config.pcsToSckDelayInNanoSec = config->pcs_sck_delay;
60006d7e:	f8db 3010 	ldr.w	r3, [fp, #16]
60006d82:	64fb      	str	r3, [r7, #76]	; 0x4c
	master_config.lastSckToPcsDelayInNanoSec = config->sck_pcs_delay;
60006d84:	f8db 3014 	ldr.w	r3, [fp, #20]
60006d88:	653b      	str	r3, [r7, #80]	; 0x50
	master_config.betweenTransferDelayInNanoSec = config->transfer_delay;
60006d8a:	f8db 3018 	ldr.w	r3, [fp, #24]
60006d8e:	657b      	str	r3, [r7, #84]	; 0x54
	if (!device_is_ready(config->clock_dev)) {
60006d90:	f8db 0004 	ldr.w	r0, [fp, #4]
60006d94:	f004 f8f9 	bl	6000af8a <z_device_is_ready>
60006d98:	b968      	cbnz	r0, 60006db6 <spi_mcux_transceive+0x122>
		LOG_ERR("clock control device not ready");
60006d9a:	4b4d      	ldr	r3, [pc, #308]	; (60006ed0 <spi_mcux_transceive+0x23c>)
60006d9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
60006da0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60006da4:	4848      	ldr	r0, [pc, #288]	; (60006ec8 <spi_mcux_transceive+0x234>)
60006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
60006da8:	2302      	movs	r3, #2
		return -ENODEV;
60006daa:	f06f 0b12 	mvn.w	fp, #18
		LOG_ERR("clock control device not ready");
60006dae:	63bb      	str	r3, [r7, #56]	; 0x38
60006db0:	f003 fc11 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
	if (ret) {
60006db4:	e7a1      	b.n	60006cfa <spi_mcux_transceive+0x66>
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
60006db6:	e9db 0101 	ldrd	r0, r1, [fp, #4]
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
60006dba:	6883      	ldr	r3, [r0, #8]
60006dbc:	68db      	ldr	r3, [r3, #12]
60006dbe:	2b00      	cmp	r3, #0
60006dc0:	d0c8      	beq.n	60006d54 <spi_mcux_transceive+0xc0>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
60006dc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
60006dc6:	4798      	blx	r3
60006dc8:	2800      	cmp	r0, #0
60006dca:	d1c3      	bne.n	60006d54 <spi_mcux_transceive+0xc0>
    {
        base->CR |= LPSPI_CR_MEN_MASK;
    }
    else
    {
        base->CR &= ~LPSPI_CR_MEN_MASK;
60006dcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
60006dd0:	f023 0301 	bic.w	r3, r3, #1
60006dd4:	f8c9 3010 	str.w	r3, [r9, #16]
	while ((base->CR & LPSPI_CR_MEN_MASK) != 0U) {
60006dd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
60006ddc:	f013 0b01 	ands.w	fp, r3, #1
60006de0:	d1fa      	bne.n	60006dd8 <spi_mcux_transceive+0x144>
	LPSPI_MasterInit(base, &master_config, clock_freq);
60006de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
60006de4:	f107 0140 	add.w	r1, r7, #64	; 0x40
60006de8:	4648      	mov	r0, r9
60006dea:	f001 f815 	bl	60007e18 <LPSPI_MasterInit>
	LPSPI_MasterTransferCreateHandle(base, &data->handle,
60006dee:	4653      	mov	r3, sl
60006df0:	4a38      	ldr	r2, [pc, #224]	; (60006ed4 <spi_mcux_transceive+0x240>)
60006df2:	f10a 0104 	add.w	r1, sl, #4
60006df6:	4648      	mov	r0, r9
60006df8:	f001 f882 	bl	60007f00 <LPSPI_MasterTransferCreateHandle>
	LPSPI_SetDummyData(base, 0);
60006dfc:	4659      	mov	r1, fp
60006dfe:	4648      	mov	r0, r9
60006e00:	f000 ff9c 	bl	60007d3c <LPSPI_SetDummyData>
	data->ctx.config = spi_cfg;
60006e04:	f8ca 503c 	str.w	r5, [sl, #60]	; 0x3c
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
60006e08:	6a3b      	ldr	r3, [r7, #32]
60006e0a:	2b00      	cmp	r3, #0
60006e0c:	d145      	bne.n	60006e9a <spi_mcux_transceive+0x206>
60006e0e:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
60006e10:	2300      	movs	r3, #0
60006e12:	6763      	str	r3, [r4, #116]	; 0x74
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
60006e14:	f104 0370 	add.w	r3, r4, #112	; 0x70
60006e18:	f104 0174 	add.w	r1, r4, #116	; 0x74
60006e1c:	f104 0070 	add.w	r0, r4, #112	; 0x70
60006e20:	61fb      	str	r3, [r7, #28]
60006e22:	f104 0374 	add.w	r3, r4, #116	; 0x74
60006e26:	61bb      	str	r3, [r7, #24]
60006e28:	f104 0384 	add.w	r3, r4, #132	; 0x84
60006e2c:	461a      	mov	r2, r3
60006e2e:	617b      	str	r3, [r7, #20]
60006e30:	f003 fbbe 	bl	6000a5b0 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
60006e34:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
60006e38:	2e00      	cmp	r6, #0
60006e3a:	d136      	bne.n	60006eaa <spi_mcux_transceive+0x216>
60006e3c:	67a6      	str	r6, [r4, #120]	; 0x78
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
60006e3e:	2300      	movs	r3, #0
60006e40:	67e3      	str	r3, [r4, #124]	; 0x7c
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
60006e42:	f104 0378 	add.w	r3, r4, #120	; 0x78
	spi_context_lock(&data->ctx, asynchronous, cb, userdata, spi_cfg);
60006e46:	f104 023c 	add.w	r2, r4, #60	; 0x3c
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
60006e4a:	2500      	movs	r5, #0
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
60006e4c:	613b      	str	r3, [r7, #16]
60006e4e:	f104 037c 	add.w	r3, r4, #124	; 0x7c
60006e52:	f104 017c 	add.w	r1, r4, #124	; 0x7c
60006e56:	623a      	str	r2, [r7, #32]
60006e58:	60fb      	str	r3, [r7, #12]
60006e5a:	f104 038c 	add.w	r3, r4, #140	; 0x8c
60006e5e:	f104 0078 	add.w	r0, r4, #120	; 0x78
60006e62:	461a      	mov	r2, r3
60006e64:	60bb      	str	r3, [r7, #8]
60006e66:	f003 fba3 	bl	6000a5b0 <spi_context_get_next_buf.constprop.0>
	_spi_context_cs_control(ctx, on, false);
60006e6a:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
60006e6c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	_spi_context_cs_control(ctx, on, false);
60006e70:	2101      	movs	r1, #1
60006e72:	f104 003c 	add.w	r0, r4, #60	; 0x3c
	ctx->sync_status = 0;
60006e76:	66e5      	str	r5, [r4, #108]	; 0x6c
	_spi_context_cs_control(ctx, on, false);
60006e78:	f003 fbc4 	bl	6000a604 <_spi_context_cs_control>
 * @param txWater The TX FIFO watermark value. Writing a value equal or greater than the FIFO size is truncated.
 * @param rxWater The RX FIFO watermark value. Writing a value equal or greater than the FIFO size is truncated.
 */
static inline void LPSPI_SetFifoWatermarks(LPSPI_Type *base, uint32_t txWater, uint32_t rxWater)
{
    base->FCR = LPSPI_FCR_TXWATER(txWater) | LPSPI_FCR_RXWATER(rxWater);
60006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
60006e7e:	659d      	str	r5, [r3, #88]	; 0x58
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
60006e80:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		dma_size = MIN(data->ctx.tx_len, data->ctx.rx_len);
60006e84:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
60006e88:	bb33      	cbnz	r3, 60006ed8 <spi_mcux_transceive+0x244>
60006e8a:	b9a5      	cbnz	r5, 60006eb6 <spi_mcux_transceive+0x222>
60006e8c:	462a      	mov	r2, r5
60006e8e:	4629      	mov	r1, r5
60006e90:	6a38      	ldr	r0, [r7, #32]
}
60006e92:	46ab      	mov	fp, r5
	_spi_context_cs_control(ctx, on, false);
60006e94:	f003 fbb6 	bl	6000a604 <_spi_context_cs_control>
}
60006e98:	e72f      	b.n	60006cfa <spi_mcux_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
60006e9a:	6a3b      	ldr	r3, [r7, #32]
60006e9c:	681b      	ldr	r3, [r3, #0]
60006e9e:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
60006ea0:	2b00      	cmp	r3, #0
60006ea2:	d0b5      	beq.n	60006e10 <spi_mcux_transceive+0x17c>
60006ea4:	6a3b      	ldr	r3, [r7, #32]
60006ea6:	685b      	ldr	r3, [r3, #4]
60006ea8:	e7b3      	b.n	60006e12 <spi_mcux_transceive+0x17e>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
60006eaa:	6833      	ldr	r3, [r6, #0]
60006eac:	67a3      	str	r3, [r4, #120]	; 0x78
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
60006eae:	2b00      	cmp	r3, #0
60006eb0:	d0c5      	beq.n	60006e3e <spi_mcux_transceive+0x1aa>
60006eb2:	6873      	ldr	r3, [r6, #4]
60006eb4:	e7c4      	b.n	60006e40 <spi_mcux_transceive+0x1ac>
		data->status_flags = 0U;
60006eb6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			dma_size = MAX(data->ctx.tx_len, data->ctx.rx_len);
60006eba:	42ab      	cmp	r3, r5
60006ebc:	bf38      	it	cc
60006ebe:	462b      	movcc	r3, r5
60006ec0:	461e      	mov	r6, r3
60006ec2:	e013      	b.n	60006eec <spi_mcux_transceive+0x258>
60006ec4:	6000cbd1 	.word	0x6000cbd1
60006ec8:	6000b890 	.word	0x6000b890
60006ecc:	6000cbeb 	.word	0x6000cbeb
60006ed0:	6000cc07 	.word	0x6000cc07
60006ed4:	60007191 	.word	0x60007191
		dma_size = MIN(data->ctx.tx_len, data->ctx.rx_len);
60006ed8:	42ab      	cmp	r3, r5
		data->status_flags = 0U;
60006eda:	f04f 0200 	mov.w	r2, #0
		dma_size = MIN(data->ctx.tx_len, data->ctx.rx_len);
60006ede:	461e      	mov	r6, r3
60006ee0:	bf28      	it	cs
60006ee2:	462e      	movcs	r6, r5
		data->status_flags = 0U;
60006ee4:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
		if (dma_size == 0) {
60006ee8:	2e00      	cmp	r6, #0
60006eea:	d0e6      	beq.n	60006eba <spi_mcux_transceive+0x226>
	struct spi_mcux_data *data = dev->data;
60006eec:	f8d8 5010 	ldr.w	r5, [r8, #16]
	memset(blk_cfg, 0, sizeof(struct dma_block_config));
60006ef0:	2220      	movs	r2, #32
		ret = spi_mcux_dma_tx_load(dev, data->ctx.tx_buf, dma_size);
60006ef2:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
	memset(blk_cfg, 0, sizeof(struct dma_block_config));
60006ef6:	2100      	movs	r1, #0
	blk_cfg = &stream->dma_blk_cfg;
60006ef8:	f505 7a80 	add.w	sl, r5, #256	; 0x100
	LPSPI_Type *base = cfg->base;
60006efc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	memset(blk_cfg, 0, sizeof(struct dma_block_config));
60006f00:	4650      	mov	r0, sl
	LPSPI_Type *base = cfg->base;
60006f02:	f8d3 9000 	ldr.w	r9, [r3]
	memset(blk_cfg, 0, sizeof(struct dma_block_config));
60006f06:	f002 ff1b 	bl	60009d40 <memset>
	if (buf == NULL) {
60006f0a:	f1bb 0f00 	cmp.w	fp, #0
60006f0e:	f040 80b1 	bne.w	60007074 <spi_mcux_transceive+0x3e0>
		blk_cfg->source_address = (uint32_t)&data->dummy_tx_buffer;
60006f12:	f505 7390 	add.w	r3, r5, #288	; 0x120
		stream->dma_cfg.channel_direction = PERIPHERAL_TO_PERIPHERAL;
60006f16:	2203      	movs	r2, #3
		blk_cfg->source_address = (uint32_t)&data->dummy_tx_buffer;
60006f18:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
		stream->dma_cfg.channel_direction = PERIPHERAL_TO_PERIPHERAL;
60006f1c:	f895 30e5 	ldrb.w	r3, [r5, #229]	; 0xe5
	return dma_config(data->dma_tx.dma_dev, data->dma_tx.channel,
60006f20:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
		stream->dma_cfg.channel_direction = PERIPHERAL_TO_PERIPHERAL;
60006f24:	f362 0302 	bfi	r3, r2, #0, #3
	blk_cfg->block_size = len;
60006f28:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
			     struct dma_config *config)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->config(dev, channel, config);
60006f2c:	f105 02e4 	add.w	r2, r5, #228	; 0xe4
60006f30:	f8d5 10e0 	ldr.w	r1, [r5, #224]	; 0xe0
		stream->dma_cfg.channel_direction = PERIPHERAL_TO_PERIPHERAL;
60006f34:	f885 30e5 	strb.w	r3, [r5, #229]	; 0xe5
	blk_cfg->source_gather_en = 1;
60006f38:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
60006f3c:	f043 0301 	orr.w	r3, r3, #1
60006f40:	f885 311c 	strb.w	r3, [r5, #284]	; 0x11c
    return (uint32_t) & (base->TDR);
60006f44:	f109 0364 	add.w	r3, r9, #100	; 0x64
	blk_cfg->dest_address = LPSPI_GetTxRegisterAddress(base);
60006f48:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
	stream->dma_cfg.source_burst_length = 1;
60006f4c:	f04f 0301 	mov.w	r3, #1
	stream->dma_cfg.user_data = (struct device *)dev;
60006f50:	e9c5 a83d 	strd	sl, r8, [r5, #244]	; 0xf4
	stream->dma_cfg.source_burst_length = 1;
60006f54:	f8a5 30ec 	strh.w	r3, [r5, #236]	; 0xec
60006f58:	6883      	ldr	r3, [r0, #8]
60006f5a:	681b      	ldr	r3, [r3, #0]
60006f5c:	4798      	blx	r3
		if (ret != 0) {
60006f5e:	4683      	mov	fp, r0
60006f60:	2800      	cmp	r0, #0
60006f62:	f47f aeca 	bne.w	60006cfa <spi_mcux_transceive+0x66>
	struct spi_mcux_data *data = dev->data;
60006f66:	f8d8 5010 	ldr.w	r5, [r8, #16]
	memset(blk_cfg, 0, sizeof(struct dma_block_config));
60006f6a:	4601      	mov	r1, r0
	LPSPI_Type *base = cfg->base;
60006f6c:	f8d8 2004 	ldr.w	r2, [r8, #4]
	blk_cfg = &stream->dma_blk_cfg;
60006f70:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
		ret = spi_mcux_dma_rx_load(dev, data->ctx.rx_buf, dma_size);
60006f74:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
	LPSPI_Type *base = cfg->base;
60006f78:	f8d2 9000 	ldr.w	r9, [r2]
	memset(blk_cfg, 0, sizeof(struct dma_block_config));
60006f7c:	2220      	movs	r2, #32
60006f7e:	4650      	mov	r0, sl
		ret = spi_mcux_dma_rx_load(dev, data->ctx.rx_buf, dma_size);
60006f80:	607b      	str	r3, [r7, #4]
	memset(blk_cfg, 0, sizeof(struct dma_block_config));
60006f82:	f002 fedd 	bl	60009d40 <memset>
	if (buf == NULL) {
60006f86:	687b      	ldr	r3, [r7, #4]
60006f88:	2b00      	cmp	r3, #0
60006f8a:	d176      	bne.n	6000707a <spi_mcux_transceive+0x3e6>
		blk_cfg->dest_address = (uint32_t)&data->dummy_rx_buffer;
60006f8c:	f505 7392 	add.w	r3, r5, #292	; 0x124
		stream->dma_cfg.channel_direction = PERIPHERAL_TO_PERIPHERAL;
60006f90:	2203      	movs	r2, #3
		blk_cfg->dest_address = (uint32_t)&data->dummy_rx_buffer;
60006f92:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		stream->dma_cfg.channel_direction = PERIPHERAL_TO_PERIPHERAL;
60006f96:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
	return dma_config(data->dma_rx.dma_dev, data->dma_rx.channel,
60006f9a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
		stream->dma_cfg.channel_direction = PERIPHERAL_TO_PERIPHERAL;
60006f9e:	f362 0302 	bfi	r3, r2, #0, #3
	blk_cfg->block_size = len;
60006fa2:	f8c5 60d0 	str.w	r6, [r5, #208]	; 0xd0
60006fa6:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
60006faa:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
		stream->dma_cfg.channel_direction = PERIPHERAL_TO_PERIPHERAL;
60006fae:	f885 30a1 	strb.w	r3, [r5, #161]	; 0xa1
	blk_cfg->dest_scatter_en = 1;
60006fb2:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
60006fb6:	f043 0302 	orr.w	r3, r3, #2
60006fba:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
    return (uint32_t) & (base->RDR);
60006fbe:	f109 0374 	add.w	r3, r9, #116	; 0x74
	blk_cfg->source_address = LPSPI_GetRxRegisterAddress(base);
60006fc2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	stream->dma_cfg.source_burst_length = 1;
60006fc6:	f04f 0301 	mov.w	r3, #1
	stream->dma_cfg.user_data = (struct device *)dev;
60006fca:	e9c5 a82c 	strd	sl, r8, [r5, #176]	; 0xb0
	stream->dma_cfg.source_burst_length = 1;
60006fce:	f8a5 30a8 	strh.w	r3, [r5, #168]	; 0xa8
60006fd2:	6883      	ldr	r3, [r0, #8]
60006fd4:	681b      	ldr	r3, [r3, #0]
60006fd6:	4798      	blx	r3
		if (ret != 0) {
60006fd8:	4683      	mov	fp, r0
60006fda:	2800      	cmp	r0, #0
60006fdc:	f47f ae8d 	bne.w	60006cfa <spi_mcux_transceive+0x66>
		ret = dma_start(data->dma_tx.dma_dev, data->dma_tx.channel);
60006fe0:	e9d4 0137 	ldrd	r0, r1, [r4, #220]	; 0xdc
static inline int z_impl_dma_start(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->start(dev, channel);
60006fe4:	6883      	ldr	r3, [r0, #8]
60006fe6:	689b      	ldr	r3, [r3, #8]
60006fe8:	4798      	blx	r3
		if (ret != 0) {
60006fea:	4683      	mov	fp, r0
60006fec:	2800      	cmp	r0, #0
60006fee:	f47f ae84 	bne.w	60006cfa <spi_mcux_transceive+0x66>
		ret = dma_start(data->dma_rx.dma_dev, data->dma_rx.channel);
60006ff2:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
60006ff6:	6883      	ldr	r3, [r0, #8]
60006ff8:	689b      	ldr	r3, [r3, #8]
60006ffa:	4798      	blx	r3
		if (ret != 0) {
60006ffc:	4683      	mov	fp, r0
60006ffe:	2800      	cmp	r0, #0
60007000:	f47f ae7b 	bne.w	60006cfa <spi_mcux_transceive+0x66>
    base->DER |= mask;
60007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
60007006:	f44f 59fa 	mov.w	r9, #8000	; 0x1f40
6000700a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
6000700c:	f04f 0a0a 	mov.w	sl, #10
60007010:	69db      	ldr	r3, [r3, #28]
60007012:	f043 0303 	orr.w	r3, r3, #3
60007016:	61d3      	str	r3, [r2, #28]
		ret = wait_dma_rx_tx_done(dev);
60007018:	f8d8 5010 	ldr.w	r5, [r8, #16]
		if (k_sem_take(&ctx->sync, timeout)) {
6000701c:	f105 035c 	add.w	r3, r5, #92	; 0x5c
60007020:	607b      	str	r3, [r7, #4]
}

static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
60007022:	2100      	movs	r1, #0

	for (n = 0; n < ctx->tx_count; ++n) {
60007024:	6f68      	ldr	r0, [r5, #116]	; 0x74
60007026:	460a      	mov	r2, r1
60007028:	4282      	cmp	r2, r0
6000702a:	d128      	bne.n	6000707e <spi_mcux_transceive+0x3ea>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
6000702c:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
6000702e:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
60007032:	4618      	mov	r0, r3
60007034:	4560      	cmp	r0, ip
60007036:	d129      	bne.n	6000708c <spi_mcux_transceive+0x3f8>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
60007038:	428b      	cmp	r3, r1
6000703a:	bf38      	it	cc
6000703c:	460b      	movcc	r3, r1
6000703e:	fb09 f203 	mul.w	r2, r9, r3
				     ctx->config->frequency;
60007042:	6beb      	ldr	r3, [r5, #60]	; 0x3c
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
60007044:	681b      	ldr	r3, [r3, #0]
60007046:	fbb2 f2f3 	udiv	r2, r2, r3
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
6000704a:	32c8      	adds	r2, #200	; 0xc8
6000704c:	fba2 230a 	umull	r2, r3, r2, sl
	return z_impl_k_sem_take(sem, timeout);
60007050:	6878      	ldr	r0, [r7, #4]
60007052:	f001 fc95 	bl	60008980 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
60007056:	b300      	cbz	r0, 6000709a <spi_mcux_transceive+0x406>
			LOG_ERR("Timeout waiting for transfer complete");
60007058:	4b4a      	ldr	r3, [pc, #296]	; (60007184 <spi_mcux_transceive+0x4f0>)
6000705a:	f107 0250 	add.w	r2, r7, #80	; 0x50
6000705e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60007062:	4849      	ldr	r0, [pc, #292]	; (60007188 <spi_mcux_transceive+0x4f4>)
60007064:	657b      	str	r3, [r7, #84]	; 0x54
60007066:	2302      	movs	r3, #2
			return -ETIMEDOUT;
60007068:	f06f 0b73 	mvn.w	fp, #115	; 0x73
			LOG_ERR("Timeout waiting for transfer complete");
6000706c:	653b      	str	r3, [r7, #80]	; 0x50
6000706e:	f003 fab2 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
		if (ret != 0) {
60007072:	e642      	b.n	60006cfa <spi_mcux_transceive+0x66>
		blk_cfg->source_address = (uint32_t)buf;
60007074:	465b      	mov	r3, fp
60007076:	2201      	movs	r2, #1
60007078:	e74e      	b.n	60006f18 <spi_mcux_transceive+0x284>
		blk_cfg->dest_address = (uint32_t)buf;
6000707a:	2202      	movs	r2, #2
6000707c:	e789      	b.n	60006f92 <spi_mcux_transceive+0x2fe>
		total_len += ctx->current_tx[n].len;
6000707e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
60007080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
60007084:	3201      	adds	r2, #1
		total_len += ctx->current_tx[n].len;
60007086:	685b      	ldr	r3, [r3, #4]
60007088:	4419      	add	r1, r3
	for (n = 0; n < ctx->tx_count; ++n) {
6000708a:	e7cd      	b.n	60007028 <spi_mcux_transceive+0x394>
		total_len += ctx->current_rx[n].len;
6000708c:	6faa      	ldr	r2, [r5, #120]	; 0x78
6000708e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
60007092:	3001      	adds	r0, #1
		total_len += ctx->current_rx[n].len;
60007094:	6852      	ldr	r2, [r2, #4]
60007096:	4413      	add	r3, r2
	for (n = 0; n < ctx->rx_count; ++n) {
60007098:	e7cc      	b.n	60007034 <spi_mcux_transceive+0x3a0>
		status = ctx->sync_status;
6000709a:	f8d5 b06c 	ldr.w	fp, [r5, #108]	; 0x6c
		if (ret) {
6000709e:	f1bb 0f00 	cmp.w	fp, #0
600070a2:	f47f ae2a 	bne.w	60006cfa <spi_mcux_transceive+0x66>
		if (data->status_flags & SPI_MCUX_LPSPI_DMA_ERROR_FLAG) {
600070a6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
600070aa:	07da      	lsls	r2, r3, #31
600070ac:	d467      	bmi.n	6000717e <spi_mcux_transceive+0x4ea>
		if ((data->status_flags & SPI_MCUX_LPSPI_DMA_DONE_FLAG) ==
600070ae:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
600070b2:	f003 0306 	and.w	r3, r3, #6
600070b6:	2b06      	cmp	r3, #6
600070b8:	d1b3      	bne.n	60007022 <spi_mcux_transceive+0x38e>
    return (base->SR);
600070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600070bc:	695b      	ldr	r3, [r3, #20]
		while ((LPSPI_GetStatusFlags(base) & kLPSPI_ModuleBusyFlag)) {
600070be:	01db      	lsls	r3, r3, #7
600070c0:	d4fb      	bmi.n	600070ba <spi_mcux_transceive+0x426>
    base->DER &= ~mask;
600070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600070c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
600070c6:	69db      	ldr	r3, [r3, #28]
600070c8:	f023 0303 	bic.w	r3, r3, #3
600070cc:	61d3      	str	r3, [r2, #28]
	if (!ctx->tx_len) {
600070ce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600070d2:	b163      	cbz	r3, 600070ee <spi_mcux_transceive+0x45a>
	if (len > ctx->tx_len) {
600070d4:	429e      	cmp	r6, r3
600070d6:	d91d      	bls.n	60007114 <spi_mcux_transceive+0x480>
		LOG_ERR("Update exceeds current buffer");
600070d8:	4b2c      	ldr	r3, [pc, #176]	; (6000718c <spi_mcux_transceive+0x4f8>)
600070da:	f107 0250 	add.w	r2, r7, #80	; 0x50
600070de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600070e2:	4829      	ldr	r0, [pc, #164]	; (60007188 <spi_mcux_transceive+0x4f4>)
600070e4:	657b      	str	r3, [r7, #84]	; 0x54
600070e6:	2302      	movs	r3, #2
600070e8:	653b      	str	r3, [r7, #80]	; 0x50
600070ea:	f003 fa74 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
600070ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
600070f2:	2b00      	cmp	r3, #0
600070f4:	f43f aec4 	beq.w	60006e80 <spi_mcux_transceive+0x1ec>
	if (len > ctx->rx_len) {
600070f8:	429e      	cmp	r6, r3
600070fa:	d925      	bls.n	60007148 <spi_mcux_transceive+0x4b4>
		LOG_ERR("Update exceeds current buffer");
600070fc:	4b23      	ldr	r3, [pc, #140]	; (6000718c <spi_mcux_transceive+0x4f8>)
600070fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
60007102:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60007106:	4820      	ldr	r0, [pc, #128]	; (60007188 <spi_mcux_transceive+0x4f4>)
60007108:	657b      	str	r3, [r7, #84]	; 0x54
6000710a:	2302      	movs	r3, #2
6000710c:	653b      	str	r3, [r7, #80]	; 0x50
6000710e:	f003 fa62 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
		return;
60007112:	e6b5      	b.n	60006e80 <spi_mcux_transceive+0x1ec>
	ctx->tx_len -= len;
60007114:	1b9b      	subs	r3, r3, r6
60007116:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	if (!ctx->tx_len) {
6000711a:	b96b      	cbnz	r3, 60007138 <spi_mcux_transceive+0x4a4>
		++ctx->current_tx;
6000711c:	6f23      	ldr	r3, [r4, #112]	; 0x70
			spi_context_get_next_buf(&ctx->current_tx,
6000711e:	69f8      	ldr	r0, [r7, #28]
		++ctx->current_tx;
60007120:	3308      	adds	r3, #8
60007122:	6723      	str	r3, [r4, #112]	; 0x70
		--ctx->tx_count;
60007124:	6f63      	ldr	r3, [r4, #116]	; 0x74
60007126:	3b01      	subs	r3, #1
			spi_context_get_next_buf(&ctx->current_tx,
60007128:	e9d7 2105 	ldrd	r2, r1, [r7, #20]
		--ctx->tx_count;
6000712c:	6763      	str	r3, [r4, #116]	; 0x74
			spi_context_get_next_buf(&ctx->current_tx,
6000712e:	f003 fa3f 	bl	6000a5b0 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
60007132:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
60007136:	e7da      	b.n	600070ee <spi_mcux_transceive+0x45a>
	} else if (ctx->tx_buf) {
60007138:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
6000713c:	2b00      	cmp	r3, #0
6000713e:	d0d6      	beq.n	600070ee <spi_mcux_transceive+0x45a>
		ctx->tx_buf += dfs * len;
60007140:	4433      	add	r3, r6
60007142:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
60007146:	e7d2      	b.n	600070ee <spi_mcux_transceive+0x45a>
	ctx->rx_len -= len;
60007148:	1b9b      	subs	r3, r3, r6
6000714a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	if (!ctx->rx_len) {
6000714e:	b96b      	cbnz	r3, 6000716c <spi_mcux_transceive+0x4d8>
		++ctx->current_rx;
60007150:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			spi_context_get_next_buf(&ctx->current_rx,
60007152:	6938      	ldr	r0, [r7, #16]
		++ctx->current_rx;
60007154:	3308      	adds	r3, #8
60007156:	67a3      	str	r3, [r4, #120]	; 0x78
		--ctx->rx_count;
60007158:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
6000715a:	3b01      	subs	r3, #1
			spi_context_get_next_buf(&ctx->current_rx,
6000715c:	e9d7 2102 	ldrd	r2, r1, [r7, #8]
		--ctx->rx_count;
60007160:	67e3      	str	r3, [r4, #124]	; 0x7c
			spi_context_get_next_buf(&ctx->current_rx,
60007162:	f003 fa25 	bl	6000a5b0 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
60007166:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
6000716a:	e689      	b.n	60006e80 <spi_mcux_transceive+0x1ec>
	} else if (ctx->rx_buf) {
6000716c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
60007170:	2b00      	cmp	r3, #0
60007172:	f43f ae85 	beq.w	60006e80 <spi_mcux_transceive+0x1ec>
		ctx->rx_buf += dfs * len;
60007176:	4433      	add	r3, r6
60007178:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
6000717c:	e680      	b.n	60006e80 <spi_mcux_transceive+0x1ec>
			return -EIO;
6000717e:	f06f 0b04 	mvn.w	fp, #4
		if (ret != 0) {
60007182:	e5ba      	b.n	60006cfa <spi_mcux_transceive+0x66>
60007184:	6000cc26 	.word	0x6000cc26
60007188:	6000b890 	.word	0x6000b890
6000718c:	6000cc4c 	.word	0x6000cc4c

60007190 <spi_mcux_master_transfer_callback>:
{
60007190:	b530      	push	{r4, r5, lr}
60007192:	461c      	mov	r4, r3
	spi_context_update_tx(&data->ctx, 1, data->transfer_len);
60007194:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	if (!ctx->tx_len) {
60007198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
{
6000719c:	b08b      	sub	sp, #44	; 0x2c
6000719e:	b15b      	cbz	r3, 600071b8 <spi_mcux_master_transfer_callback+0x28>
	if (len > ctx->tx_len) {
600071a0:	429a      	cmp	r2, r3
600071a2:	d932      	bls.n	6000720a <spi_mcux_master_transfer_callback+0x7a>
		LOG_ERR("Update exceeds current buffer");
600071a4:	4b50      	ldr	r3, [pc, #320]	; (600072e8 <spi_mcux_master_transfer_callback+0x158>)
600071a6:	aa08      	add	r2, sp, #32
600071a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600071ac:	484f      	ldr	r0, [pc, #316]	; (600072ec <spi_mcux_master_transfer_callback+0x15c>)
600071ae:	9309      	str	r3, [sp, #36]	; 0x24
600071b0:	2302      	movs	r3, #2
600071b2:	9308      	str	r3, [sp, #32]
600071b4:	f003 fa0f 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
600071b8:	e9d4 3223 	ldrd	r3, r2, [r4, #140]	; 0x8c
600071bc:	b15b      	cbz	r3, 600071d6 <spi_mcux_master_transfer_callback+0x46>
	if (len > ctx->rx_len) {
600071be:	429a      	cmp	r2, r3
600071c0:	d940      	bls.n	60007244 <spi_mcux_master_transfer_callback+0xb4>
		LOG_ERR("Update exceeds current buffer");
600071c2:	4b49      	ldr	r3, [pc, #292]	; (600072e8 <spi_mcux_master_transfer_callback+0x158>)
600071c4:	aa08      	add	r2, sp, #32
600071c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600071ca:	4848      	ldr	r0, [pc, #288]	; (600072ec <spi_mcux_master_transfer_callback+0x15c>)
600071cc:	9309      	str	r3, [sp, #36]	; 0x24
600071ce:	2302      	movs	r3, #2
600071d0:	9308      	str	r3, [sp, #32]
600071d2:	f003 fa00 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
	spi_mcux_transfer_next_packet(data->dev);
600071d6:	6823      	ldr	r3, [r4, #0]
	struct spi_mcux_data *data = dev->data;
600071d8:	691c      	ldr	r4, [r3, #16]
	LPSPI_Type *base = config->base;
600071da:	685b      	ldr	r3, [r3, #4]
	if ((ctx->tx_len == 0) && (ctx->rx_len == 0)) {
600071dc:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
	LPSPI_Type *base = config->base;
600071e0:	6818      	ldr	r0, [r3, #0]
	if ((ctx->tx_len == 0) && (ctx->rx_len == 0)) {
600071e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600071e6:	2b00      	cmp	r3, #0
600071e8:	d149      	bne.n	6000727e <spi_mcux_master_transfer_callback+0xee>
600071ea:	2d00      	cmp	r5, #0
600071ec:	d158      	bne.n	600072a0 <spi_mcux_master_transfer_callback+0x110>
	_spi_context_cs_control(ctx, on, false);
600071ee:	462a      	mov	r2, r5
600071f0:	4629      	mov	r1, r5
600071f2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
600071f6:	f003 fa05 	bl	6000a604 <_spi_context_cs_control>
	ctx->sync_status = status;
600071fa:	66e5      	str	r5, [r4, #108]	; 0x6c
	z_impl_k_sem_give(sem);
600071fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
}
60007200:	b00b      	add	sp, #44	; 0x2c
60007202:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
60007206:	f001 bb99 	b.w	6000893c <z_impl_k_sem_give>
	ctx->tx_len -= len;
6000720a:	1a9b      	subs	r3, r3, r2
6000720c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	if (!ctx->tx_len) {
60007210:	b983      	cbnz	r3, 60007234 <spi_mcux_master_transfer_callback+0xa4>
		++ctx->current_tx;
60007212:	6f23      	ldr	r3, [r4, #112]	; 0x70
			spi_context_get_next_buf(&ctx->current_tx,
60007214:	f104 0284 	add.w	r2, r4, #132	; 0x84
60007218:	f104 0174 	add.w	r1, r4, #116	; 0x74
6000721c:	f104 0070 	add.w	r0, r4, #112	; 0x70
		++ctx->current_tx;
60007220:	3308      	adds	r3, #8
60007222:	6723      	str	r3, [r4, #112]	; 0x70
		--ctx->tx_count;
60007224:	6f63      	ldr	r3, [r4, #116]	; 0x74
60007226:	3b01      	subs	r3, #1
60007228:	6763      	str	r3, [r4, #116]	; 0x74
			spi_context_get_next_buf(&ctx->current_tx,
6000722a:	f003 f9c1 	bl	6000a5b0 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
6000722e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
60007232:	e7c1      	b.n	600071b8 <spi_mcux_master_transfer_callback+0x28>
	} else if (ctx->tx_buf) {
60007234:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
60007238:	2b00      	cmp	r3, #0
6000723a:	d0bd      	beq.n	600071b8 <spi_mcux_master_transfer_callback+0x28>
		ctx->tx_buf += dfs * len;
6000723c:	4413      	add	r3, r2
6000723e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
60007242:	e7b9      	b.n	600071b8 <spi_mcux_master_transfer_callback+0x28>
	ctx->rx_len -= len;
60007244:	1a9b      	subs	r3, r3, r2
60007246:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	if (!ctx->rx_len) {
6000724a:	b983      	cbnz	r3, 6000726e <spi_mcux_master_transfer_callback+0xde>
		++ctx->current_rx;
6000724c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			spi_context_get_next_buf(&ctx->current_rx,
6000724e:	f104 028c 	add.w	r2, r4, #140	; 0x8c
60007252:	f104 017c 	add.w	r1, r4, #124	; 0x7c
60007256:	f104 0078 	add.w	r0, r4, #120	; 0x78
		++ctx->current_rx;
6000725a:	3308      	adds	r3, #8
6000725c:	67a3      	str	r3, [r4, #120]	; 0x78
		--ctx->rx_count;
6000725e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
60007260:	3b01      	subs	r3, #1
60007262:	67e3      	str	r3, [r4, #124]	; 0x7c
			spi_context_get_next_buf(&ctx->current_rx,
60007264:	f003 f9a4 	bl	6000a5b0 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
60007268:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
6000726c:	e7b3      	b.n	600071d6 <spi_mcux_master_transfer_callback+0x46>
	} else if (ctx->rx_buf) {
6000726e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
60007272:	2b00      	cmp	r3, #0
60007274:	d0af      	beq.n	600071d6 <spi_mcux_master_transfer_callback+0x46>
		ctx->rx_buf += dfs * len;
60007276:	4413      	add	r3, r2
60007278:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
6000727c:	e7ab      	b.n	600071d6 <spi_mcux_master_transfer_callback+0x46>
			       (ctx->config->slave << LPSPI_MASTER_PCS_SHIFT);
6000727e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
60007280:	88d2      	ldrh	r2, [r2, #6]
60007282:	0112      	lsls	r2, r2, #4
	transfer.configFlags = kLPSPI_MasterPcsContinuous |
60007284:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
60007288:	9203      	str	r2, [sp, #12]
		transfer.txData = (uint8_t *) ctx->tx_buf;
6000728a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
	} else if (ctx->rx_len == 0) {
6000728e:	b335      	cbz	r5, 600072de <spi_mcux_master_transfer_callback+0x14e>
	} else if (ctx->tx_len == ctx->rx_len) {
60007290:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
60007294:	42ab      	cmp	r3, r5
		transfer.rxData = ctx->rx_buf;
60007296:	e9cd 2100 	strd	r2, r1, [sp]
	} else if (ctx->tx_len == ctx->rx_len) {
6000729a:	d022      	beq.n	600072e2 <spi_mcux_master_transfer_callback+0x152>
	} else if (ctx->tx_len > ctx->rx_len) {
6000729c:	d921      	bls.n	600072e2 <spi_mcux_master_transfer_callback+0x152>
6000729e:	e009      	b.n	600072b4 <spi_mcux_master_transfer_callback+0x124>
			       (ctx->config->slave << LPSPI_MASTER_PCS_SHIFT);
600072a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		transfer.txData = NULL;
600072a2:	9300      	str	r3, [sp, #0]
			       (ctx->config->slave << LPSPI_MASTER_PCS_SHIFT);
600072a4:	88d2      	ldrh	r2, [r2, #6]
		transfer.rxData = ctx->rx_buf;
600072a6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
			       (ctx->config->slave << LPSPI_MASTER_PCS_SHIFT);
600072aa:	0112      	lsls	r2, r2, #4
		transfer.rxData = ctx->rx_buf;
600072ac:	9301      	str	r3, [sp, #4]
	transfer.configFlags = kLPSPI_MasterPcsContinuous |
600072ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
600072b2:	9203      	str	r2, [sp, #12]
		transfer.dataSize = ctx->rx_len;
600072b4:	9502      	str	r5, [sp, #8]
	data->transfer_len = transfer.dataSize;
600072b6:	9b02      	ldr	r3, [sp, #8]
	status = LPSPI_MasterTransferNonBlocking(base, &data->handle,
600072b8:	466a      	mov	r2, sp
600072ba:	1d21      	adds	r1, r4, #4
	data->transfer_len = transfer.dataSize;
600072bc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	status = LPSPI_MasterTransferNonBlocking(base, &data->handle,
600072c0:	f000 fe3a 	bl	60007f38 <LPSPI_MasterTransferNonBlocking>
	if (status != kStatus_Success) {
600072c4:	b148      	cbz	r0, 600072da <spi_mcux_master_transfer_callback+0x14a>
		LOG_ERR("Transfer could not start");
600072c6:	4b0a      	ldr	r3, [pc, #40]	; (600072f0 <spi_mcux_master_transfer_callback+0x160>)
600072c8:	aa08      	add	r2, sp, #32
600072ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600072ce:	4807      	ldr	r0, [pc, #28]	; (600072ec <spi_mcux_master_transfer_callback+0x15c>)
600072d0:	9309      	str	r3, [sp, #36]	; 0x24
600072d2:	2302      	movs	r3, #2
600072d4:	9308      	str	r3, [sp, #32]
600072d6:	f003 f97e 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
}
600072da:	b00b      	add	sp, #44	; 0x2c
600072dc:	bd30      	pop	{r4, r5, pc}
		transfer.rxData = NULL;
600072de:	e9cd 2500 	strd	r2, r5, [sp]
		transfer.dataSize = ctx->tx_len;
600072e2:	9302      	str	r3, [sp, #8]
		transfer.configFlags |= kLPSPI_MasterPcsContinuous;
600072e4:	e7e7      	b.n	600072b6 <spi_mcux_master_transfer_callback+0x126>
600072e6:	bf00      	nop
600072e8:	6000cc4c 	.word	0x6000cc4c
600072ec:	6000b890 	.word	0x6000b890
600072f0:	6000cc6a 	.word	0x6000cc6a

600072f4 <spi_mcux_init>:

	return 0;
}

static int spi_mcux_init(const struct device *dev)
{
600072f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600072f8:	b083      	sub	sp, #12
600072fa:	4680      	mov	r8, r0

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
600072fc:	f04f 0a01 	mov.w	sl, #1
	int err;
	const struct spi_mcux_config *config = dev->config;
60007300:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct spi_mcux_data *data = dev->data;
60007304:	6905      	ldr	r5, [r0, #16]
{
60007306:	af00      	add	r7, sp, #0

	config->irq_config_func(dev);
60007308:	f8d9 300c 	ldr.w	r3, [r9, #12]
6000730c:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
6000730e:	6c6e      	ldr	r6, [r5, #68]	; 0x44
60007310:	e9d5 3211 	ldrd	r3, r2, [r5, #68]	; 0x44
60007314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
60007318:	429e      	cmp	r6, r3
6000731a:	d31e      	bcc.n	6000735a <spi_mcux_init+0x66>

	err = spi_context_cs_configure_all(&data->ctx);
6000731c:	f105 063c 	add.w	r6, r5, #60	; 0x3c
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);
60007320:	4630      	mov	r0, r6
60007322:	f003 f991 	bl	6000a648 <spi_context_unlock_unconditionally>

	data->dev = dev;

#ifdef CONFIG_SPI_MCUX_LPSPI_DMA
	if (!device_is_ready(data->dma_tx.dma_dev)) {
60007326:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
	data->dev = dev;
6000732a:	f8c5 8000 	str.w	r8, [r5]
6000732e:	f003 fe2c 	bl	6000af8a <z_device_is_ready>
	if (!device_is_ready(data->dma_tx.dma_dev)) {
60007332:	2800      	cmp	r0, #0
60007334:	d152      	bne.n	600073dc <spi_mcux_init+0xe8>
		LOG_ERR("%s device is not ready", data->dma_tx.dma_dev->name);
60007336:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
		return -ENODEV;
	}

	if (!device_is_ready(data->dma_rx.dma_dev)) {
		LOG_ERR("%s device is not ready", data->dma_rx.dma_dev->name);
6000733a:	466c      	mov	r4, sp
6000733c:	b088      	sub	sp, #32
6000733e:	681b      	ldr	r3, [r3, #0]
60007340:	466a      	mov	r2, sp
60007342:	4935      	ldr	r1, [pc, #212]	; (60007418 <spi_mcux_init+0x124>)
60007344:	e9c2 1305 	strd	r1, r3, [r2, #20]
60007348:	f44f 7300 	mov.w	r3, #512	; 0x200
6000734c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
60007350:	8393      	strh	r3, [r2, #28]
60007352:	4b32      	ldr	r3, [pc, #200]	; (6000741c <spi_mcux_init+0x128>)
60007354:	f842 3f10 	str.w	r3, [r2, #16]!
60007358:	e015      	b.n	60007386 <spi_mcux_init+0x92>
		if (!device_is_ready(cs_gpio->port)) {
6000735a:	6830      	ldr	r0, [r6, #0]
6000735c:	f003 fe15 	bl	6000af8a <z_device_is_ready>
60007360:	b9e0      	cbnz	r0, 6000739c <spi_mcux_init+0xa8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
60007362:	6833      	ldr	r3, [r6, #0]
60007364:	466c      	mov	r4, sp
60007366:	b08a      	sub	sp, #40	; 0x28
60007368:	6819      	ldr	r1, [r3, #0]
6000736a:	466a      	mov	r2, sp
6000736c:	7933      	ldrb	r3, [r6, #4]
6000736e:	482c      	ldr	r0, [pc, #176]	; (60007420 <spi_mcux_init+0x12c>)
60007370:	61d3      	str	r3, [r2, #28]
60007372:	f44f 7300 	mov.w	r3, #512	; 0x200
60007376:	e9c2 0105 	strd	r0, r1, [r2, #20]
6000737a:	8413      	strh	r3, [r2, #32]
6000737c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
60007380:	4b28      	ldr	r3, [pc, #160]	; (60007424 <spi_mcux_init+0x130>)
60007382:	f842 3f10 	str.w	r3, [r2, #16]!
60007386:	4828      	ldr	r0, [pc, #160]	; (60007428 <spi_mcux_init+0x134>)
60007388:	f003 f925 	bl	6000a5d6 <z_log_msg_static_create.constprop.0>
6000738c:	46a5      	mov	sp, r4
		return -ENODEV;
6000738e:	f06f 0412 	mvn.w	r4, #18
#endif /* CONFIG_PINCTRL */

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
60007392:	4620      	mov	r0, r4
60007394:	370c      	adds	r7, #12
60007396:	46bd      	mov	sp, r7
60007398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
6000739c:	6830      	ldr	r0, [r6, #0]
				  spec->pin,
6000739e:	7931      	ldrb	r1, [r6, #4]
				  spec->dt_flags | extra_flags);
600073a0:	88f3      	ldrh	r3, [r6, #6]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
600073a2:	07da      	lsls	r2, r3, #31
	struct gpio_driver_data *data =
600073a4:	6904      	ldr	r4, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
600073a6:	fa0a fb01 	lsl.w	fp, sl, r1
	const struct gpio_driver_api *api =
600073aa:	f8d0 c008 	ldr.w	ip, [r0, #8]
	return gpio_pin_configure(spec->port,
600073ae:	bf54      	ite	pl
600073b0:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
600073b4:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
600073b8:	f8d4 e000 	ldr.w	lr, [r4]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
600073bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
600073c0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
600073c2:	bf4c      	ite	mi
600073c4:	ea4b 030e 	orrmi.w	r3, fp, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
600073c8:	ea2e 030b 	bicpl.w	r3, lr, fp
600073cc:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
600073ce:	f8dc 3000 	ldr.w	r3, [ip]
600073d2:	4798      	blx	r3
		if (ret < 0) {
600073d4:	1e04      	subs	r4, r0, #0
600073d6:	dbdc      	blt.n	60007392 <spi_mcux_init+0x9e>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
600073d8:	3608      	adds	r6, #8
600073da:	e799      	b.n	60007310 <spi_mcux_init+0x1c>
	if (!device_is_ready(data->dma_rx.dma_dev)) {
600073dc:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
600073e0:	f003 fdd3 	bl	6000af8a <z_device_is_ready>
600073e4:	b910      	cbnz	r0, 600073ec <spi_mcux_init+0xf8>
		LOG_ERR("%s device is not ready", data->dma_rx.dma_dev->name);
600073e6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
600073ea:	e7a6      	b.n	6000733a <spi_mcux_init+0x46>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
600073ec:	1d3a      	adds	r2, r7, #4
600073ee:	2100      	movs	r1, #0
600073f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
600073f4:	f002 ff67 	bl	6000a2c6 <pinctrl_lookup_state>
	if (ret < 0) {
600073f8:	1e04      	subs	r4, r0, #0
600073fa:	dbca      	blt.n	60007392 <spi_mcux_init+0x9e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
600073fc:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
600073fe:	2200      	movs	r2, #0
60007400:	7919      	ldrb	r1, [r3, #4]
60007402:	6818      	ldr	r0, [r3, #0]
60007404:	f002 ff72 	bl	6000a2ec <pinctrl_configure_pins>
	if (err) {
60007408:	4604      	mov	r4, r0
6000740a:	2800      	cmp	r0, #0
6000740c:	d1c1      	bne.n	60007392 <spi_mcux_init+0x9e>
	spi_context_unlock_unconditionally(&data->ctx);
6000740e:	4630      	mov	r0, r6
60007410:	f003 f91a 	bl	6000a648 <spi_context_unlock_unconditionally>
	return 0;
60007414:	e7bd      	b.n	60007392 <spi_mcux_init+0x9e>
60007416:	bf00      	nop
60007418:	6000cca7 	.word	0x6000cca7
6000741c:	01000003 	.word	0x01000003
60007420:	6000cc83 	.word	0x6000cc83
60007424:	01000004 	.word	0x01000004
60007428:	6000b890 	.word	0x6000b890

6000742c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
6000742c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
60007430:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
60007432:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
60007434:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
60007436:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
60007438:	f411 3f80 	tst.w	r1, #65536	; 0x10000
6000743c:	4b08      	ldr	r3, [pc, #32]	; (60007460 <elapsed+0x34>)
6000743e:	4909      	ldr	r1, [pc, #36]	; (60007464 <elapsed+0x38>)
60007440:	d101      	bne.n	60007446 <elapsed+0x1a>
	    || (val1 < val2)) {
60007442:	4282      	cmp	r2, r0
60007444:	d206      	bcs.n	60007454 <elapsed+0x28>
		overflow_cyc += last_load;
60007446:	681a      	ldr	r2, [r3, #0]
60007448:	680c      	ldr	r4, [r1, #0]
6000744a:	4422      	add	r2, r4
6000744c:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
6000744e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60007452:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
60007454:	681b      	ldr	r3, [r3, #0]
60007456:	680a      	ldr	r2, [r1, #0]
60007458:	4413      	add	r3, r2
}
6000745a:	1a18      	subs	r0, r3, r0
6000745c:	bd10      	pop	{r4, pc}
6000745e:	bf00      	nop
60007460:	80001ba0 	.word	0x80001ba0
60007464:	80001bac 	.word	0x80001bac

60007468 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
60007468:	4b09      	ldr	r3, [pc, #36]	; (60007490 <sys_clock_driver_init+0x28>)
6000746a:	2210      	movs	r2, #16
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
6000746c:	2000      	movs	r0, #0
6000746e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
60007472:	f24c 324f 	movw	r2, #49999	; 0xc34f
60007476:	4b07      	ldr	r3, [pc, #28]	; (60007494 <sys_clock_driver_init+0x2c>)
60007478:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
6000747a:	4b07      	ldr	r3, [pc, #28]	; (60007498 <sys_clock_driver_init+0x30>)
6000747c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
6000747e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60007482:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
60007484:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
60007486:	691a      	ldr	r2, [r3, #16]
60007488:	f042 0207 	orr.w	r2, r2, #7
6000748c:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
6000748e:	4770      	bx	lr
60007490:	e000ed00 	.word	0xe000ed00
60007494:	80001bac 	.word	0x80001bac
60007498:	80001ba0 	.word	0x80001ba0

6000749c <sys_clock_isr>:
{
6000749c:	b508      	push	{r3, lr}
	elapsed();
6000749e:	f7ff ffc5 	bl	6000742c <elapsed>
	cycle_count += overflow_cyc;
600074a2:	4b0c      	ldr	r3, [pc, #48]	; (600074d4 <sys_clock_isr+0x38>)
600074a4:	4a0c      	ldr	r2, [pc, #48]	; (600074d8 <sys_clock_isr+0x3c>)
600074a6:	6818      	ldr	r0, [r3, #0]
600074a8:	6811      	ldr	r1, [r2, #0]
600074aa:	4408      	add	r0, r1
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
600074ac:	f24c 3150 	movw	r1, #50000	; 0xc350
	cycle_count += overflow_cyc;
600074b0:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
600074b2:	2200      	movs	r2, #0
600074b4:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
600074b6:	4a09      	ldr	r2, [pc, #36]	; (600074dc <sys_clock_isr+0x40>)
600074b8:	6813      	ldr	r3, [r2, #0]
600074ba:	1ac0      	subs	r0, r0, r3
600074bc:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
600074c0:	fb01 3300 	mla	r3, r1, r0, r3
600074c4:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
600074c6:	f001 fe83 	bl	600091d0 <sys_clock_announce>
}
600074ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
600074ce:	f7fe bc1d 	b.w	60005d0c <z_arm_exc_exit>
600074d2:	bf00      	nop
600074d4:	80001ba0 	.word	0x80001ba0
600074d8:	80001ba8 	.word	0x80001ba8
600074dc:	80001ba4 	.word	0x80001ba4

600074e0 <sys_clock_set_timeout>:
{
600074e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
600074e4:	4e32      	ldr	r6, [pc, #200]	; (600075b0 <sys_clock_set_timeout+0xd0>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
600074e6:	2900      	cmp	r1, #0
600074e8:	d053      	beq.n	60007592 <sys_clock_set_timeout+0xb2>
600074ea:	1c42      	adds	r2, r0, #1
600074ec:	d10a      	bne.n	60007504 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
600074ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600074f2:	6913      	ldr	r3, [r2, #16]
600074f4:	f023 0301 	bic.w	r3, r3, #1
600074f8:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
600074fa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
600074fe:	6033      	str	r3, [r6, #0]
}
60007500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
60007504:	6834      	ldr	r4, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
60007506:	2801      	cmp	r0, #1
60007508:	dd49      	ble.n	6000759e <sys_clock_set_timeout+0xbe>
6000750a:	f5b0 7fa7 	cmp.w	r0, #334	; 0x14e
6000750e:	dc49      	bgt.n	600075a4 <sys_clock_set_timeout+0xc4>
60007510:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
60007514:	f04f 0310 	mov.w	r3, #16
60007518:	f3ef 8511 	mrs	r5, BASEPRI
6000751c:	f383 8812 	msr	BASEPRI_MAX, r3
60007520:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
60007524:	f7ff ff82 	bl	6000742c <elapsed>
	val1 = SysTick->VAL;
60007528:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
6000752c:	4921      	ldr	r1, [pc, #132]	; (600075b4 <sys_clock_set_timeout+0xd4>)
	overflow_cyc = 0U;
6000752e:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
60007530:	699f      	ldr	r7, [r3, #24]
	cycle_count += pending;
60007532:	680b      	ldr	r3, [r1, #0]
60007534:	4418      	add	r0, r3
	overflow_cyc = 0U;
60007536:	4b20      	ldr	r3, [pc, #128]	; (600075b8 <sys_clock_set_timeout+0xd8>)
60007538:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
6000753a:	4b20      	ldr	r3, [pc, #128]	; (600075bc <sys_clock_set_timeout+0xdc>)
6000753c:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
6000753e:	1ac2      	subs	r2, r0, r3
60007540:	d433      	bmi.n	600075aa <sys_clock_set_timeout+0xca>
		delay = ticks * CYC_PER_TICK;
60007542:	f24c 3c50 	movw	ip, #50000	; 0xc350
		delay -= unannounced;
60007546:	1a1b      	subs	r3, r3, r0
		delay += unannounced;
60007548:	fb0c 2208 	mla	r2, ip, r8, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
6000754c:	f502 4243 	add.w	r2, r2, #49920	; 0xc300
60007550:	324f      	adds	r2, #79	; 0x4f
60007552:	fbb2 f2fc 	udiv	r2, r2, ip
		delay -= unannounced;
60007556:	fb0c 3302 	mla	r3, ip, r2, r3
		delay = MAX(delay, MIN_DELAY);
6000755a:	f640 4235 	movw	r2, #3125	; 0xc35
6000755e:	4293      	cmp	r3, r2
60007560:	d923      	bls.n	600075aa <sys_clock_set_timeout+0xca>
		if (delay > MAX_CYCLES) {
60007562:	4a17      	ldr	r2, [pc, #92]	; (600075c0 <sys_clock_set_timeout+0xe0>)
60007564:	4293      	cmp	r3, r2
60007566:	bf28      	it	cs
60007568:	4613      	movcs	r3, r2
	val2 = SysTick->VAL;
6000756a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
6000756e:	6033      	str	r3, [r6, #0]
	SysTick->LOAD = last_load - 1;
60007570:	3b01      	subs	r3, #1
	val2 = SysTick->VAL;
60007572:	6996      	ldr	r6, [r2, #24]
	SysTick->LOAD = last_load - 1;
60007574:	6153      	str	r3, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
60007576:	2300      	movs	r3, #0
	if (val1 < val2) {
60007578:	42b7      	cmp	r7, r6
6000757a:	eba7 0706 	sub.w	r7, r7, r6
	SysTick->VAL = 0; /* resets timer to last_load */
6000757e:	6193      	str	r3, [r2, #24]
		cycle_count += (val1 + (last_load_ - val2));
60007580:	bf38      	it	cc
60007582:	193f      	addcc	r7, r7, r4
		cycle_count += (val1 - val2);
60007584:	4438      	add	r0, r7
60007586:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
60007588:	f385 8811 	msr	BASEPRI, r5
6000758c:	f3bf 8f6f 	isb	sy
60007590:	e7b6      	b.n	60007500 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
60007592:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
60007594:	6834      	ldr	r4, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
60007596:	d1b6      	bne.n	60007506 <sys_clock_set_timeout+0x26>
60007598:	f44f 70a7 	mov.w	r0, #334	; 0x14e
6000759c:	e7b8      	b.n	60007510 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
6000759e:	f04f 0800 	mov.w	r8, #0
600075a2:	e7b7      	b.n	60007514 <sys_clock_set_timeout+0x34>
600075a4:	f44f 78a7 	mov.w	r8, #334	; 0x14e
600075a8:	e7b4      	b.n	60007514 <sys_clock_set_timeout+0x34>
600075aa:	f640 4335 	movw	r3, #3125	; 0xc35
600075ae:	e7dc      	b.n	6000756a <sys_clock_set_timeout+0x8a>
600075b0:	80001bac 	.word	0x80001bac
600075b4:	80001ba8 	.word	0x80001ba8
600075b8:	80001ba0 	.word	0x80001ba0
600075bc:	80001ba4 	.word	0x80001ba4
600075c0:	00fed260 	.word	0x00fed260

600075c4 <sys_clock_elapsed>:
{
600075c4:	b510      	push	{r4, lr}
	__asm__ volatile(
600075c6:	f04f 0310 	mov.w	r3, #16
600075ca:	f3ef 8411 	mrs	r4, BASEPRI
600075ce:	f383 8812 	msr	BASEPRI_MAX, r3
600075d2:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
600075d6:	f7ff ff29 	bl	6000742c <elapsed>
600075da:	4b07      	ldr	r3, [pc, #28]	; (600075f8 <sys_clock_elapsed+0x34>)
600075dc:	4a07      	ldr	r2, [pc, #28]	; (600075fc <sys_clock_elapsed+0x38>)
600075de:	681b      	ldr	r3, [r3, #0]
600075e0:	6812      	ldr	r2, [r2, #0]
600075e2:	1a9b      	subs	r3, r3, r2
600075e4:	4403      	add	r3, r0
	__asm__ volatile(
600075e6:	f384 8811 	msr	BASEPRI, r4
600075ea:	f3bf 8f6f 	isb	sy
}
600075ee:	f24c 3050 	movw	r0, #50000	; 0xc350
600075f2:	fbb3 f0f0 	udiv	r0, r3, r0
600075f6:	bd10      	pop	{r4, pc}
600075f8:	80001ba8 	.word	0x80001ba8
600075fc:	80001ba4 	.word	0x80001ba4

60007600 <sys_clock_cycle_get_32>:
{
60007600:	b510      	push	{r4, lr}
	__asm__ volatile(
60007602:	f04f 0310 	mov.w	r3, #16
60007606:	f3ef 8411 	mrs	r4, BASEPRI
6000760a:	f383 8812 	msr	BASEPRI_MAX, r3
6000760e:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
60007612:	f7ff ff0b 	bl	6000742c <elapsed>
60007616:	4b04      	ldr	r3, [pc, #16]	; (60007628 <sys_clock_cycle_get_32+0x28>)
60007618:	681b      	ldr	r3, [r3, #0]
6000761a:	4418      	add	r0, r3
	__asm__ volatile(
6000761c:	f384 8811 	msr	BASEPRI, r4
60007620:	f3bf 8f6f 	isb	sy
}
60007624:	bd10      	pop	{r4, pc}
60007626:	bf00      	nop
60007628:	80001ba8 	.word	0x80001ba8

6000762c <CLOCK_GetOscFreq>:
6000762c:	4b04      	ldr	r3, [pc, #16]	; (60007640 <CLOCK_GetOscFreq+0x14>)
6000762e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
60007632:	06db      	lsls	r3, r3, #27
60007634:	d402      	bmi.n	6000763c <CLOCK_GetOscFreq+0x10>
60007636:	4b03      	ldr	r3, [pc, #12]	; (60007644 <CLOCK_GetOscFreq+0x18>)
60007638:	6818      	ldr	r0, [r3, #0]
6000763a:	4770      	bx	lr
6000763c:	4802      	ldr	r0, [pc, #8]	; (60007648 <CLOCK_GetOscFreq+0x1c>)
}
6000763e:	4770      	bx	lr
60007640:	400d8000 	.word	0x400d8000
60007644:	80001bb4 	.word	0x80001bb4
60007648:	016e3600 	.word	0x016e3600

6000764c <CLOCK_InitEnetPll>:
 */
void CLOCK_InitEnetPll(const clock_enet_pll_config_t *config)
{
    uint32_t enet_pll = CCM_ANALOG_PLL_ENET_DIV_SELECT(config->loopDivider);

    CCM_ANALOG->PLL_ENET = (CCM_ANALOG->PLL_ENET & (~CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_MASK)) |
6000764c:	4918      	ldr	r1, [pc, #96]	; (600076b0 <CLOCK_InitEnetPll+0x64>)
                           CCM_ANALOG_PLL_ENET_BYPASS_MASK | CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC(config->src);
6000764e:	7902      	ldrb	r2, [r0, #4]
    uint32_t enet_pll = CCM_ANALOG_PLL_ENET_DIV_SELECT(config->loopDivider);
60007650:	78c3      	ldrb	r3, [r0, #3]
                           CCM_ANALOG_PLL_ENET_BYPASS_MASK | CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC(config->src);
60007652:	0392      	lsls	r2, r2, #14
    uint32_t enet_pll = CCM_ANALOG_PLL_ENET_DIV_SELECT(config->loopDivider);
60007654:	f003 0303 	and.w	r3, r3, #3
                           CCM_ANALOG_PLL_ENET_BYPASS_MASK | CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC(config->src);
60007658:	b292      	uxth	r2, r2
{
6000765a:	b510      	push	{r4, lr}
    CCM_ANALOG->PLL_ENET = (CCM_ANALOG->PLL_ENET & (~CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_MASK)) |
6000765c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
60007660:	f424 34e0 	bic.w	r4, r4, #114688	; 0x1c000
                           CCM_ANALOG_PLL_ENET_BYPASS_MASK | CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC(config->src);
60007664:	4322      	orrs	r2, r4
60007666:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    CCM_ANALOG->PLL_ENET = (CCM_ANALOG->PLL_ENET & (~CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_MASK)) |
6000766a:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0

    if (config->enableClkOutput)
6000766e:	7802      	ldrb	r2, [r0, #0]
60007670:	b10a      	cbz	r2, 60007676 <CLOCK_InitEnetPll+0x2a>
    {
        enet_pll |= CCM_ANALOG_PLL_ENET_ENABLE_MASK;
60007672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    }

    if (config->enableClkOutput25M)
60007676:	7882      	ldrb	r2, [r0, #2]
60007678:	b10a      	cbz	r2, 6000767e <CLOCK_InitEnetPll+0x32>
    {
        enet_pll |= CCM_ANALOG_PLL_ENET_ENET_25M_REF_EN_MASK;
6000767a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    }

    if (config->enableClkOutput500M)
6000767e:	7842      	ldrb	r2, [r0, #1]
60007680:	b10a      	cbz	r2, 60007686 <CLOCK_InitEnetPll+0x3a>
    {
        enet_pll |= CCM_ANALOG_PLL_ENET_ENET_500M_REF_EN_MASK;
60007682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    }

    CCM_ANALOG->PLL_ENET =
        (CCM_ANALOG->PLL_ENET & (~(CCM_ANALOG_PLL_ENET_DIV_SELECT_MASK | CCM_ANALOG_PLL_ENET_POWERDOWN_MASK))) |
60007686:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
6000768a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
6000768e:	f022 0203 	bic.w	r2, r2, #3
60007692:	431a      	orrs	r2, r3
        enet_pll;

    /* Wait for stable */
    while ((CCM_ANALOG->PLL_ENET & CCM_ANALOG_PLL_ENET_LOCK_MASK) == 0UL)
60007694:	4b06      	ldr	r3, [pc, #24]	; (600076b0 <CLOCK_InitEnetPll+0x64>)
    CCM_ANALOG->PLL_ENET =
60007696:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
    while ((CCM_ANALOG->PLL_ENET & CCM_ANALOG_PLL_ENET_LOCK_MASK) == 0UL)
6000769a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
6000769e:	2a00      	cmp	r2, #0
600076a0:	dafb      	bge.n	6000769a <CLOCK_InitEnetPll+0x4e>
    {
    }

    /* Disable Bypass */
    CCM_ANALOG->PLL_ENET &= ~CCM_ANALOG_PLL_ENET_BYPASS_MASK;
600076a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
600076a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
600076aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
600076ae:	bd10      	pop	{r4, pc}
600076b0:	400d8000 	.word	0x400d8000

600076b4 <CLOCK_GetPllFreq>:
 *         - true: The PLL is enabled.
 *         - false: The PLL is not enabled.
 */
static inline bool CLOCK_IsPllEnabled(CCM_ANALOG_Type *base, clock_pll_t pll)
{
    return (bool)(CCM_ANALOG_TUPLE_REG(base, pll) & (1UL << CCM_ANALOG_TUPLE_SHIFT(pll)));
600076b4:	f3c0 410b 	ubfx	r1, r0, #16, #12
 *
 * param pll   pll name to get frequency.
 * return The PLL output frequency in hertz.
 */
uint32_t CLOCK_GetPllFreq(clock_pll_t pll)
{
600076b8:	4602      	mov	r2, r0
600076ba:	f000 001f 	and.w	r0, r0, #31
600076be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
600076c2:	f501 2158 	add.w	r1, r1, #884736	; 0xd8000
600076c6:	b570      	push	{r4, r5, r6, lr}
600076c8:	680b      	ldr	r3, [r1, #0]
600076ca:	40c3      	lsrs	r3, r0
        100000000U, /* 100M */
        125000000U  /* 125M */
    };

    /* check if PLL is enabled */
    if (!CLOCK_IsPllEnabled(CCM_ANALOG, pll))
600076cc:	07d8      	lsls	r0, r3, #31
600076ce:	d519      	bpl.n	60007704 <CLOCK_GetPllFreq+0x50>
 * @param pll PLL control name (see @ref ccm_analog_pll_control_t enumeration)
 * @retval bypass reference clock frequency value.
 */
static inline uint32_t CLOCK_GetPllBypassRefClk(CCM_ANALOG_Type *base, clock_pll_t pll)
{
    return ((((uint32_t)(CCM_ANALOG_TUPLE_REG(base, pll) & CCM_ANALOG_PLL_BYPASS_CLK_SRC_MASK)) >>
600076d0:	680b      	ldr	r3, [r1, #0]
             CCM_ANALOG_PLL_BYPASS_CLK_SRC_SHIFT) == (uint32_t)kCLOCK_PllClkSrc24M) ?
               CLOCK_GetOscFreq() :
600076d2:	f413 4f40 	tst.w	r3, #49152	; 0xc000
600076d6:	d118      	bne.n	6000770a <CLOCK_GetPllFreq+0x56>
600076d8:	f7ff ffa8 	bl	6000762c <CLOCK_GetOscFreq>
600076dc:	4604      	mov	r4, r0
    return (bool)(CCM_ANALOG_TUPLE_REG(base, pll) & (1UL << CCM_ANALOG_PLL_BYPASS_SHIFT));
600076de:	680b      	ldr	r3, [r1, #0]

    /* get pll reference clock */
    freq = CLOCK_GetPllBypassRefClk(CCM_ANALOG, pll);

    /* check if pll is bypassed */
    if (CLOCK_IsPllBypassed(CCM_ANALOG, pll))
600076e0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
600076e4:	d10f      	bne.n	60007706 <CLOCK_GetPllFreq+0x52>
    {
        return freq;
    }

    switch (pll)
600076e6:	4933      	ldr	r1, [pc, #204]	; (600077b4 <CLOCK_GetPllFreq+0x100>)
600076e8:	428a      	cmp	r2, r1
600076ea:	d057      	beq.n	6000779c <CLOCK_GetPllFreq+0xe8>
600076ec:	d80f      	bhi.n	6000770e <CLOCK_GetPllFreq+0x5a>
600076ee:	f5a1 0130 	sub.w	r1, r1, #11534336	; 0xb00000
600076f2:	428a      	cmp	r2, r1
600076f4:	d013      	beq.n	6000771e <CLOCK_GetPllFreq+0x6a>
600076f6:	f501 0180 	add.w	r1, r1, #4194304	; 0x400000
600076fa:	428a      	cmp	r2, r1
600076fc:	d027      	beq.n	6000774e <CLOCK_GetPllFreq+0x9a>
600076fe:	4b2e      	ldr	r3, [pc, #184]	; (600077b8 <CLOCK_GetPllFreq+0x104>)
60007700:	429a      	cmp	r2, r3
60007702:	d01b      	beq.n	6000773c <CLOCK_GetPllFreq+0x88>

            freq += (uint32_t)freqTmp;
            break;

        case kCLOCK_PllUsb1:
            freq = (freq * (((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK) != 0UL) ? 22U : 20U));
60007704:	2400      	movs	r4, #0
            freq = 0U;
            break;
    }

    return freq;
}
60007706:	4620      	mov	r0, r4
60007708:	bd70      	pop	{r4, r5, r6, pc}
               CLOCK_GetOscFreq() :
6000770a:	2400      	movs	r4, #0
6000770c:	e7e7      	b.n	600076de <CLOCK_GetPllFreq+0x2a>
    switch (pll)
6000770e:	4b2b      	ldr	r3, [pc, #172]	; (600077bc <CLOCK_GetPllFreq+0x108>)
60007710:	429a      	cmp	r2, r3
60007712:	d04c      	beq.n	600077ae <CLOCK_GetPllFreq+0xfa>
60007714:	3301      	adds	r3, #1
60007716:	429a      	cmp	r2, r3
60007718:	d1f4      	bne.n	60007704 <CLOCK_GetPllFreq+0x50>
            freq = 500000000UL;
6000771a:	4c29      	ldr	r4, [pc, #164]	; (600077c0 <CLOCK_GetPllFreq+0x10c>)
6000771c:	e7f3      	b.n	60007706 <CLOCK_GetPllFreq+0x52>
            freqTmp = ((clock_64b_t)freq * ((clock_64b_t)(CCM_ANALOG->PLL_SYS_NUM)));
6000771e:	4d29      	ldr	r5, [pc, #164]	; (600077c4 <CLOCK_GetPllFreq+0x110>)
60007720:	6d28      	ldr	r0, [r5, #80]	; 0x50
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_SYS_DENOM));
60007722:	6e2a      	ldr	r2, [r5, #96]	; 0x60
60007724:	fba4 0100 	umull	r0, r1, r4, r0
60007728:	f7fc f9a6 	bl	60003a78 <__aeabi_uldivmod>
            if ((CCM_ANALOG->PLL_SYS & CCM_ANALOG_PLL_SYS_DIV_SELECT_MASK) != 0UL)
6000772c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
6000772e:	07db      	lsls	r3, r3, #31
                freq *= 22U;
60007730:	bf4c      	ite	mi
60007732:	2316      	movmi	r3, #22
                freq *= 20U;
60007734:	2314      	movpl	r3, #20
60007736:	4363      	muls	r3, r4
            freq += (uint32_t)freqTmp;
60007738:	181c      	adds	r4, r3, r0
            break;
6000773a:	e7e4      	b.n	60007706 <CLOCK_GetPllFreq+0x52>
            freq = (freq * (((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK) != 0UL) ? 22U : 20U));
6000773c:	4b21      	ldr	r3, [pc, #132]	; (600077c4 <CLOCK_GetPllFreq+0x110>)
6000773e:	691b      	ldr	r3, [r3, #16]
60007740:	f013 0f02 	tst.w	r3, #2
60007744:	bf0c      	ite	eq
60007746:	2314      	moveq	r3, #20
60007748:	2316      	movne	r3, #22
6000774a:	435c      	muls	r4, r3
            break;
6000774c:	e7db      	b.n	60007706 <CLOCK_GetPllFreq+0x52>
                (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_DIV_SELECT_MASK) >> CCM_ANALOG_PLL_AUDIO_DIV_SELECT_SHIFT;
6000774e:	4d1d      	ldr	r5, [pc, #116]	; (600077c4 <CLOCK_GetPllFreq+0x110>)
60007750:	6f2e      	ldr	r6, [r5, #112]	; 0x70
            freqTmp = ((clock_64b_t)freq * ((clock_64b_t)(CCM_ANALOG->PLL_AUDIO_NUM)));
60007752:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_AUDIO_DENOM));
60007756:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
            divSelect =
6000775a:	f006 067f 	and.w	r6, r6, #127	; 0x7f
            freqTmp /= ((clock_64b_t)(CCM_ANALOG->PLL_AUDIO_DENOM));
6000775e:	fba4 0100 	umull	r0, r1, r4, r0
60007762:	f7fc f989 	bl	60003a78 <__aeabi_uldivmod>
            switch (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK)
60007766:	6f2b      	ldr	r3, [r5, #112]	; 0x70
            freq = freq * divSelect + (uint32_t)freqTmp;
60007768:	4366      	muls	r6, r4
6000776a:	f413 13c0 	ands.w	r3, r3, #1572864	; 0x180000
6000776e:	eb06 0400 	add.w	r4, r6, r0
            switch (CCM_ANALOG->PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK)
60007772:	d00d      	beq.n	60007790 <CLOCK_GetPllFreq+0xdc>
60007774:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
60007778:	d00c      	beq.n	60007794 <CLOCK_GetPllFreq+0xe0>
            switch (CCM_ANALOG->MISC2 & (CCM_ANALOG_MISC2_AUDIO_DIV_MSB_MASK | CCM_ANALOG_MISC2_AUDIO_DIV_LSB_MASK))
6000777a:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
6000777e:	4a12      	ldr	r2, [pc, #72]	; (600077c8 <CLOCK_GetPllFreq+0x114>)
60007780:	4013      	ands	r3, r2
60007782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
60007786:	d007      	beq.n	60007798 <CLOCK_GetPllFreq+0xe4>
60007788:	4293      	cmp	r3, r2
6000778a:	d1bc      	bne.n	60007706 <CLOCK_GetPllFreq+0x52>
                    freq >>= 2U;
6000778c:	08a4      	lsrs	r4, r4, #2
                    break;
6000778e:	e7ba      	b.n	60007706 <CLOCK_GetPllFreq+0x52>
                    freq = freq >> 2U;
60007790:	08a4      	lsrs	r4, r4, #2
                    break;
60007792:	e7f2      	b.n	6000777a <CLOCK_GetPllFreq+0xc6>
                    freq = freq >> 1U;
60007794:	0864      	lsrs	r4, r4, #1
                    break;
60007796:	e7f0      	b.n	6000777a <CLOCK_GetPllFreq+0xc6>
                    freq >>= 1U;
60007798:	0864      	lsrs	r4, r4, #1
                    break;
6000779a:	e7b4      	b.n	60007706 <CLOCK_GetPllFreq+0x52>
                (CCM_ANALOG->PLL_ENET & CCM_ANALOG_PLL_ENET_DIV_SELECT_MASK) >> CCM_ANALOG_PLL_ENET_DIV_SELECT_SHIFT;
6000779c:	4b09      	ldr	r3, [pc, #36]	; (600077c4 <CLOCK_GetPllFreq+0x110>)
            freq = enetRefClkFreq[divSelect];
6000779e:	4a0b      	ldr	r2, [pc, #44]	; (600077cc <CLOCK_GetPllFreq+0x118>)
                (CCM_ANALOG->PLL_ENET & CCM_ANALOG_PLL_ENET_DIV_SELECT_MASK) >> CCM_ANALOG_PLL_ENET_DIV_SELECT_SHIFT;
600077a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
            divSelect =
600077a4:	f003 0303 	and.w	r3, r3, #3
            freq = enetRefClkFreq[divSelect];
600077a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
            break;
600077ac:	e7ab      	b.n	60007706 <CLOCK_GetPllFreq+0x52>
            freq = 25000000UL;
600077ae:	4c08      	ldr	r4, [pc, #32]	; (600077d0 <CLOCK_GetPllFreq+0x11c>)
600077b0:	e7a9      	b.n	60007706 <CLOCK_GetPllFreq+0x52>
600077b2:	bf00      	nop
600077b4:	00e0000d 	.word	0x00e0000d
600077b8:	0010000d 	.word	0x0010000d
600077bc:	00e00015 	.word	0x00e00015
600077c0:	1dcd6500 	.word	0x1dcd6500
600077c4:	400d8000 	.word	0x400d8000
600077c8:	00808000 	.word	0x00808000
600077cc:	6000c2c0 	.word	0x6000c2c0
600077d0:	017d7840 	.word	0x017d7840

600077d4 <CLOCK_GetPllUsb1SWFreq>:
    switch ((CCM->CCSR & CCM_CCSR_PLL3_SW_CLK_SEL_MASK) >> CCM_CCSR_PLL3_SW_CLK_SEL_SHIFT)
600077d4:	4b04      	ldr	r3, [pc, #16]	; (600077e8 <CLOCK_GetPllUsb1SWFreq+0x14>)
600077d6:	68db      	ldr	r3, [r3, #12]
600077d8:	07db      	lsls	r3, r3, #31
600077da:	d402      	bmi.n	600077e2 <CLOCK_GetPllUsb1SWFreq+0xe>
            freq = CLOCK_GetPllFreq(kCLOCK_PllUsb1);
600077dc:	4803      	ldr	r0, [pc, #12]	; (600077ec <CLOCK_GetPllUsb1SWFreq+0x18>)
600077de:	f7ff bf69 	b.w	600076b4 <CLOCK_GetPllFreq>
}
600077e2:	4803      	ldr	r0, [pc, #12]	; (600077f0 <CLOCK_GetPllUsb1SWFreq+0x1c>)
600077e4:	4770      	bx	lr
600077e6:	bf00      	nop
600077e8:	400fc000 	.word	0x400fc000
600077ec:	0010000d 	.word	0x0010000d
600077f0:	016e3600 	.word	0x016e3600

600077f4 <CLOCK_GetSysPfdFreq>:
 *
 * param pfd   pfd name to get frequency.
 * return The PFD output frequency in hertz.
 */
uint32_t CLOCK_GetSysPfdFreq(clock_pfd_t pfd)
{
600077f4:	b510      	push	{r4, lr}
600077f6:	4604      	mov	r4, r0
    uint32_t freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
600077f8:	4813      	ldr	r0, [pc, #76]	; (60007848 <CLOCK_GetSysPfdFreq+0x54>)
600077fa:	f7ff ff5b 	bl	600076b4 <CLOCK_GetPllFreq>

    switch (pfd)
600077fe:	2c03      	cmp	r4, #3
60007800:	d81f      	bhi.n	60007842 <CLOCK_GetSysPfdFreq+0x4e>
60007802:	e8df f004 	tbb	[pc, r4]
60007806:	0c02      	.short	0x0c02
60007808:	1812      	.short	0x1812
    {
        case kCLOCK_Pfd0:
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD0_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD0_FRAC_SHIFT);
6000780a:	4b10      	ldr	r3, [pc, #64]	; (6000784c <CLOCK_GetSysPfdFreq+0x58>)
6000780c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
60007810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        case kCLOCK_Pfd2:
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD2_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT);
            break;

        case kCLOCK_Pfd3:
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD3_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT);
60007814:	fbb0 f0f3 	udiv	r0, r0, r3
            break;
    }
    freq *= 18U;

    return freq;
}
60007818:	2312      	movs	r3, #18
6000781a:	4358      	muls	r0, r3
6000781c:	bd10      	pop	{r4, pc}
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD1_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD1_FRAC_SHIFT);
6000781e:	4b0b      	ldr	r3, [pc, #44]	; (6000784c <CLOCK_GetSysPfdFreq+0x58>)
60007820:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
60007824:	f3c3 2305 	ubfx	r3, r3, #8, #6
60007828:	e7f4      	b.n	60007814 <CLOCK_GetSysPfdFreq+0x20>
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD2_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT);
6000782a:	4b08      	ldr	r3, [pc, #32]	; (6000784c <CLOCK_GetSysPfdFreq+0x58>)
6000782c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
60007830:	f3c3 4305 	ubfx	r3, r3, #16, #6
60007834:	e7ee      	b.n	60007814 <CLOCK_GetSysPfdFreq+0x20>
            freq /= ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD3_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT);
60007836:	4b05      	ldr	r3, [pc, #20]	; (6000784c <CLOCK_GetSysPfdFreq+0x58>)
60007838:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
6000783c:	f3c3 6305 	ubfx	r3, r3, #24, #6
60007840:	e7e8      	b.n	60007814 <CLOCK_GetSysPfdFreq+0x20>
    switch (pfd)
60007842:	2000      	movs	r0, #0
60007844:	e7e8      	b.n	60007818 <CLOCK_GetSysPfdFreq+0x24>
60007846:	bf00      	nop
60007848:	0030000d 	.word	0x0030000d
6000784c:	400d8000 	.word	0x400d8000

60007850 <CLOCK_GetUsb1PfdFreq>:
 *
 * param pfd   pfd name to get frequency.
 * return The PFD output frequency in hertz.
 */
uint32_t CLOCK_GetUsb1PfdFreq(clock_pfd_t pfd)
{
60007850:	b510      	push	{r4, lr}
60007852:	4604      	mov	r4, r0
    uint32_t freq = CLOCK_GetPllFreq(kCLOCK_PllUsb1);
60007854:	4813      	ldr	r0, [pc, #76]	; (600078a4 <CLOCK_GetUsb1PfdFreq+0x54>)
60007856:	f7ff ff2d 	bl	600076b4 <CLOCK_GetPllFreq>

    switch (pfd)
6000785a:	2c03      	cmp	r4, #3
6000785c:	d81f      	bhi.n	6000789e <CLOCK_GetUsb1PfdFreq+0x4e>
6000785e:	e8df f004 	tbb	[pc, r4]
60007862:	0c02      	.short	0x0c02
60007864:	1812      	.short	0x1812
    {
        case kCLOCK_Pfd0:
            freq /= ((CCM_ANALOG->PFD_480 & CCM_ANALOG_PFD_480_PFD0_FRAC_MASK) >> CCM_ANALOG_PFD_480_PFD0_FRAC_SHIFT);
60007866:	4b10      	ldr	r3, [pc, #64]	; (600078a8 <CLOCK_GetUsb1PfdFreq+0x58>)
60007868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
6000786c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        case kCLOCK_Pfd2:
            freq /= ((CCM_ANALOG->PFD_480 & CCM_ANALOG_PFD_480_PFD2_FRAC_MASK) >> CCM_ANALOG_PFD_480_PFD2_FRAC_SHIFT);
            break;

        case kCLOCK_Pfd3:
            freq /= ((CCM_ANALOG->PFD_480 & CCM_ANALOG_PFD_480_PFD3_FRAC_MASK) >> CCM_ANALOG_PFD_480_PFD3_FRAC_SHIFT);
60007870:	fbb0 f0f3 	udiv	r0, r0, r3
            break;
    }
    freq *= 18U;

    return freq;
}
60007874:	2312      	movs	r3, #18
60007876:	4358      	muls	r0, r3
60007878:	bd10      	pop	{r4, pc}
            freq /= ((CCM_ANALOG->PFD_480 & CCM_ANALOG_PFD_480_PFD1_FRAC_MASK) >> CCM_ANALOG_PFD_480_PFD1_FRAC_SHIFT);
6000787a:	4b0b      	ldr	r3, [pc, #44]	; (600078a8 <CLOCK_GetUsb1PfdFreq+0x58>)
6000787c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
60007880:	f3c3 2305 	ubfx	r3, r3, #8, #6
60007884:	e7f4      	b.n	60007870 <CLOCK_GetUsb1PfdFreq+0x20>
            freq /= ((CCM_ANALOG->PFD_480 & CCM_ANALOG_PFD_480_PFD2_FRAC_MASK) >> CCM_ANALOG_PFD_480_PFD2_FRAC_SHIFT);
60007886:	4b08      	ldr	r3, [pc, #32]	; (600078a8 <CLOCK_GetUsb1PfdFreq+0x58>)
60007888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
6000788c:	f3c3 4305 	ubfx	r3, r3, #16, #6
60007890:	e7ee      	b.n	60007870 <CLOCK_GetUsb1PfdFreq+0x20>
            freq /= ((CCM_ANALOG->PFD_480 & CCM_ANALOG_PFD_480_PFD3_FRAC_MASK) >> CCM_ANALOG_PFD_480_PFD3_FRAC_SHIFT);
60007892:	4b05      	ldr	r3, [pc, #20]	; (600078a8 <CLOCK_GetUsb1PfdFreq+0x58>)
60007894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
60007898:	f3c3 6305 	ubfx	r3, r3, #24, #6
6000789c:	e7e8      	b.n	60007870 <CLOCK_GetUsb1PfdFreq+0x20>
    switch (pfd)
6000789e:	2000      	movs	r0, #0
600078a0:	e7e8      	b.n	60007874 <CLOCK_GetUsb1PfdFreq+0x24>
600078a2:	bf00      	nop
600078a4:	0010000d 	.word	0x0010000d
600078a8:	400d8000 	.word	0x400d8000

600078ac <CLOCK_GetPeriphClkFreq>:
{
600078ac:	b508      	push	{r3, lr}
    if ((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK_SEL_MASK) != 0UL)
600078ae:	4b20      	ldr	r3, [pc, #128]	; (60007930 <CLOCK_GetPeriphClkFreq+0x84>)
600078b0:	6958      	ldr	r0, [r3, #20]
        switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
600078b2:	699b      	ldr	r3, [r3, #24]
    if ((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK_SEL_MASK) != 0UL)
600078b4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
600078b8:	d01a      	beq.n	600078f0 <CLOCK_GetPeriphClkFreq+0x44>
        switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
600078ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
600078be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
600078c2:	d007      	beq.n	600078d4 <CLOCK_GetPeriphClkFreq+0x28>
600078c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
600078c8:	d00e      	beq.n	600078e8 <CLOCK_GetPeriphClkFreq+0x3c>
600078ca:	b97b      	cbnz	r3, 600078ec <CLOCK_GetPeriphClkFreq+0x40>
                freq = CLOCK_GetPllFreq(kCLOCK_PllUsb1);
600078cc:	4819      	ldr	r0, [pc, #100]	; (60007934 <CLOCK_GetPeriphClkFreq+0x88>)
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
600078ce:	f7ff fef1 	bl	600076b4 <CLOCK_GetPllFreq>
                break;
600078d2:	e001      	b.n	600078d8 <CLOCK_GetPeriphClkFreq+0x2c>
                freq = CLOCK_GetOscFreq();
600078d4:	f7ff feaa 	bl	6000762c <CLOCK_GetOscFreq>
        freq /= (((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) >> CCM_CBCDR_PERIPH_CLK2_PODF_SHIFT) + 1U);
600078d8:	4b15      	ldr	r3, [pc, #84]	; (60007930 <CLOCK_GetPeriphClkFreq+0x84>)
600078da:	695b      	ldr	r3, [r3, #20]
600078dc:	f3c3 63c2 	ubfx	r3, r3, #27, #3
600078e0:	3301      	adds	r3, #1
600078e2:	fbb0 f0f3 	udiv	r0, r0, r3
}
600078e6:	bd08      	pop	{r3, pc}
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
600078e8:	4813      	ldr	r0, [pc, #76]	; (60007938 <CLOCK_GetPeriphClkFreq+0x8c>)
600078ea:	e7f0      	b.n	600078ce <CLOCK_GetPeriphClkFreq+0x22>
        switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
600078ec:	2000      	movs	r0, #0
600078ee:	e7f3      	b.n	600078d8 <CLOCK_GetPeriphClkFreq+0x2c>
        switch (CCM->CBCMR & CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK)
600078f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
600078f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
600078f8:	d014      	beq.n	60007924 <CLOCK_GetPeriphClkFreq+0x78>
600078fa:	d808      	bhi.n	6000790e <CLOCK_GetPeriphClkFreq+0x62>
600078fc:	b16b      	cbz	r3, 6000791a <CLOCK_GetPeriphClkFreq+0x6e>
600078fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
60007902:	d1f0      	bne.n	600078e6 <CLOCK_GetPeriphClkFreq+0x3a>
                freq = CLOCK_GetUsb1PfdFreq(kCLOCK_Pfd3);
60007904:	2003      	movs	r0, #3
}
60007906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                freq = CLOCK_GetUsb1PfdFreq(kCLOCK_Pfd3);
6000790a:	f7ff bfa1 	b.w	60007850 <CLOCK_GetUsb1PfdFreq>
                freq = 500000000U;
6000790e:	4a0b      	ldr	r2, [pc, #44]	; (6000793c <CLOCK_GetPeriphClkFreq+0x90>)
60007910:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
60007914:	bf08      	it	eq
60007916:	4610      	moveq	r0, r2
60007918:	e7e5      	b.n	600078e6 <CLOCK_GetPeriphClkFreq+0x3a>
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
6000791a:	4807      	ldr	r0, [pc, #28]	; (60007938 <CLOCK_GetPeriphClkFreq+0x8c>)
}
6000791c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
60007920:	f7ff bec8 	b.w	600076b4 <CLOCK_GetPllFreq>
                freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd3);
60007924:	2003      	movs	r0, #3
}
60007926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd3);
6000792a:	f7ff bf63 	b.w	600077f4 <CLOCK_GetSysPfdFreq>
6000792e:	bf00      	nop
60007930:	400fc000 	.word	0x400fc000
60007934:	0010000d 	.word	0x0010000d
60007938:	0030000d 	.word	0x0030000d
6000793c:	1dcd6500 	.word	0x1dcd6500

60007940 <CLOCK_GetAhbFreq>:
{
60007940:	b508      	push	{r3, lr}
    return CLOCK_GetPeriphClkFreq() / (((CCM->CBCDR & CCM_CBCDR_AHB_PODF_MASK) >> CCM_CBCDR_AHB_PODF_SHIFT) + 1U);
60007942:	f7ff ffb3 	bl	600078ac <CLOCK_GetPeriphClkFreq>
60007946:	4b04      	ldr	r3, [pc, #16]	; (60007958 <CLOCK_GetAhbFreq+0x18>)
60007948:	695b      	ldr	r3, [r3, #20]
6000794a:	f3c3 2382 	ubfx	r3, r3, #10, #3
6000794e:	3301      	adds	r3, #1
}
60007950:	fbb0 f0f3 	udiv	r0, r0, r3
60007954:	bd08      	pop	{r3, pc}
60007956:	bf00      	nop
60007958:	400fc000 	.word	0x400fc000

6000795c <CLOCK_GetIpgFreq>:
{
6000795c:	b508      	push	{r3, lr}
    return CLOCK_GetAhbFreq() / (((CCM->CBCDR & CCM_CBCDR_IPG_PODF_MASK) >> CCM_CBCDR_IPG_PODF_SHIFT) + 1U);
6000795e:	f7ff ffef 	bl	60007940 <CLOCK_GetAhbFreq>
60007962:	4b04      	ldr	r3, [pc, #16]	; (60007974 <CLOCK_GetIpgFreq+0x18>)
60007964:	695b      	ldr	r3, [r3, #20]
60007966:	f3c3 2301 	ubfx	r3, r3, #8, #2
6000796a:	3301      	adds	r3, #1
}
6000796c:	fbb0 f0f3 	udiv	r0, r0, r3
60007970:	bd08      	pop	{r3, pc}
60007972:	bf00      	nop
60007974:	400fc000 	.word	0x400fc000

60007978 <CLOCK_GetPerClkFreq>:
{
60007978:	b510      	push	{r4, lr}
    if ((CCM->CSCMR1 & CCM_CSCMR1_PERCLK_CLK_SEL_MASK) != 0UL)
6000797a:	4c08      	ldr	r4, [pc, #32]	; (6000799c <CLOCK_GetPerClkFreq+0x24>)
6000797c:	69e3      	ldr	r3, [r4, #28]
6000797e:	065b      	lsls	r3, r3, #25
60007980:	d508      	bpl.n	60007994 <CLOCK_GetPerClkFreq+0x1c>
        freq = CLOCK_GetOscFreq();
60007982:	f7ff fe53 	bl	6000762c <CLOCK_GetOscFreq>
    freq /= (((CCM->CSCMR1 & CCM_CSCMR1_PERCLK_PODF_MASK) >> CCM_CSCMR1_PERCLK_PODF_SHIFT) + 1U);
60007986:	69e3      	ldr	r3, [r4, #28]
60007988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
6000798c:	3301      	adds	r3, #1
}
6000798e:	fbb0 f0f3 	udiv	r0, r0, r3
60007992:	bd10      	pop	{r4, pc}
        freq = CLOCK_GetIpgFreq();
60007994:	f7ff ffe2 	bl	6000795c <CLOCK_GetIpgFreq>
60007998:	e7f5      	b.n	60007986 <CLOCK_GetPerClkFreq+0xe>
6000799a:	bf00      	nop
6000799c:	400fc000 	.word	0x400fc000

600079a0 <CLOCK_GetSemcFreq>:
{
600079a0:	b510      	push	{r4, lr}
    if ((CCM->CBCDR & CCM_CBCDR_SEMC_CLK_SEL_MASK) != 0UL)
600079a2:	4c0c      	ldr	r4, [pc, #48]	; (600079d4 <CLOCK_GetSemcFreq+0x34>)
600079a4:	6963      	ldr	r3, [r4, #20]
600079a6:	065a      	lsls	r2, r3, #25
600079a8:	d510      	bpl.n	600079cc <CLOCK_GetSemcFreq+0x2c>
        if ((CCM->CBCDR & CCM_CBCDR_SEMC_ALT_CLK_SEL_MASK) != 0UL)
600079aa:	6963      	ldr	r3, [r4, #20]
600079ac:	061b      	lsls	r3, r3, #24
600079ae:	d509      	bpl.n	600079c4 <CLOCK_GetSemcFreq+0x24>
            freq = CLOCK_GetUsb1PfdFreq(kCLOCK_Pfd1);
600079b0:	2001      	movs	r0, #1
600079b2:	f7ff ff4d 	bl	60007850 <CLOCK_GetUsb1PfdFreq>
    freq /= (((CCM->CBCDR & CCM_CBCDR_SEMC_PODF_MASK) >> CCM_CBCDR_SEMC_PODF_SHIFT) + 1U);
600079b6:	6963      	ldr	r3, [r4, #20]
600079b8:	f3c3 4302 	ubfx	r3, r3, #16, #3
600079bc:	3301      	adds	r3, #1
}
600079be:	fbb0 f0f3 	udiv	r0, r0, r3
600079c2:	bd10      	pop	{r4, pc}
            freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd2);
600079c4:	2002      	movs	r0, #2
600079c6:	f7ff ff15 	bl	600077f4 <CLOCK_GetSysPfdFreq>
600079ca:	e7f4      	b.n	600079b6 <CLOCK_GetSemcFreq+0x16>
        freq = CLOCK_GetPeriphClkFreq();
600079cc:	f7ff ff6e 	bl	600078ac <CLOCK_GetPeriphClkFreq>
600079d0:	e7f1      	b.n	600079b6 <CLOCK_GetSemcFreq+0x16>
600079d2:	bf00      	nop
600079d4:	400fc000 	.word	0x400fc000

600079d8 <CLOCK_GetFreq>:
{
600079d8:	b508      	push	{r3, lr}
    switch (name)
600079da:	281b      	cmp	r0, #27
600079dc:	d859      	bhi.n	60007a92 <CLOCK_GetFreq+0xba>
600079de:	e8df f000 	tbb	[pc, r0]
600079e2:	1111      	.short	0x1111
600079e4:	211d1915 	.word	0x211d1915
600079e8:	2f2a250e 	.word	0x2f2a250e
600079ec:	45433331 	.word	0x45433331
600079f0:	504e4c4a 	.word	0x504e4c4a
600079f4:	35565452 	.word	0x35565452
600079f8:	58585839 	.word	0x58585839
600079fc:	3d58      	.short	0x3d58
            freq = CLOCK_GetRtcFreq();
600079fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
60007a02:	bd08      	pop	{r3, pc}
60007a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetAhbFreq();
60007a08:	f7ff bf9a 	b.w	60007940 <CLOCK_GetAhbFreq>
}
60007a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetSemcFreq();
60007a10:	f7ff bfc6 	b.w	600079a0 <CLOCK_GetSemcFreq>
}
60007a14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetIpgFreq();
60007a18:	f7ff bfa0 	b.w	6000795c <CLOCK_GetIpgFreq>
}
60007a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetPerClkFreq();
60007a20:	f7ff bfaa 	b.w	60007978 <CLOCK_GetPerClkFreq>
}
60007a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetOscFreq();
60007a28:	f7ff be00 	b.w	6000762c <CLOCK_GetOscFreq>
            freq = CLOCK_GetPllFreq(kCLOCK_PllUsb1);
60007a2c:	481a      	ldr	r0, [pc, #104]	; (60007a98 <CLOCK_GetFreq+0xc0>)
}
60007a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetPllFreq(kCLOCK_PllAudio);
60007a32:	f7ff be3f 	b.w	600076b4 <CLOCK_GetPllFreq>
            freq = CLOCK_GetUsb1PfdFreq(kCLOCK_Pfd0);
60007a36:	2000      	movs	r0, #0
}
60007a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetUsb1PfdFreq(kCLOCK_Pfd1);
60007a3c:	f7ff bf08 	b.w	60007850 <CLOCK_GetUsb1PfdFreq>
60007a40:	2001      	movs	r0, #1
60007a42:	e7f9      	b.n	60007a38 <CLOCK_GetFreq+0x60>
            freq = CLOCK_GetUsb1PfdFreq(kCLOCK_Pfd2);
60007a44:	2002      	movs	r0, #2
60007a46:	e7f7      	b.n	60007a38 <CLOCK_GetFreq+0x60>
            freq = CLOCK_GetUsb1PfdFreq(kCLOCK_Pfd3);
60007a48:	2003      	movs	r0, #3
60007a4a:	e7f5      	b.n	60007a38 <CLOCK_GetFreq+0x60>
}
60007a4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetPllUsb1SWFreq();
60007a50:	f7ff bec0 	b.w	600077d4 <CLOCK_GetPllUsb1SWFreq>
            freq = CLOCK_GetPllUsb1SWFreq() / 8UL;
60007a54:	f7ff febe 	bl	600077d4 <CLOCK_GetPllUsb1SWFreq>
60007a58:	08c0      	lsrs	r0, r0, #3
            break;
60007a5a:	e7d2      	b.n	60007a02 <CLOCK_GetFreq+0x2a>
            freq = CLOCK_GetPllUsb1SWFreq() / 6UL;
60007a5c:	f7ff feba 	bl	600077d4 <CLOCK_GetPllUsb1SWFreq>
60007a60:	2306      	movs	r3, #6
60007a62:	fbb0 f0f3 	udiv	r0, r0, r3
            break;
60007a66:	e7cc      	b.n	60007a02 <CLOCK_GetFreq+0x2a>
            freq = CLOCK_GetPllFreq(kCLOCK_PllSys);
60007a68:	480c      	ldr	r0, [pc, #48]	; (60007a9c <CLOCK_GetFreq+0xc4>)
60007a6a:	e7e0      	b.n	60007a2e <CLOCK_GetFreq+0x56>
            freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd0);
60007a6c:	2000      	movs	r0, #0
}
60007a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd3);
60007a72:	f7ff bebf 	b.w	600077f4 <CLOCK_GetSysPfdFreq>
            freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd1);
60007a76:	2001      	movs	r0, #1
60007a78:	e7f9      	b.n	60007a6e <CLOCK_GetFreq+0x96>
            freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd2);
60007a7a:	2002      	movs	r0, #2
60007a7c:	e7f7      	b.n	60007a6e <CLOCK_GetFreq+0x96>
            freq = CLOCK_GetSysPfdFreq(kCLOCK_Pfd3);
60007a7e:	2003      	movs	r0, #3
60007a80:	e7f5      	b.n	60007a6e <CLOCK_GetFreq+0x96>
            freq = CLOCK_GetPllFreq(kCLOCK_PllEnet);
60007a82:	4807      	ldr	r0, [pc, #28]	; (60007aa0 <CLOCK_GetFreq+0xc8>)
60007a84:	e7d3      	b.n	60007a2e <CLOCK_GetFreq+0x56>
            freq = CLOCK_GetPllFreq(kCLOCK_PllEnet25M);
60007a86:	4807      	ldr	r0, [pc, #28]	; (60007aa4 <CLOCK_GetFreq+0xcc>)
60007a88:	e7d1      	b.n	60007a2e <CLOCK_GetFreq+0x56>
            freq = CLOCK_GetPllFreq(kCLOCK_PllEnet500M);
60007a8a:	4807      	ldr	r0, [pc, #28]	; (60007aa8 <CLOCK_GetFreq+0xd0>)
60007a8c:	e7cf      	b.n	60007a2e <CLOCK_GetFreq+0x56>
            freq = CLOCK_GetPllFreq(kCLOCK_PllAudio);
60007a8e:	4807      	ldr	r0, [pc, #28]	; (60007aac <CLOCK_GetFreq+0xd4>)
60007a90:	e7cd      	b.n	60007a2e <CLOCK_GetFreq+0x56>
    switch (name)
60007a92:	2000      	movs	r0, #0
    return freq;
60007a94:	e7b5      	b.n	60007a02 <CLOCK_GetFreq+0x2a>
60007a96:	bf00      	nop
60007a98:	0010000d 	.word	0x0010000d
60007a9c:	0030000d 	.word	0x0030000d
60007aa0:	00e0000d 	.word	0x00e0000d
60007aa4:	00e00015 	.word	0x00e00015
60007aa8:	00e00016 	.word	0x00e00016
60007aac:	0070000d 	.word	0x0070000d

60007ab0 <SystemInit>:
    extern uint32_t g_pfnVectors[];  // Vector table defined in startup code
    SCB->VTOR = (uint32_t)g_pfnVectors;
#endif

/* Disable Watchdog Power Down Counter */
    WDOG1->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
60007ab0:	492d      	ldr	r1, [pc, #180]	; (60007b68 <SystemInit+0xb8>)
    WDOG2->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
60007ab2:	4a2e      	ldr	r2, [pc, #184]	; (60007b6c <SystemInit+0xbc>)
void SystemInit (void) {
60007ab4:	b508      	push	{r3, lr}
    WDOG1->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
60007ab6:	890b      	ldrh	r3, [r1, #8]
60007ab8:	f023 0301 	bic.w	r3, r3, #1
60007abc:	041b      	lsls	r3, r3, #16
60007abe:	0c1b      	lsrs	r3, r3, #16
60007ac0:	810b      	strh	r3, [r1, #8]
    WDOG2->WMCR &= ~(uint16_t) WDOG_WMCR_PDE_MASK;
60007ac2:	8913      	ldrh	r3, [r2, #8]
60007ac4:	f023 0301 	bic.w	r3, r3, #1
60007ac8:	041b      	lsls	r3, r3, #16
60007aca:	0c1b      	lsrs	r3, r3, #16
60007acc:	8113      	strh	r3, [r2, #8]

/* Watchdog disable */

#if (DISABLE_WDOG)
    if ((WDOG1->WCR & WDOG_WCR_WDE_MASK) != 0U)
60007ace:	880b      	ldrh	r3, [r1, #0]
60007ad0:	0758      	lsls	r0, r3, #29
60007ad2:	d505      	bpl.n	60007ae0 <SystemInit+0x30>
    {
        WDOG1->WCR &= ~(uint16_t) WDOG_WCR_WDE_MASK;
60007ad4:	880b      	ldrh	r3, [r1, #0]
60007ad6:	f023 0304 	bic.w	r3, r3, #4
60007ada:	041b      	lsls	r3, r3, #16
60007adc:	0c1b      	lsrs	r3, r3, #16
60007ade:	800b      	strh	r3, [r1, #0]
    }
    if ((WDOG2->WCR & WDOG_WCR_WDE_MASK) != 0U)
60007ae0:	8813      	ldrh	r3, [r2, #0]
60007ae2:	075b      	lsls	r3, r3, #29
60007ae4:	d505      	bpl.n	60007af2 <SystemInit+0x42>
    {
        WDOG2->WCR &= ~(uint16_t) WDOG_WCR_WDE_MASK;
60007ae6:	8813      	ldrh	r3, [r2, #0]
60007ae8:	f023 0304 	bic.w	r3, r3, #4
60007aec:	041b      	lsls	r3, r3, #16
60007aee:	0c1b      	lsrs	r3, r3, #16
60007af0:	8013      	strh	r3, [r2, #0]
    }
    if ((RTWDOG->CS & RTWDOG_CS_CMD32EN_MASK) != 0U)
60007af2:	4b1f      	ldr	r3, [pc, #124]	; (60007b70 <SystemInit+0xc0>)
60007af4:	681a      	ldr	r2, [r3, #0]
60007af6:	0490      	lsls	r0, r2, #18
60007af8:	d530      	bpl.n	60007b5c <SystemInit+0xac>
    {
        RTWDOG->CNT = 0xD928C520U; /* 0xD928C520U is the update key */
60007afa:	4a1e      	ldr	r2, [pc, #120]	; (60007b74 <SystemInit+0xc4>)
    }
    else
    {
        RTWDOG->CNT = 0xC520U;
        RTWDOG->CNT = 0xD928U;
60007afc:	605a      	str	r2, [r3, #4]
    }
    RTWDOG->TOVAL = 0xFFFF;
60007afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
60007b02:	609a      	str	r2, [r3, #8]
    RTWDOG->CS = (uint32_t) ((RTWDOG->CS) & ~RTWDOG_CS_EN_MASK) | RTWDOG_CS_UPDATE_MASK;
60007b04:	681a      	ldr	r2, [r3, #0]
60007b06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
60007b0a:	f042 0220 	orr.w	r2, r2, #32
60007b0e:	601a      	str	r2, [r3, #0]
#endif /* (DISABLE_WDOG) */

    /* Disable Systick which might be enabled by bootrom */
    if ((SysTick->CTRL & SysTick_CTRL_ENABLE_Msk) != 0U)
60007b10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60007b14:	691a      	ldr	r2, [r3, #16]
60007b16:	07d1      	lsls	r1, r2, #31
60007b18:	d503      	bpl.n	60007b22 <SystemInit+0x72>
    {
        SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
60007b1a:	691a      	ldr	r2, [r3, #16]
60007b1c:	f022 0201 	bic.w	r2, r2, #1
60007b20:	611a      	str	r2, [r3, #16]
    }

/* Enable instruction and data caches */
#if defined(__ICACHE_PRESENT) && __ICACHE_PRESENT
    if (SCB_CCR_IC_Msk != (SCB_CCR_IC_Msk & SCB->CCR)) {
60007b22:	4b15      	ldr	r3, [pc, #84]	; (60007b78 <SystemInit+0xc8>)
60007b24:	695a      	ldr	r2, [r3, #20]
60007b26:	0392      	lsls	r2, r2, #14
60007b28:	d415      	bmi.n	60007b56 <SystemInit+0xa6>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
60007b2a:	695a      	ldr	r2, [r3, #20]
60007b2c:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
60007b30:	d111      	bne.n	60007b56 <SystemInit+0xa6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
60007b32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
60007b36:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
60007b3a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
60007b3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
60007b42:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
60007b46:	695a      	ldr	r2, [r3, #20]
60007b48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
60007b4c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
60007b4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
60007b52:	f3bf 8f6f 	isb	sy
        SCB_EnableICache();
    }
#endif

  SystemInitHook();
60007b56:	f002 fd8e 	bl	6000a676 <SystemInitHook>
}
60007b5a:	bd08      	pop	{r3, pc}
        RTWDOG->CNT = 0xC520U;
60007b5c:	f24c 5220 	movw	r2, #50464	; 0xc520
60007b60:	605a      	str	r2, [r3, #4]
        RTWDOG->CNT = 0xD928U;
60007b62:	f64d 1228 	movw	r2, #55592	; 0xd928
60007b66:	e7c9      	b.n	60007afc <SystemInit+0x4c>
60007b68:	400b8000 	.word	0x400b8000
60007b6c:	400d0000 	.word	0x400d0000
60007b70:	400bc000 	.word	0x400bc000
60007b74:	d928c520 	.word	0xd928c520
60007b78:	e000ed00 	.word	0xe000ed00

60007b7c <EDMA_Init>:
 * param base eDMA peripheral base address.
 * param config A pointer to the configuration structure, see "edma_config_t".
 * note This function enables the minor loop map feature.
 */
void EDMA_Init(DMA_Type *base, const edma_config_t *config)
{
60007b7c:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
60007b7e:	4c12      	ldr	r4, [pc, #72]	; (60007bc8 <EDMA_Init+0x4c>)
60007b80:	f104 037c 	add.w	r3, r4, #124	; 0x7c
60007b84:	e853 3f00 	ldrex	r3, [r3]

static inline void _SDK_AtomicLocalClearAndSet4Byte(volatile uint32_t *addr, uint32_t clearBits, uint32_t setBits)
{
    uint32_t s_val;

    _SDK_ATOMIC_LOCAL_OPS_4BYTE(addr, s_val, s_val = (s_val & ~clearBits) | setBits);
60007b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
60007b8c:	f104 0c7c 	add.w	ip, r4, #124	; 0x7c
60007b90:	e84c 3200 	strex	r2, r3, [ip]
60007b94:	2a00      	cmp	r2, #0
60007b96:	d1f3      	bne.n	60007b80 <EDMA_Init+0x4>
    CLOCK_EnableClock(s_edmaClockName[EDMA_GetInstance(base)]);
#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */

    /* clear all the enabled request, status to make sure EDMA status is in normal condition */
    base->ERQ = 0U;
    base->INT = 0xFFFFFFFFU;
60007b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    base->ERQ = 0U;
60007b9c:	60c2      	str	r2, [r0, #12]
    base->INT = 0xFFFFFFFFU;
60007b9e:	6243      	str	r3, [r0, #36]	; 0x24
    base->ERR = 0xFFFFFFFFU;
60007ba0:	62c3      	str	r3, [r0, #44]	; 0x2c
    /* Configure EDMA peripheral according to the configuration structure. */
    tmpreg = base->CR;
60007ba2:	6803      	ldr	r3, [r0, #0]
    tmpreg &= ~(DMA_CR_ERCA_MASK | DMA_CR_HOE_MASK | DMA_CR_CLM_MASK | DMA_CR_EDBG_MASK);
    tmpreg |= (DMA_CR_ERCA(config->enableRoundRobinArbitration) | DMA_CR_HOE(config->enableHaltOnError) |
               DMA_CR_CLM(config->enableContinuousLinkMode) | DMA_CR_EDBG(config->enableDebugMode) | DMA_CR_EMLM(1U));
60007ba4:	78ca      	ldrb	r2, [r1, #3]
    tmpreg &= ~(DMA_CR_ERCA_MASK | DMA_CR_HOE_MASK | DMA_CR_CLM_MASK | DMA_CR_EDBG_MASK);
60007ba6:	f023 0356 	bic.w	r3, r3, #86	; 0x56
    tmpreg |= (DMA_CR_ERCA(config->enableRoundRobinArbitration) | DMA_CR_HOE(config->enableHaltOnError) |
60007baa:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
60007bae:	788a      	ldrb	r2, [r1, #2]
60007bb0:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
60007bb4:	784a      	ldrb	r2, [r1, #1]
60007bb6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               DMA_CR_CLM(config->enableContinuousLinkMode) | DMA_CR_EDBG(config->enableDebugMode) | DMA_CR_EMLM(1U));
60007bba:	780a      	ldrb	r2, [r1, #0]
    tmpreg |= (DMA_CR_ERCA(config->enableRoundRobinArbitration) | DMA_CR_HOE(config->enableHaltOnError) |
60007bbc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
60007bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    base->CR = tmpreg;
60007bc4:	6003      	str	r3, [r0, #0]
}
60007bc6:	bd10      	pop	{r4, pc}
60007bc8:	400fc000 	.word	0x400fc000

60007bcc <EDMA_CreateHandle>:
 *               parameters.
 * param base eDMA peripheral base address.
 * param channel eDMA channel number.
 */
void EDMA_CreateHandle(edma_handle_t *handle, DMA_Type *base, uint32_t channel)
{
60007bcc:	b570      	push	{r4, r5, r6, lr}
60007bce:	460e      	mov	r6, r1
60007bd0:	4615      	mov	r5, r2
    uint32_t edmaInstance;
    uint32_t channelIndex;
    edma_tcd_t *tcdRegs;

    /* Zero the handle */
    (void)memset(handle, 0, sizeof(*handle));
60007bd2:	2100      	movs	r1, #0
60007bd4:	2218      	movs	r2, #24
{
60007bd6:	4604      	mov	r4, r0
    (void)memset(handle, 0, sizeof(*handle));
60007bd8:	f002 f8b2 	bl	60009d40 <memset>
        if (s_edmaBases[instance] == base)
60007bdc:	4b15      	ldr	r3, [pc, #84]	; (60007c34 <EDMA_CreateHandle+0x68>)

    handle->base    = base;
60007bde:	60a6      	str	r6, [r4, #8]
        if (s_edmaBases[instance] == base)
60007be0:	1af6      	subs	r6, r6, r3
    handle->channel = (uint8_t)channel;
60007be2:	7425      	strb	r5, [r4, #16]

    /* Get the DMA instance number */
    edmaInstance = EDMA_GetInstance(base);
    channelIndex = (EDMA_GetInstanceOffset(edmaInstance) * (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL) + channel;
    s_EDMAHandle[channelIndex] = handle;
60007be4:	4b14      	ldr	r3, [pc, #80]	; (60007c38 <EDMA_CreateHandle+0x6c>)
        if (s_edmaBases[instance] == base)
60007be6:	bf18      	it	ne
60007be8:	2601      	movne	r6, #1
    s_EDMAHandle[channelIndex] = handle;
60007bea:	eb05 1546 	add.w	r5, r5, r6, lsl #5
60007bee:	f843 4025 	str.w	r4, [r3, r5, lsl #2]

    /* Enable NVIC interrupt */
    (void)EnableIRQ(s_edmaIRQNumber[edmaInstance][channel]);
60007bf2:	4b12      	ldr	r3, [pc, #72]	; (60007c3c <EDMA_CreateHandle+0x70>)
60007bf4:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
60007bf8:	2b00      	cmp	r3, #0
60007bfa:	db08      	blt.n	60007c0e <EDMA_CreateHandle+0x42>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
60007bfc:	2201      	movs	r2, #1
60007bfe:	0959      	lsrs	r1, r3, #5
60007c00:	f003 031f 	and.w	r3, r3, #31
60007c04:	fa02 f303 	lsl.w	r3, r2, r3
60007c08:	4a0d      	ldr	r2, [pc, #52]	; (60007c40 <EDMA_CreateHandle+0x74>)
60007c0a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    /*
       Reset TCD registers to zero. Unlike the EDMA_TcdReset(DREQ will be set),
       CSR will be 0. Because in order to suit EDMA busy check mechanism in
       EDMA_SubmitTransfer, CSR must be set 0.
    */
    tcdRegs            = (edma_tcd_t *)(uint32_t)&handle->base->TCD[handle->channel];
60007c0e:	7c23      	ldrb	r3, [r4, #16]
    tcdRegs->SADDR     = 0;
60007c10:	2200      	movs	r2, #0
    tcdRegs            = (edma_tcd_t *)(uint32_t)&handle->base->TCD[handle->channel];
60007c12:	68a1      	ldr	r1, [r4, #8]
60007c14:	3380      	adds	r3, #128	; 0x80
60007c16:	0158      	lsls	r0, r3, #5
60007c18:	eb01 1343 	add.w	r3, r1, r3, lsl #5
    tcdRegs->SADDR     = 0;
60007c1c:	500a      	str	r2, [r1, r0]
    tcdRegs->SOFF      = 0;
60007c1e:	809a      	strh	r2, [r3, #4]
    tcdRegs->ATTR      = 0;
60007c20:	80da      	strh	r2, [r3, #6]
    tcdRegs->NBYTES    = 0;
60007c22:	609a      	str	r2, [r3, #8]
    tcdRegs->SLAST     = 0;
60007c24:	60da      	str	r2, [r3, #12]
    tcdRegs->DADDR     = 0;
60007c26:	611a      	str	r2, [r3, #16]
    tcdRegs->DOFF      = 0;
60007c28:	829a      	strh	r2, [r3, #20]
    tcdRegs->CITER     = 0;
60007c2a:	82da      	strh	r2, [r3, #22]
    tcdRegs->DLAST_SGA = 0;
60007c2c:	619a      	str	r2, [r3, #24]
    tcdRegs->CSR       = 0;
60007c2e:	839a      	strh	r2, [r3, #28]
    tcdRegs->BITER     = 0;
60007c30:	83da      	strh	r2, [r3, #30]
}
60007c32:	bd70      	pop	{r4, r5, r6, pc}
60007c34:	400e8000 	.word	0x400e8000
60007c38:	80001bb8 	.word	0x80001bb8
60007c3c:	6000c324 	.word	0x6000c324
60007c40:	e000e100 	.word	0xe000e100

60007c44 <EDMA_PrepareTransferConfig>:
                                void *destAddr,
                                uint32_t destWidth,
                                int16_t destOffset,
                                uint32_t bytesEachRequest,
                                uint32_t transferBytes)
{
60007c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60007c48:	460f      	mov	r7, r1
60007c4a:	4615      	mov	r5, r2
    assert((transferBytes % bytesEachRequest) == 0U);
    assert((((uint32_t)(uint32_t *)srcAddr) % srcWidth) == 0U);
    assert((((uint32_t)(uint32_t *)destAddr) % destWidth) == 0U);

    /* Initializes the configure structure to zero. */
    (void)memset(config, 0, sizeof(*config));
60007c4c:	2100      	movs	r1, #0
60007c4e:	2218      	movs	r2, #24
{
60007c50:	4604      	mov	r4, r0
60007c52:	461e      	mov	r6, r3
60007c54:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    (void)memset(config, 0, sizeof(*config));
60007c58:	f002 f872 	bl	60009d40 <memset>

#if defined FSL_FEATURE_MEMORY_HAS_ADDRESS_OFFSET && FSL_FEATURE_MEMORY_HAS_ADDRESS_OFFSET
    config->srcAddr  = MEMORY_ConvertMemoryMapAddress((uint32_t)(uint32_t *)srcAddr, kMEMORY_Local2DMA);
    config->destAddr = MEMORY_ConvertMemoryMapAddress((uint32_t)(uint32_t *)destAddr, kMEMORY_Local2DMA);
#else
    config->destAddr = (uint32_t)(uint32_t *)destAddr;
60007c5c:	9b06      	ldr	r3, [sp, #24]
60007c5e:	1eaa      	subs	r2, r5, #2
    config->srcAddr  = (uint32_t)(uint32_t *)srcAddr;
#endif /* FSL_FEATURE_MEMORY_HAS_ADDRESS_OFFSET */
    config->minorLoopBytes   = bytesEachRequest;
60007c60:	f8c4 8010 	str.w	r8, [r4, #16]
60007c64:	2a1e      	cmp	r2, #30
    config->majorLoopCounts  = transferBytes / bytesEachRequest;
    config->srcTransferSize  = EDMA_TransferWidthMapping(srcWidth);
    config->destTransferSize = EDMA_TransferWidthMapping(destWidth);
    config->destOffset       = destOffset;
    config->srcOffset        = srcOffset;
60007c66:	8166      	strh	r6, [r4, #10]
    config->srcAddr  = (uint32_t)(uint32_t *)srcAddr;
60007c68:	e9c4 7300 	strd	r7, r3, [r4]
    config->majorLoopCounts  = transferBytes / bytesEachRequest;
60007c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
60007c6e:	fbb3 f3f8 	udiv	r3, r3, r8
60007c72:	6163      	str	r3, [r4, #20]
60007c74:	bf8e      	itee	hi
60007c76:	2300      	movhi	r3, #0
60007c78:	4b07      	ldrls	r3, [pc, #28]	; (60007c98 <EDMA_PrepareTransferConfig+0x54>)
60007c7a:	5c9b      	ldrbls	r3, [r3, r2]
    return transferSize;
60007c7c:	9a07      	ldr	r2, [sp, #28]
    config->srcTransferSize  = EDMA_TransferWidthMapping(srcWidth);
60007c7e:	7223      	strb	r3, [r4, #8]
    switch (width)
60007c80:	3a02      	subs	r2, #2
60007c82:	2a1e      	cmp	r2, #30
60007c84:	bf96      	itet	ls
60007c86:	4b04      	ldrls	r3, [pc, #16]	; (60007c98 <EDMA_PrepareTransferConfig+0x54>)
    config->srcTransferSize  = EDMA_TransferWidthMapping(srcWidth);
60007c88:	2300      	movhi	r3, #0
60007c8a:	5c9b      	ldrbls	r3, [r3, r2]
    config->destTransferSize = EDMA_TransferWidthMapping(destWidth);
60007c8c:	7263      	strb	r3, [r4, #9]
    config->destOffset       = destOffset;
60007c8e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
60007c92:	81a3      	strh	r3, [r4, #12]
}
60007c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60007c98:	6000ccda 	.word	0x6000ccda

60007c9c <DMAMUX_Init>:
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
60007c9c:	4a06      	ldr	r2, [pc, #24]	; (60007cb8 <DMAMUX_Init+0x1c>)
60007c9e:	f102 037c 	add.w	r3, r2, #124	; 0x7c
60007ca2:	e853 3f00 	ldrex	r3, [r3]
60007ca6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
60007caa:	f102 007c 	add.w	r0, r2, #124	; 0x7c
60007cae:	e840 3100 	strex	r1, r3, [r0]
60007cb2:	2900      	cmp	r1, #0
60007cb4:	d1f3      	bne.n	60007c9e <DMAMUX_Init+0x2>
void DMAMUX_Init(DMAMUX_Type *base)
{
#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
    CLOCK_EnableClock(s_dmamuxClockName[DMAMUX_GetInstance(base)]);
#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
}
60007cb6:	4770      	bx	lr
60007cb8:	400fc000 	.word	0x400fc000

60007cbc <CLOCK_ControlGate>:
    uint32_t shift = ((uint32_t)name) & 0x1FU;
    volatile uint32_t *reg;

    assert(index <= 6UL);

    reg = (volatile uint32_t *)((uint32_t)((volatile uint32_t *)&CCM->CCGR0) + sizeof(volatile uint32_t *) * index);
60007cbc:	4b09      	ldr	r3, [pc, #36]	; (60007ce4 <CLOCK_ControlGate+0x28>)
    uint32_t shift = ((uint32_t)name) & 0x1FU;
60007cbe:	f000 021f 	and.w	r2, r0, #31
    reg = (volatile uint32_t *)((uint32_t)((volatile uint32_t *)&CCM->CCGR0) + sizeof(volatile uint32_t *) * index);
60007cc2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (((uint32_t)value) << shift));
60007cc6:	2303      	movs	r3, #3
60007cc8:	4091      	lsls	r1, r2
60007cca:	4093      	lsls	r3, r2
    reg = (volatile uint32_t *)((uint32_t)((volatile uint32_t *)&CCM->CCGR0) + sizeof(volatile uint32_t *) * index);
60007ccc:	0080      	lsls	r0, r0, #2
60007cce:	43da      	mvns	r2, r3
{
60007cd0:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
60007cd2:	e850 3f00 	ldrex	r3, [r0]
60007cd6:	4013      	ands	r3, r2
60007cd8:	430b      	orrs	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
60007cda:	e840 3400 	strex	r4, r3, [r0]
60007cde:	2c00      	cmp	r4, #0
60007ce0:	d1f7      	bne.n	60007cd2 <CLOCK_ControlGate+0x16>
}
60007ce2:	bd10      	pop	{r4, pc}
60007ce4:	1003f01a 	.word	0x1003f01a

60007ce8 <EnableIRQ.isra.0>:
  if ((int32_t)(IRQn) >= 0)
60007ce8:	2800      	cmp	r0, #0
60007cea:	db07      	blt.n	60007cfc <EnableIRQ.isra.0+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
60007cec:	2301      	movs	r3, #1
60007cee:	0941      	lsrs	r1, r0, #5
60007cf0:	f000 001f 	and.w	r0, r0, #31
60007cf4:	4a02      	ldr	r2, [pc, #8]	; (60007d00 <EnableIRQ.isra.0+0x18>)
60007cf6:	4083      	lsls	r3, r0
60007cf8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        NVIC_EnableIRQ(interrupt);
#endif
    }

    return status;
}
60007cfc:	4770      	bx	lr
60007cfe:	bf00      	nop
60007d00:	e000e100 	.word	0xe000e100

60007d04 <LPSPI_GetInstance>:
        if (s_lpspiBases[instance] == base)
60007d04:	b1b0      	cbz	r0, 60007d34 <LPSPI_GetInstance+0x30>
60007d06:	4b0c      	ldr	r3, [pc, #48]	; (60007d38 <LPSPI_GetInstance+0x34>)
60007d08:	4298      	cmp	r0, r3
60007d0a:	d00e      	beq.n	60007d2a <LPSPI_GetInstance+0x26>
60007d0c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
60007d10:	4298      	cmp	r0, r3
60007d12:	d00c      	beq.n	60007d2e <LPSPI_GetInstance+0x2a>
60007d14:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
60007d18:	4298      	cmp	r0, r3
60007d1a:	d00a      	beq.n	60007d32 <LPSPI_GetInstance+0x2e>
    for (instance = 0; instance < ARRAY_SIZE(s_lpspiBases); instance++)
60007d1c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
60007d20:	4298      	cmp	r0, r3
60007d22:	bf14      	ite	ne
60007d24:	2005      	movne	r0, #5
60007d26:	2004      	moveq	r0, #4
60007d28:	4770      	bx	lr
60007d2a:	2001      	movs	r0, #1
60007d2c:	4770      	bx	lr
60007d2e:	2002      	movs	r0, #2
60007d30:	4770      	bx	lr
60007d32:	2003      	movs	r0, #3
}
60007d34:	4770      	bx	lr
60007d36:	bf00      	nop
60007d38:	40394000 	.word	0x40394000

60007d3c <LPSPI_SetDummyData>:
{
60007d3c:	b508      	push	{r3, lr}
    uint32_t instance          = LPSPI_GetInstance(base);
60007d3e:	f7ff ffe1 	bl	60007d04 <LPSPI_GetInstance>
    g_lpspiDummyData[instance] = dummyData;
60007d42:	4b01      	ldr	r3, [pc, #4]	; (60007d48 <LPSPI_SetDummyData+0xc>)
60007d44:	5419      	strb	r1, [r3, r0]
}
60007d46:	bd08      	pop	{r3, pc}
60007d48:	80001c66 	.word	0x80001c66

60007d4c <LPSPI_MasterGetDefaultConfig>:
    (void)memset(masterConfig, 0, sizeof(*masterConfig));
60007d4c:	221c      	movs	r2, #28
60007d4e:	2100      	movs	r1, #0
{
60007d50:	b510      	push	{r4, lr}
60007d52:	4604      	mov	r4, r0
    (void)memset(masterConfig, 0, sizeof(*masterConfig));
60007d54:	f001 fff4 	bl	60009d40 <memset>
    masterConfig->bitsPerFrame = 8;
60007d58:	4a06      	ldr	r2, [pc, #24]	; (60007d74 <LPSPI_MasterGetDefaultConfig+0x28>)
60007d5a:	2308      	movs	r3, #8
60007d5c:	e9c4 2300 	strd	r2, r3, [r4]
    masterConfig->cpol         = kLPSPI_ClockPolarityActiveHigh;
60007d60:	2300      	movs	r3, #0
    masterConfig->pcsToSckDelayInNanoSec        = 1000000000U / masterConfig->baudRate * 2U;
60007d62:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    masterConfig->cpol         = kLPSPI_ClockPolarityActiveHigh;
60007d66:	8123      	strh	r3, [r4, #8]
    masterConfig->direction    = kLPSPI_MsbFirst;
60007d68:	72a3      	strb	r3, [r4, #10]
    masterConfig->lastSckToPcsDelayInNanoSec    = 1000000000U / masterConfig->baudRate * 2U;
60007d6a:	e9c4 2203 	strd	r2, r2, [r4, #12]
    masterConfig->whichPcs           = kLPSPI_Pcs0;
60007d6e:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
60007d72:	bd10      	pop	{r4, pc}
60007d74:	0007a120 	.word	0x0007a120

60007d78 <LPSPI_MasterSetBaudRate>:
{
60007d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
60007d7c:	4604      	mov	r4, r0
    return (bool)((base->CFGR1) & LPSPI_CFGR1_MASTER_MASK);
60007d7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
    if ((!LPSPI_IsMaster(base)) || ((base->CR & LPSPI_CR_MEN_MASK) != 0U))
60007d80:	f010 0001 	ands.w	r0, r0, #1
{
60007d84:	e9cd 2300 	strd	r2, r3, [sp]
    if ((!LPSPI_IsMaster(base)) || ((base->CR & LPSPI_CR_MEN_MASK) != 0U))
60007d88:	d03b      	beq.n	60007e02 <LPSPI_MasterSetBaudRate+0x8a>
60007d8a:	6920      	ldr	r0, [r4, #16]
60007d8c:	f010 0001 	ands.w	r0, r0, #1
60007d90:	d13e      	bne.n	60007e10 <LPSPI_MasterSetBaudRate+0x98>
60007d92:	f8df b080 	ldr.w	fp, [pc, #128]	; 60007e14 <LPSPI_MasterSetBaudRate+0x9c>
    for (prescaler = 0U; prescaler < 8U; prescaler++)
60007d96:	4605      	mov	r5, r0
    bestScaler    = 255;
60007d98:	23ff      	movs	r3, #255	; 0xff
    bestPrescaler = 7;
60007d9a:	2707      	movs	r7, #7
    min_diff = 0xFFFFFFFFU;
60007d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            realBaudrate = (srcClock_Hz / (s_baudratePrescaler[prescaler] * (scaler + 2U)));
60007da0:	f81b ab01 	ldrb.w	sl, [fp], #1
60007da4:	469e      	mov	lr, r3
60007da6:	4680      	mov	r8, r0
        for (scaler = 0U; scaler < 256U; scaler++)
60007da8:	2300      	movs	r3, #0
60007daa:	ea4f 064a 	mov.w	r6, sl, lsl #1
            if (min_diff == 0U)
60007dae:	4694      	mov	ip, r2
            realBaudrate = (srcClock_Hz / (s_baudratePrescaler[prescaler] * (scaler + 2U)));
60007db0:	9a00      	ldr	r2, [sp, #0]
60007db2:	f103 0901 	add.w	r9, r3, #1
60007db6:	fbb2 f0f6 	udiv	r0, r2, r6
            if (desiredBaudrate >= realBaudrate)
60007dba:	4281      	cmp	r1, r0
60007dbc:	d302      	bcc.n	60007dc4 <LPSPI_MasterSetBaudRate+0x4c>
                diff = desiredBaudrate - realBaudrate;
60007dbe:	1a0a      	subs	r2, r1, r0
                if (min_diff > diff)
60007dc0:	4562      	cmp	r2, ip
60007dc2:	d30e      	bcc.n	60007de2 <LPSPI_MasterSetBaudRate+0x6a>
        for (scaler = 0U; scaler < 256U; scaler++)
60007dc4:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
60007dc8:	d01e      	beq.n	60007e08 <LPSPI_MasterSetBaudRate+0x90>
            if (min_diff == 0U)
60007dca:	4456      	add	r6, sl
60007dcc:	4662      	mov	r2, ip
60007dce:	4640      	mov	r0, r8
60007dd0:	4673      	mov	r3, lr
60007dd2:	e002      	b.n	60007dda <LPSPI_MasterSetBaudRate+0x62>
60007dd4:	4456      	add	r6, sl
60007dd6:	462f      	mov	r7, r5
60007dd8:	b13a      	cbz	r2, 60007dea <LPSPI_MasterSetBaudRate+0x72>
60007dda:	469e      	mov	lr, r3
60007ddc:	4680      	mov	r8, r0
60007dde:	464b      	mov	r3, r9
60007de0:	e7e5      	b.n	60007dae <LPSPI_MasterSetBaudRate+0x36>
        for (scaler = 0U; scaler < 256U; scaler++)
60007de2:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
60007de6:	d1f5      	bne.n	60007dd4 <LPSPI_MasterSetBaudRate+0x5c>
60007de8:	462f      	mov	r7, r5
    for (prescaler = 0U; prescaler < 8U; prescaler++)
60007dea:	3501      	adds	r5, #1
60007dec:	2d08      	cmp	r5, #8
60007dee:	d001      	beq.n	60007df4 <LPSPI_MasterSetBaudRate+0x7c>
        if (min_diff == 0U)
60007df0:	2a00      	cmp	r2, #0
60007df2:	d1d5      	bne.n	60007da0 <LPSPI_MasterSetBaudRate+0x28>
    base->CCR = (base->CCR & ~LPSPI_CCR_SCKDIV_MASK) | LPSPI_CCR_SCKDIV(bestScaler);
60007df4:	6c22      	ldr	r2, [r4, #64]	; 0x40
60007df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
60007dfa:	4313      	orrs	r3, r2
60007dfc:	6423      	str	r3, [r4, #64]	; 0x40
    *tcrPrescaleValue = bestPrescaler;
60007dfe:	9b01      	ldr	r3, [sp, #4]
60007e00:	601f      	str	r7, [r3, #0]
}
60007e02:	b003      	add	sp, #12
60007e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (scaler = 0U; scaler < 256U; scaler++)
60007e08:	4640      	mov	r0, r8
60007e0a:	4673      	mov	r3, lr
60007e0c:	4662      	mov	r2, ip
60007e0e:	e7ec      	b.n	60007dea <LPSPI_MasterSetBaudRate+0x72>
        return 0U;
60007e10:	2000      	movs	r0, #0
60007e12:	e7f6      	b.n	60007e02 <LPSPI_MasterSetBaudRate+0x8a>
60007e14:	6000ccf9 	.word	0x6000ccf9

60007e18 <LPSPI_MasterInit>:
{
60007e18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t tcrPrescaleValue = 0;
60007e1c:	2700      	movs	r7, #0
{
60007e1e:	4604      	mov	r4, r0
60007e20:	460d      	mov	r5, r1
 *
 * @param name  Which clock to enable, see \ref clock_ip_name_t.
 */
static inline void CLOCK_EnableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
60007e22:	2103      	movs	r1, #3
    uint32_t tcrPrescaleValue = 0;
60007e24:	9701      	str	r7, [sp, #4]
    uint32_t instance = LPSPI_GetInstance(base);
60007e26:	f7ff ff6d 	bl	60007d04 <LPSPI_GetInstance>
60007e2a:	4b34      	ldr	r3, [pc, #208]	; (60007efc <LPSPI_MasterInit+0xe4>)
{
60007e2c:	4616      	mov	r6, r2
    cfgr1Value = base->CFGR1 & ~(1UL << (LPSPI_CFGR1_PCSPOL_SHIFT + (uint32_t)pcs));
60007e2e:	f04f 0801 	mov.w	r8, #1
60007e32:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
60007e36:	f7ff ff41 	bl	60007cbc <CLOCK_ControlGate>
    base->CFGR1 = (base->CFGR1 & (~LPSPI_CFGR1_MASTER_MASK)) | LPSPI_CFGR1_MASTER(mode);
60007e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    (void)LPSPI_MasterSetBaudRate(base, masterConfig->baudRate, srcClock_Hz, &tcrPrescaleValue);
60007e3c:	4620      	mov	r0, r4
60007e3e:	f043 0301 	orr.w	r3, r3, #1
60007e42:	6263      	str	r3, [r4, #36]	; 0x24
    cfgr1Value = base->CFGR1 & ~(1UL << (LPSPI_CFGR1_PCSPOL_SHIFT + (uint32_t)pcs));
60007e44:	7e2a      	ldrb	r2, [r5, #24]
60007e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
60007e48:	3208      	adds	r2, #8
60007e4a:	fa08 f102 	lsl.w	r1, r8, r2
60007e4e:	ea23 0301 	bic.w	r3, r3, r1
    base->CFGR1 = cfgr1Value | ((uint32_t)activeLowOrHigh << (LPSPI_CFGR1_PCSPOL_SHIFT + (uint32_t)pcs));
60007e52:	7e69      	ldrb	r1, [r5, #25]
60007e54:	fa01 f202 	lsl.w	r2, r1, r2
60007e58:	4313      	orrs	r3, r2
60007e5a:	6263      	str	r3, [r4, #36]	; 0x24
                  LPSPI_CFGR1_OUTCFG(masterConfig->dataOutConfig) | LPSPI_CFGR1_PINCFG(masterConfig->pinCfg) |
60007e5c:	7eeb      	ldrb	r3, [r5, #27]
60007e5e:	7ea9      	ldrb	r1, [r5, #26]
    base->CFGR1 = (base->CFGR1 & ~(LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK | LPSPI_CFGR1_NOSTALL_MASK)) |
60007e60:	6a62      	ldr	r2, [r4, #36]	; 0x24
                  LPSPI_CFGR1_OUTCFG(masterConfig->dataOutConfig) | LPSPI_CFGR1_PINCFG(masterConfig->pinCfg) |
60007e62:	069b      	lsls	r3, r3, #26
60007e64:	0609      	lsls	r1, r1, #24
60007e66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    base->CFGR1 = (base->CFGR1 & ~(LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK | LPSPI_CFGR1_NOSTALL_MASK)) |
60007e6a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
                  LPSPI_CFGR1_OUTCFG(masterConfig->dataOutConfig) | LPSPI_CFGR1_PINCFG(masterConfig->pinCfg) |
60007e6e:	f001 7140 	and.w	r1, r1, #50331648	; 0x3000000
    base->CFGR1 = (base->CFGR1 & ~(LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK | LPSPI_CFGR1_NOSTALL_MASK)) |
60007e72:	f022 0208 	bic.w	r2, r2, #8
                  LPSPI_CFGR1_OUTCFG(masterConfig->dataOutConfig) | LPSPI_CFGR1_PINCFG(masterConfig->pinCfg) |
60007e76:	430b      	orrs	r3, r1
60007e78:	4313      	orrs	r3, r2
    (void)LPSPI_MasterSetBaudRate(base, masterConfig->baudRate, srcClock_Hz, &tcrPrescaleValue);
60007e7a:	4632      	mov	r2, r6
    base->CFGR1 = (base->CFGR1 & ~(LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK | LPSPI_CFGR1_NOSTALL_MASK)) |
60007e7c:	6263      	str	r3, [r4, #36]	; 0x24
    (void)LPSPI_MasterSetBaudRate(base, masterConfig->baudRate, srcClock_Hz, &tcrPrescaleValue);
60007e7e:	ab01      	add	r3, sp, #4
60007e80:	6829      	ldr	r1, [r5, #0]
60007e82:	f7ff ff79 	bl	60007d78 <LPSPI_MasterSetBaudRate>
    base->FCR = LPSPI_FCR_TXWATER(txWater) | LPSPI_FCR_RXWATER(rxWater);
60007e86:	65a7      	str	r7, [r4, #88]	; 0x58
                LPSPI_TCR_LSBF(masterConfig->direction) | LPSPI_TCR_FRAMESZ(masterConfig->bitsPerFrame - 1U) |
60007e88:	6869      	ldr	r1, [r5, #4]
    (void)LPSPI_MasterSetDelayTimes(base, masterConfig->pcsToSckDelayInNanoSec, kLPSPI_PcsToSck, srcClock_Hz);
60007e8a:	4642      	mov	r2, r8
    base->TCR = LPSPI_TCR_CPOL(masterConfig->cpol) | LPSPI_TCR_CPHA(masterConfig->cpha) |
60007e8c:	7a2b      	ldrb	r3, [r5, #8]
    (void)LPSPI_MasterSetDelayTimes(base, masterConfig->pcsToSckDelayInNanoSec, kLPSPI_PcsToSck, srcClock_Hz);
60007e8e:	4620      	mov	r0, r4
                LPSPI_TCR_LSBF(masterConfig->direction) | LPSPI_TCR_FRAMESZ(masterConfig->bitsPerFrame - 1U) |
60007e90:	3901      	subs	r1, #1
60007e92:	f3c1 010b 	ubfx	r1, r1, #0, #12
60007e96:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
                LPSPI_TCR_PRESCALE(tcrPrescaleValue) | LPSPI_TCR_PCS(masterConfig->whichPcs);
60007e9a:	9b01      	ldr	r3, [sp, #4]
60007e9c:	06db      	lsls	r3, r3, #27
60007e9e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
                LPSPI_TCR_LSBF(masterConfig->direction) | LPSPI_TCR_FRAMESZ(masterConfig->bitsPerFrame - 1U) |
60007ea2:	4319      	orrs	r1, r3
    base->TCR = LPSPI_TCR_CPOL(masterConfig->cpol) | LPSPI_TCR_CPHA(masterConfig->cpha) |
60007ea4:	7a6b      	ldrb	r3, [r5, #9]
60007ea6:	079b      	lsls	r3, r3, #30
60007ea8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
                LPSPI_TCR_LSBF(masterConfig->direction) | LPSPI_TCR_FRAMESZ(masterConfig->bitsPerFrame - 1U) |
60007eac:	4319      	orrs	r1, r3
60007eae:	7aab      	ldrb	r3, [r5, #10]
60007eb0:	05db      	lsls	r3, r3, #23
60007eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
60007eb6:	4319      	orrs	r1, r3
                LPSPI_TCR_PRESCALE(tcrPrescaleValue) | LPSPI_TCR_PCS(masterConfig->whichPcs);
60007eb8:	7e2b      	ldrb	r3, [r5, #24]
60007eba:	061b      	lsls	r3, r3, #24
60007ebc:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
60007ec0:	4319      	orrs	r1, r3
    base->TCR = LPSPI_TCR_CPOL(masterConfig->cpol) | LPSPI_TCR_CPHA(masterConfig->cpha) |
60007ec2:	6621      	str	r1, [r4, #96]	; 0x60
        base->CR |= LPSPI_CR_MEN_MASK;
60007ec4:	6923      	ldr	r3, [r4, #16]
60007ec6:	ea43 0308 	orr.w	r3, r3, r8
60007eca:	6123      	str	r3, [r4, #16]
    (void)LPSPI_MasterSetDelayTimes(base, masterConfig->pcsToSckDelayInNanoSec, kLPSPI_PcsToSck, srcClock_Hz);
60007ecc:	4633      	mov	r3, r6
60007ece:	68e9      	ldr	r1, [r5, #12]
60007ed0:	f7fb ff3e 	bl	60003d50 <LPSPI_MasterSetDelayTimes>
    (void)LPSPI_MasterSetDelayTimes(base, masterConfig->lastSckToPcsDelayInNanoSec, kLPSPI_LastSckToPcs, srcClock_Hz);
60007ed4:	4633      	mov	r3, r6
60007ed6:	6929      	ldr	r1, [r5, #16]
60007ed8:	2202      	movs	r2, #2
60007eda:	4620      	mov	r0, r4
60007edc:	f7fb ff38 	bl	60003d50 <LPSPI_MasterSetDelayTimes>
    (void)LPSPI_MasterSetDelayTimes(base, masterConfig->betweenTransferDelayInNanoSec, kLPSPI_BetweenTransfer,
60007ee0:	6969      	ldr	r1, [r5, #20]
60007ee2:	4633      	mov	r3, r6
60007ee4:	2203      	movs	r2, #3
60007ee6:	4620      	mov	r0, r4
60007ee8:	f7fb ff32 	bl	60003d50 <LPSPI_MasterSetDelayTimes>
    LPSPI_SetDummyData(base, LPSPI_DUMMY_DATA);
60007eec:	4639      	mov	r1, r7
60007eee:	4620      	mov	r0, r4
}
60007ef0:	b002      	add	sp, #8
60007ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LPSPI_SetDummyData(base, LPSPI_DUMMY_DATA);
60007ef6:	f7ff bf21 	b.w	60007d3c <LPSPI_SetDummyData>
60007efa:	bf00      	nop
60007efc:	6000c364 	.word	0x6000c364

60007f00 <LPSPI_MasterTransferCreateHandle>:
 */
void LPSPI_MasterTransferCreateHandle(LPSPI_Type *base,
                                      lpspi_master_handle_t *handle,
                                      lpspi_master_transfer_callback_t callback,
                                      void *userData)
{
60007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60007f02:	460c      	mov	r4, r1
60007f04:	4607      	mov	r7, r0
60007f06:	4616      	mov	r6, r2
    assert(handle != NULL);

    /* Zero the handle. */
    (void)memset(handle, 0, sizeof(*handle));
60007f08:	2100      	movs	r1, #0
60007f0a:	2238      	movs	r2, #56	; 0x38
60007f0c:	4620      	mov	r0, r4
{
60007f0e:	461d      	mov	r5, r3
    (void)memset(handle, 0, sizeof(*handle));
60007f10:	f001 ff16 	bl	60009d40 <memset>

    s_lpspiHandle[LPSPI_GetInstance(base)] = handle;
60007f14:	4638      	mov	r0, r7

    /* Set irq handler. */
    s_lpspiMasterIsr = LPSPI_MasterTransferHandleIRQ;
60007f16:	4a05      	ldr	r2, [pc, #20]	; (60007f2c <LPSPI_MasterTransferCreateHandle+0x2c>)
    s_lpspiHandle[LPSPI_GetInstance(base)] = handle;
60007f18:	f7ff fef4 	bl	60007d04 <LPSPI_GetInstance>
60007f1c:	4b04      	ldr	r3, [pc, #16]	; (60007f30 <LPSPI_MasterTransferCreateHandle+0x30>)
60007f1e:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
    s_lpspiMasterIsr = LPSPI_MasterTransferHandleIRQ;
60007f22:	4b04      	ldr	r3, [pc, #16]	; (60007f34 <LPSPI_MasterTransferCreateHandle+0x34>)

    handle->callback = callback;
    handle->userData = userData;
60007f24:	e9c4 650c 	strd	r6, r5, [r4, #48]	; 0x30
    s_lpspiMasterIsr = LPSPI_MasterTransferHandleIRQ;
60007f28:	601a      	str	r2, [r3, #0]
}
60007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
60007f2c:	6000ad61 	.word	0x6000ad61
60007f30:	80001c3c 	.word	0x80001c3c
60007f34:	80001c38 	.word	0x80001c38

60007f38 <LPSPI_MasterTransferNonBlocking>:
 * param handle pointer to lpspi_master_handle_t structure which stores the transfer state.
 * param transfer pointer to lpspi_transfer_t structure.
 * return status of status_t.
 */
status_t LPSPI_MasterTransferNonBlocking(LPSPI_Type *base, lpspi_master_handle_t *handle, lpspi_transfer_t *transfer)
{
60007f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert(handle != NULL);
    assert(transfer != NULL);

    /* Check that we're not busy.*/
    if (handle->state == (uint8_t)kLPSPI_Busy)
60007f3c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
{
60007f40:	4605      	mov	r5, r0
60007f42:	460c      	mov	r4, r1
60007f44:	4616      	mov	r6, r2
    if (handle->state == (uint8_t)kLPSPI_Busy)
60007f46:	2b01      	cmp	r3, #1
60007f48:	f000 80fa 	beq.w	60008140 <LPSPI_MasterTransferNonBlocking+0x208>
        base->CR &= ~LPSPI_CR_MEN_MASK;
60007f4c:	6903      	ldr	r3, [r0, #16]
        return kStatus_LPSPI_Busy;
    }

    LPSPI_Enable(base, false);
    /* Check arguements */
    if (!LPSPI_CheckTransferArgument(base, transfer, false))
60007f4e:	2200      	movs	r2, #0
60007f50:	4631      	mov	r1, r6
60007f52:	f023 0301 	bic.w	r3, r3, #1
60007f56:	6103      	str	r3, [r0, #16]
60007f58:	f002 ffbc 	bl	6000aed4 <LPSPI_CheckTransferArgument>
60007f5c:	4607      	mov	r7, r0
60007f5e:	2800      	cmp	r0, #0
60007f60:	f000 80f1 	beq.w	60008146 <LPSPI_MasterTransferNonBlocking+0x20e>
    base->CR |= ((uint32_t)flushTxFifo << LPSPI_CR_RTF_SHIFT) | ((uint32_t)flushRxFifo << LPSPI_CR_RRF_SHIFT);
60007f64:	692b      	ldr	r3, [r5, #16]
    LPSPI_DisableInterrupts(base, (uint32_t)kLPSPI_AllInterruptEnable);

    /* Variables */
    bool isRxMask = false;
    uint8_t txWatermark;
    uint8_t dummyData = g_lpspiDummyData[LPSPI_GetInstance(base)];
60007f66:	4628      	mov	r0, r5
60007f68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
60007f6c:	612b      	str	r3, [r5, #16]
    base->SR = statusFlags; /*!< The status flags are cleared by writing 1 (w1c).*/
60007f6e:	4b77      	ldr	r3, [pc, #476]	; (6000814c <LPSPI_MasterTransferNonBlocking+0x214>)
60007f70:	616b      	str	r3, [r5, #20]
    base->IER &= ~mask;
60007f72:	69ab      	ldr	r3, [r5, #24]
60007f74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
60007f78:	f023 0303 	bic.w	r3, r3, #3
60007f7c:	61ab      	str	r3, [r5, #24]
60007f7e:	f7ff fec1 	bl	60007d04 <LPSPI_GetInstance>
60007f82:	4b73      	ldr	r3, [pc, #460]	; (60008150 <LPSPI_MasterTransferNonBlocking+0x218>)
    uint32_t tmpTimes;
    uint32_t whichPcs = (transfer->configFlags & LPSPI_MASTER_PCS_MASK) >> LPSPI_MASTER_PCS_SHIFT;
60007f84:	68f1      	ldr	r1, [r6, #12]
    uint8_t dummyData = g_lpspiDummyData[LPSPI_GetInstance(base)];
60007f86:	f813 c000 	ldrb.w	ip, [r3, r0]
    uint32_t temp     = (base->CFGR1 & LPSPI_CFGR1_PINCFG_MASK);
60007f8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    uint32_t whichPcs = (transfer->configFlags & LPSPI_MASTER_PCS_MASK) >> LPSPI_MASTER_PCS_SHIFT;
60007f8c:	0909      	lsrs	r1, r1, #4
    uint8_t dummyData = g_lpspiDummyData[LPSPI_GetInstance(base)];
60007f8e:	fa5f fc8c 	uxtb.w	ip, ip
    uint32_t temp     = (base->CFGR1 & LPSPI_CFGR1_PINCFG_MASK);
60007f92:	f003 7e40 	and.w	lr, r3, #50331648	; 0x3000000

    /* Assign the original value for members of transfer handle. */
    handle->state                = (uint8_t)kLPSPI_Busy;
60007f96:	2301      	movs	r3, #1
60007f98:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    handle->txData               = transfer->txData;
60007f9c:	6833      	ldr	r3, [r6, #0]
60007f9e:	60e3      	str	r3, [r4, #12]
    handle->rxData               = transfer->rxData;
60007fa0:	6873      	ldr	r3, [r6, #4]
60007fa2:	6123      	str	r3, [r4, #16]
    handle->txRemainingByteCount = transfer->dataSize;
60007fa4:	68b3      	ldr	r3, [r6, #8]
60007fa6:	6163      	str	r3, [r4, #20]
    handle->rxRemainingByteCount = transfer->dataSize;
60007fa8:	68b3      	ldr	r3, [r6, #8]
60007faa:	61a3      	str	r3, [r4, #24]
    handle->totalByteCount       = transfer->dataSize;
60007fac:	68b3      	ldr	r3, [r6, #8]
    handle->writeTcrInIsr        = false;
60007fae:	7062      	strb	r2, [r4, #1]
    handle->totalByteCount       = transfer->dataSize;
60007fb0:	6263      	str	r3, [r4, #36]	; 0x24
    handle->bytesPerFrame = (uint16_t)((base->TCR & LPSPI_TCR_FRAMESZ_MASK) >> LPSPI_TCR_FRAMESZ_SHIFT) / 8U + 1U;
60007fb2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
60007fb4:	f3c3 03c8 	ubfx	r3, r3, #3, #9
60007fb8:	3301      	adds	r3, #1
60007fba:	80a3      	strh	r3, [r4, #4]
    /* No need to configure PCS continous if the transfer byte count is smaller than frame size */
    bool isPcsContinuous = (((transfer->configFlags & (uint32_t)kLPSPI_MasterPcsContinuous) != 0U) &&
60007fbc:	68f3      	ldr	r3, [r6, #12]
60007fbe:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
60007fc2:	d006      	beq.n	60007fd2 <LPSPI_MasterTransferNonBlocking+0x9a>
                            (transfer->dataSize > handle->bytesPerFrame));
60007fc4:	68b3      	ldr	r3, [r6, #8]
60007fc6:	88a2      	ldrh	r2, [r4, #4]
60007fc8:	b292      	uxth	r2, r2
    bool isPcsContinuous = (((transfer->configFlags & (uint32_t)kLPSPI_MasterPcsContinuous) != 0U) &&
60007fca:	4293      	cmp	r3, r2
60007fcc:	bf94      	ite	ls
60007fce:	2300      	movls	r3, #0
60007fd0:	2301      	movhi	r3, #1
    handle->writeRegRemainingTimes =
        (transfer->dataSize / (uint32_t)handle->bytesPerFrame) * (((uint32_t)handle->bytesPerFrame + 3U) / 4U);
60007fd2:	f8d6 9008 	ldr.w	r9, [r6, #8]
60007fd6:	f8b4 a004 	ldrh.w	sl, [r4, #4]
60007fda:	88a2      	ldrh	r2, [r4, #4]
60007fdc:	fa1f fa8a 	uxth.w	sl, sl
60007fe0:	b292      	uxth	r2, r2
60007fe2:	fbb9 f9fa 	udiv	r9, r9, sl
60007fe6:	3203      	adds	r2, #3
60007fe8:	0892      	lsrs	r2, r2, #2
60007fea:	fb09 f202 	mul.w	r2, r9, r2
    handle->writeRegRemainingTimes =
60007fee:	61e2      	str	r2, [r4, #28]
    handle->readRegRemainingTimes = handle->writeRegRemainingTimes;
60007ff0:	69e2      	ldr	r2, [r4, #28]
60007ff2:	6222      	str	r2, [r4, #32]
    handle->txBuffIfNull =
        ((uint32_t)dummyData) | ((uint32_t)dummyData << 8) | ((uint32_t)dummyData << 16) | ((uint32_t)dummyData << 24);
60007ff4:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
60007ff8:	fb02 f20c 	mul.w	r2, r2, ip
    handle->txBuffIfNull =
60007ffc:	62a2      	str	r2, [r4, #40]	; 0x28
    return (1U << ((base->PARAM & LPSPI_PARAM_RXFIFO_MASK) >> LPSPI_PARAM_RXFIFO_SHIFT));
60007ffe:	686a      	ldr	r2, [r5, #4]
60008000:	f3c2 2c07 	ubfx	ip, r2, #8, #8
60008004:	2201      	movs	r2, #1
60008006:	fa02 f20c 	lsl.w	r2, r2, ip
6000800a:	b2d2      	uxtb	r2, r2
    /*The TX and RX FIFO sizes are always the same*/
    handle->fifoSize        = LPSPI_GetRxFifoSize(base);
6000800c:	71a2      	strb	r2, [r4, #6]
    handle->isPcsContinuous = isPcsContinuous;
6000800e:	7023      	strb	r3, [r4, #0]
    handle->isByteSwap      = ((transfer->configFlags & (uint32_t)kLPSPI_MasterByteSwap) != 0U);
60008010:	68f2      	ldr	r2, [r6, #12]
60008012:	f3c2 5280 	ubfx	r2, r2, #22, #1
60008016:	70a2      	strb	r2, [r4, #2]
    /*Calculate the bytes for write/read the TX/RX register each time*/
    if (handle->bytesPerFrame <= 4U)
60008018:	88a2      	ldrh	r2, [r4, #4]
6000801a:	b292      	uxth	r2, r2
6000801c:	2a04      	cmp	r2, #4
6000801e:	d877      	bhi.n	60008110 <LPSPI_MasterTransferNonBlocking+0x1d8>
    {
        handle->bytesEachWrite = (uint8_t)handle->bytesPerFrame;
60008020:	88a2      	ldrh	r2, [r4, #4]
60008022:	b2d2      	uxtb	r2, r2
60008024:	7222      	strb	r2, [r4, #8]
        handle->bytesEachRead  = (uint8_t)handle->bytesPerFrame;
60008026:	88a2      	ldrh	r2, [r4, #4]
60008028:	b2d2      	uxtb	r2, r2
    }
    else
    {
        handle->bytesEachWrite = 4U;
        handle->bytesEachRead  = 4U;
6000802a:	7262      	strb	r2, [r4, #9]
    }

    /*Set the RX and TX watermarks to reduce the ISR times.*/
    if (handle->fifoSize > 1U)
6000802c:	79a2      	ldrb	r2, [r4, #6]
6000802e:	2a01      	cmp	r2, #1
60008030:	d971      	bls.n	60008116 <LPSPI_MasterTransferNonBlocking+0x1de>
    {
        txWatermark         = 1U;
        handle->rxWatermark = handle->fifoSize - 2U;
60008032:	79a2      	ldrb	r2, [r4, #6]
        txWatermark         = 1U;
60008034:	2601      	movs	r6, #1
        handle->rxWatermark = handle->fifoSize - 2U;
60008036:	3a02      	subs	r2, #2
60008038:	b2d2      	uxtb	r2, r2
6000803a:	71e2      	strb	r2, [r4, #7]
    else
    {
        txWatermark         = 0U;
        handle->rxWatermark = 0U;
    }
    LPSPI_SetFifoWatermarks(base, txWatermark, handle->rxWatermark);
6000803c:	79e2      	ldrb	r2, [r4, #7]
    base->FCR = LPSPI_FCR_TXWATER(txWater) | LPSPI_FCR_RXWATER(rxWater);
6000803e:	0412      	lsls	r2, r2, #16
60008040:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
60008044:	4332      	orrs	r2, r6
60008046:	65aa      	str	r2, [r5, #88]	; 0x58

    /* If there is no rxData, mask the receive data so that receive data is not stored in receive FIFO. */
    if (handle->rxData == NULL)
60008048:	6922      	ldr	r2, [r4, #16]
6000804a:	2a00      	cmp	r2, #0
6000804c:	d166      	bne.n	6000811c <LPSPI_MasterTransferNonBlocking+0x1e4>
    {
        isRxMask                     = true;
        handle->rxRemainingByteCount = 0;
6000804e:	61a2      	str	r2, [r4, #24]
    }

    /* Mask tx data in half duplex mode since the tx/rx share the same pin, so that the data received from slave is not
     * interfered. */
    if (((temp == LPSPI_CFGR1_PINCFG(kLPSPI_SdiInSdiOut)) || (temp == LPSPI_CFGR1_PINCFG(kLPSPI_SdoInSdoOut))) &&
60008050:	f1be 7f80 	cmp.w	lr, #16777216	; 0x1000000
60008054:	d002      	beq.n	6000805c <LPSPI_MasterTransferNonBlocking+0x124>
60008056:	f1be 7f00 	cmp.w	lr, #33554432	; 0x2000000
6000805a:	d103      	bne.n	60008064 <LPSPI_MasterTransferNonBlocking+0x12c>
        (handle->txData == NULL))
6000805c:	68e2      	ldr	r2, [r4, #12]
    if (((temp == LPSPI_CFGR1_PINCFG(kLPSPI_SdiInSdiOut)) || (temp == LPSPI_CFGR1_PINCFG(kLPSPI_SdoInSdoOut))) &&
6000805e:	b90a      	cbnz	r2, 60008064 <LPSPI_MasterTransferNonBlocking+0x12c>
    {
        handle->isTxMask = true;
60008060:	2201      	movs	r2, #1
60008062:	70e2      	strb	r2, [r4, #3]
    }

    /*Transfers will stall when transmit FIFO is empty or receive FIFO is full. */
    base->CFGR1 &= (~LPSPI_CFGR1_NOSTALL_MASK);
60008064:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    LPSPI_Enable(base, true);

    /* Configure transfer control register. */
    base->TCR = (base->TCR & ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK | LPSPI_TCR_RXMSK_MASK |
                               LPSPI_TCR_TXMSK_MASK | LPSPI_TCR_PCS_MASK)) |
                LPSPI_TCR_PCS(whichPcs);
60008066:	0609      	lsls	r1, r1, #24
    base->CFGR1 &= (~LPSPI_CFGR1_NOSTALL_MASK);
60008068:	f022 0208 	bic.w	r2, r2, #8
                LPSPI_TCR_PCS(whichPcs);
6000806c:	f001 7140 	and.w	r1, r1, #50331648	; 0x3000000
    base->CFGR1 &= (~LPSPI_CFGR1_NOSTALL_MASK);
60008070:	626a      	str	r2, [r5, #36]	; 0x24
        base->CR |= LPSPI_CR_MEN_MASK;
60008072:	692a      	ldr	r2, [r5, #16]
60008074:	f042 0201 	orr.w	r2, r2, #1
60008078:	612a      	str	r2, [r5, #16]
    base->TCR = (base->TCR & ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK | LPSPI_TCR_RXMSK_MASK |
6000807a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
6000807c:	f022 724f 	bic.w	r2, r2, #54263808	; 0x33c0000
                               LPSPI_TCR_TXMSK_MASK | LPSPI_TCR_PCS_MASK)) |
60008080:	4311      	orrs	r1, r2
    base->TCR = (base->TCR & ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK | LPSPI_TCR_RXMSK_MASK |
60008082:	6629      	str	r1, [r5, #96]	; 0x60
    return ((base->FSR & LPSPI_FSR_TXCOUNT_MASK) >> LPSPI_FSR_TXCOUNT_SHIFT);
60008084:	6dea      	ldr	r2, [r5, #92]	; 0x5c
{
#if SPI_RETRY_TIMES
    uint32_t waitTimes = SPI_RETRY_TIMES;
    while (((uint8_t)LPSPI_GetTxFifoCount(base) != 0U) && (--waitTimes != 0U))
#else
    while ((uint8_t)LPSPI_GetTxFifoCount(base) != 0U)
60008086:	06d2      	lsls	r2, r2, #27
60008088:	d1fc      	bne.n	60008084 <LPSPI_MasterTransferNonBlocking+0x14c>
    base->TCR |= LPSPI_TCR_CONT(isPcsContinuous) | LPSPI_TCR_CONTC(isPcsContinuous) | LPSPI_TCR_RXMSK(isRxMask);
6000808a:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
6000808e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
60008090:	434b      	muls	r3, r1
60008092:	4313      	orrs	r3, r2
60008094:	ea43 43c7 	orr.w	r3, r3, r7, lsl #19
60008098:	662b      	str	r3, [r5, #96]	; 0x60
    (void)EnableIRQ(s_lpspiIRQ[LPSPI_GetInstance(base)]);
6000809a:	4b2e      	ldr	r3, [pc, #184]	; (60008154 <LPSPI_MasterTransferNonBlocking+0x21c>)
6000809c:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
600080a0:	f7ff fe22 	bl	60007ce8 <EnableIRQ.isra.0>
600080a4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    while ((uint8_t)LPSPI_GetTxFifoCount(base) != 0U)
600080a6:	06db      	lsls	r3, r3, #27
600080a8:	d1fc      	bne.n	600080a4 <LPSPI_MasterTransferNonBlocking+0x16c>
    if (handle->isTxMask)
600080aa:	78e3      	ldrb	r3, [r4, #3]
600080ac:	2b00      	cmp	r3, #0
600080ae:	d037      	beq.n	60008120 <LPSPI_MasterTransferNonBlocking+0x1e8>
        base->TCR |= LPSPI_TCR_TXMSK_MASK;
600080b0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
600080b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
600080b6:	662b      	str	r3, [r5, #96]	; 0x60
        handle->txRemainingByteCount -= (uint32_t)handle->bytesPerFrame;
600080b8:	88a2      	ldrh	r2, [r4, #4]
600080ba:	6963      	ldr	r3, [r4, #20]
600080bc:	b292      	uxth	r2, r2
600080be:	1a9b      	subs	r3, r3, r2
600080c0:	6163      	str	r3, [r4, #20]
    if (handle->rxData != NULL)
600080c2:	6923      	ldr	r3, [r4, #16]
600080c4:	2b00      	cmp	r3, #0
600080c6:	d037      	beq.n	60008138 <LPSPI_MasterTransferNonBlocking+0x200>
        if (handle->isTxMask)
600080c8:	78e3      	ldrb	r3, [r4, #3]
600080ca:	b373      	cbz	r3, 6000812a <LPSPI_MasterTransferNonBlocking+0x1f2>
            if ((handle->bytesPerFrame / 4U) < (uint16_t)handle->rxWatermark)
600080cc:	88a3      	ldrh	r3, [r4, #4]
600080ce:	79e2      	ldrb	r2, [r4, #7]
600080d0:	f3c3 038d 	ubfx	r3, r3, #2, #14
600080d4:	4293      	cmp	r3, r2
600080d6:	d214      	bcs.n	60008102 <LPSPI_MasterTransferNonBlocking+0x1ca>
                    (uint8_t)(handle->bytesPerFrame / 4U) > 0U ? (uint8_t)(handle->bytesPerFrame / 4U - 1U) : 0U;
600080d8:	88a2      	ldrh	r2, [r4, #4]
                handle->rxWatermark =
600080da:	f412 7f7f 	tst.w	r2, #1020	; 0x3fc
                    (uint8_t)(handle->bytesPerFrame / 4U) > 0U ? (uint8_t)(handle->bytesPerFrame / 4U - 1U) : 0U;
600080de:	f3c2 0387 	ubfx	r3, r2, #2, #8
                handle->rxWatermark =
600080e2:	d004      	beq.n	600080ee <LPSPI_MasterTransferNonBlocking+0x1b6>
                    (uint8_t)(handle->bytesPerFrame / 4U) > 0U ? (uint8_t)(handle->bytesPerFrame / 4U - 1U) : 0U;
600080e4:	88a3      	ldrh	r3, [r4, #4]
600080e6:	f3c3 038d 	ubfx	r3, r3, #2, #14
                handle->rxWatermark =
600080ea:	3b01      	subs	r3, #1
600080ec:	b2db      	uxtb	r3, r3
600080ee:	71e3      	strb	r3, [r4, #7]
                base->FCR = (base->FCR & (~LPSPI_FCR_RXWATER_MASK)) | LPSPI_FCR_RXWATER(handle->rxWatermark);
600080f0:	6daa      	ldr	r2, [r5, #88]	; 0x58
600080f2:	79e3      	ldrb	r3, [r4, #7]
                base->FCR = (base->FCR & (~LPSPI_FCR_RXWATER_MASK)) | LPSPI_FCR_RXWATER(tmpTimes - 1U);
600080f4:	041b      	lsls	r3, r3, #16
600080f6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
600080fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
600080fe:	4313      	orrs	r3, r2
60008100:	65ab      	str	r3, [r5, #88]	; 0x58
    base->IER |= mask;
60008102:	69ab      	ldr	r3, [r5, #24]
60008104:	f043 0302 	orr.w	r3, r3, #2
    return kStatus_Success;
60008108:	2000      	movs	r0, #0
6000810a:	61ab      	str	r3, [r5, #24]
}
6000810c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        handle->bytesEachWrite = 4U;
60008110:	2204      	movs	r2, #4
60008112:	7222      	strb	r2, [r4, #8]
60008114:	e789      	b.n	6000802a <LPSPI_MasterTransferNonBlocking+0xf2>
        handle->rxWatermark = 0U;
60008116:	2600      	movs	r6, #0
60008118:	71e6      	strb	r6, [r4, #7]
6000811a:	e78f      	b.n	6000803c <LPSPI_MasterTransferNonBlocking+0x104>
    bool isRxMask = false;
6000811c:	2700      	movs	r7, #0
6000811e:	e797      	b.n	60008050 <LPSPI_MasterTransferNonBlocking+0x118>
        LPSPI_MasterTransferFillUpTxFifo(base, handle);
60008120:	4621      	mov	r1, r4
60008122:	4628      	mov	r0, r5
60008124:	f002 fda2 	bl	6000ac6c <LPSPI_MasterTransferFillUpTxFifo>
60008128:	e7cb      	b.n	600080c2 <LPSPI_MasterTransferNonBlocking+0x18a>
            tmpTimes = handle->readRegRemainingTimes;
6000812a:	6a23      	ldr	r3, [r4, #32]
            if (tmpTimes <= handle->rxWatermark)
6000812c:	79e2      	ldrb	r2, [r4, #7]
6000812e:	429a      	cmp	r2, r3
60008130:	d3e7      	bcc.n	60008102 <LPSPI_MasterTransferNonBlocking+0x1ca>
                base->FCR = (base->FCR & (~LPSPI_FCR_RXWATER_MASK)) | LPSPI_FCR_RXWATER(tmpTimes - 1U);
60008132:	6daa      	ldr	r2, [r5, #88]	; 0x58
60008134:	3b01      	subs	r3, #1
60008136:	e7dd      	b.n	600080f4 <LPSPI_MasterTransferNonBlocking+0x1bc>
60008138:	69ab      	ldr	r3, [r5, #24]
6000813a:	f043 0301 	orr.w	r3, r3, #1
6000813e:	e7e3      	b.n	60008108 <LPSPI_MasterTransferNonBlocking+0x1d0>
        return kStatus_LPSPI_Busy;
60008140:	f44f 70c8 	mov.w	r0, #400	; 0x190
60008144:	e7e2      	b.n	6000810c <LPSPI_MasterTransferNonBlocking+0x1d4>
        return kStatus_InvalidArgument;
60008146:	2004      	movs	r0, #4
60008148:	e7e0      	b.n	6000810c <LPSPI_MasterTransferNonBlocking+0x1d4>
6000814a:	bf00      	nop
6000814c:	01003f03 	.word	0x01003f03
60008150:	80001c66 	.word	0x80001c66
60008154:	6000c36e 	.word	0x6000c36e

60008158 <CLOCK_ControlGate>:
    reg = (volatile uint32_t *)((uint32_t)((volatile uint32_t *)&CCM->CCGR0) + sizeof(volatile uint32_t *) * index);
60008158:	4b09      	ldr	r3, [pc, #36]	; (60008180 <CLOCK_ControlGate+0x28>)
    uint32_t shift = ((uint32_t)name) & 0x1FU;
6000815a:	f000 021f 	and.w	r2, r0, #31
    reg = (volatile uint32_t *)((uint32_t)((volatile uint32_t *)&CCM->CCGR0) + sizeof(volatile uint32_t *) * index);
6000815e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
    SDK_ATOMIC_LOCAL_CLEAR_AND_SET(reg, (3UL << shift), (((uint32_t)value) << shift));
60008162:	2303      	movs	r3, #3
60008164:	4091      	lsls	r1, r2
60008166:	4093      	lsls	r3, r2
    reg = (volatile uint32_t *)((uint32_t)((volatile uint32_t *)&CCM->CCGR0) + sizeof(volatile uint32_t *) * index);
60008168:	0080      	lsls	r0, r0, #2
    _SDK_ATOMIC_LOCAL_OPS_4BYTE(addr, s_val, s_val = (s_val & ~clearBits) | setBits);
6000816a:	43da      	mvns	r2, r3
{
6000816c:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
6000816e:	e850 3f00 	ldrex	r3, [r0]
60008172:	4013      	ands	r3, r2
60008174:	430b      	orrs	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
60008176:	e840 3400 	strex	r4, r3, [r0]
6000817a:	2c00      	cmp	r4, #0
6000817c:	d1f7      	bne.n	6000816e <CLOCK_ControlGate+0x16>
}
6000817e:	bd10      	pop	{r4, pc}
60008180:	1003f01a 	.word	0x1003f01a

60008184 <LPUART_GetInstance>:
 *
 * param base LPUART peripheral base address.
 * return LPUART instance.
 */
uint32_t LPUART_GetInstance(LPUART_Type *base)
{
60008184:	4603      	mov	r3, r0
60008186:	4a05      	ldr	r2, [pc, #20]	; (6000819c <LPUART_GetInstance+0x18>)
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0U; instance < ARRAY_SIZE(s_lpuartBases); instance++)
60008188:	2000      	movs	r0, #0
    {
        if (s_lpuartBases[instance] == base)
6000818a:	f852 1b04 	ldr.w	r1, [r2], #4
6000818e:	4299      	cmp	r1, r3
60008190:	d002      	beq.n	60008198 <LPUART_GetInstance+0x14>
    for (instance = 0U; instance < ARRAY_SIZE(s_lpuartBases); instance++)
60008192:	3001      	adds	r0, #1
60008194:	2809      	cmp	r0, #9
60008196:	d1f8      	bne.n	6000818a <LPUART_GetInstance+0x6>
    }

    assert(instance < ARRAY_SIZE(s_lpuartBases));

    return instance;
}
60008198:	4770      	bx	lr
6000819a:	bf00      	nop
6000819c:	6000c2d0 	.word	0x6000c2d0

600081a0 <LPUART_Init>:
 * param srcClock_Hz LPUART clock source frequency in HZ.
 * retval kStatus_LPUART_BaudrateNotSupport Baudrate is not support in current clock source.
 * retval kStatus_Success LPUART initialize succeed
 */
status_t LPUART_Init(LPUART_Type *base, const lpuart_config_t *config, uint32_t srcClock_Hz)
{
600081a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    osr      = 0U;
    sbr      = 0U;
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
    {
        /* calculate the temporary sbr value   */
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
600081a4:	f04f 090a 	mov.w	r9, #10
    baudDiff = config->baudRate_Bps;
600081a8:	680b      	ldr	r3, [r1, #0]
    osr      = 0U;
600081aa:	2600      	movs	r6, #0
{
600081ac:	4604      	mov	r4, r0
600081ae:	460d      	mov	r5, r1
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
600081b0:	fb09 fa02 	mul.w	sl, r9, r2
600081b4:	ea4f 0883 	mov.w	r8, r3, lsl #2
    baudDiff = config->baudRate_Bps;
600081b8:	469e      	mov	lr, r3
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
600081ba:	f04f 0c04 	mov.w	ip, #4
    sbr      = 0U;
600081be:	4637      	mov	r7, r6
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
600081c0:	fbba f1f8 	udiv	r1, sl, r8
600081c4:	3105      	adds	r1, #5
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
600081c6:	4498      	add	r8, r3
        sbrTemp = (uint16_t)((srcClock_Hz * 10U / (config->baudRate_Bps * (uint32_t)osrTemp) + 5U) / 10U);
600081c8:	fbb1 f1f9 	udiv	r1, r1, r9
600081cc:	b289      	uxth	r1, r1
600081ce:	2901      	cmp	r1, #1
600081d0:	bf38      	it	cc
600081d2:	2101      	movcc	r1, #1
        if (sbrTemp == 0U)
        {
            sbrTemp = 1U;
        }
        /* Calculate the baud rate based on the temporary OSR and SBR values */
        calculatedBaud = (srcClock_Hz / ((uint32_t)osrTemp * (uint32_t)sbrTemp));
600081d4:	fb0c f001 	mul.w	r0, ip, r1
600081d8:	fbb2 f0f0 	udiv	r0, r2, r0
        tempDiff       = calculatedBaud > config->baudRate_Bps ? (calculatedBaud - config->baudRate_Bps) :
600081dc:	4283      	cmp	r3, r0
600081de:	bf34      	ite	cc
600081e0:	1ac0      	subcc	r0, r0, r3
600081e2:	1a18      	subcs	r0, r3, r0
                                                           (config->baudRate_Bps - calculatedBaud);

        if (tempDiff <= baudDiff)
600081e4:	4570      	cmp	r0, lr
600081e6:	bf98      	it	ls
600081e8:	fa5f f68c 	uxtbls.w	r6, ip
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
600081ec:	f10c 0c01 	add.w	ip, ip, #1
        if (tempDiff <= baudDiff)
600081f0:	bf9c      	itt	ls
600081f2:	4686      	movls	lr, r0
        {
            baudDiff = tempDiff;
            osr      = osrTemp; /* update and store the best OSR value calculated */
            sbr      = sbrTemp; /* update store the best SBR value calculated */
600081f4:	460f      	movls	r7, r1
    for (osrTemp = 4U; osrTemp <= 32U; osrTemp++)
600081f6:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
600081fa:	d1e1      	bne.n	600081c0 <LPUART_Init+0x20>
        }
    }

    /* Check to see if actual baud rate is within 3% of desired baud rate
     * based on the best calculate OSR value */
    if (baudDiff > ((config->baudRate_Bps / 100U) * 3U))
600081fc:	2264      	movs	r2, #100	; 0x64
600081fe:	fbb3 f3f2 	udiv	r3, r3, r2
60008202:	eb03 0343 	add.w	r3, r3, r3, lsl #1
60008206:	4573      	cmp	r3, lr
60008208:	f0c0 808e 	bcc.w	60008328 <LPUART_Init+0x188>
    }
    else
    {
#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

        uint32_t instance = LPUART_GetInstance(base);
6000820c:	4620      	mov	r0, r4
        temp &= ~LPUART_BAUD_OSR_MASK;
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);

        /* write the sbr value to the BAUD registers */
        temp &= ~LPUART_BAUD_SBR_MASK;
        base->BAUD = temp | LPUART_BAUD_SBR(sbr);
6000820e:	f3c7 070c 	ubfx	r7, r7, #0, #13
        uint32_t instance = LPUART_GetInstance(base);
60008212:	f7ff ffb7 	bl	60008184 <LPUART_GetInstance>
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
60008216:	4b46      	ldr	r3, [pc, #280]	; (60008330 <LPUART_Init+0x190>)
60008218:	2103      	movs	r1, #3
6000821a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
6000821e:	f7ff ff9b 	bl	60008158 <CLOCK_ControlGate>
 *
 * @param base LPUART peripheral base address.
 */
static inline void LPUART_SoftwareReset(LPUART_Type *base)
{
    base->GLOBAL |= LPUART_GLOBAL_RST_MASK;
60008222:	68a3      	ldr	r3, [r4, #8]
        if ((osr > 3U) && (osr < 8U))
60008224:	1f32      	subs	r2, r6, #4
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);
60008226:	3e01      	subs	r6, #1
60008228:	f043 0302 	orr.w	r3, r3, #2
        if ((osr > 3U) && (osr < 8U))
6000822c:	2a03      	cmp	r2, #3
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);
6000822e:	ea4f 6606 	mov.w	r6, r6, lsl #24
60008232:	60a3      	str	r3, [r4, #8]
    base->GLOBAL &= ~LPUART_GLOBAL_RST_MASK;
60008234:	68a3      	ldr	r3, [r4, #8]
60008236:	f006 56f8 	and.w	r6, r6, #520093696	; 0x1f000000
6000823a:	f023 0302 	bic.w	r3, r3, #2
6000823e:	60a3      	str	r3, [r4, #8]
        temp = base->BAUD;
60008240:	6923      	ldr	r3, [r4, #16]
            temp |= LPUART_BAUD_BOTHEDGE_MASK;
60008242:	bf98      	it	ls
60008244:	f443 3300 	orrls.w	r3, r3, #131072	; 0x20000
        temp |= LPUART_BAUD_OSR((uint32_t)osr - 1UL);
60008248:	f023 231f 	bic.w	r3, r3, #520101632	; 0x1f001f00
6000824c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
        temp &= ~LPUART_BAUD_SBR_MASK;
60008250:	4333      	orrs	r3, r6
        base->BAUD = temp | LPUART_BAUD_SBR(sbr);
60008252:	431f      	orrs	r7, r3
60008254:	6127      	str	r7, [r4, #16]

        /* Set bit count and parity mode. */
        base->BAUD &= ~LPUART_BAUD_M10_MASK;
60008256:	6923      	ldr	r3, [r4, #16]
60008258:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
6000825c:	6123      	str	r3, [r4, #16]

        temp = base->CTRL & ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
6000825e:	69a3      	ldr	r3, [r4, #24]
                              LPUART_CTRL_IDLECFG_MASK);

        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
60008260:	7bea      	ldrb	r2, [r5, #15]
        temp = base->CTRL & ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
60008262:	f423 63e2 	bic.w	r3, r3, #1808	; 0x710
        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
60008266:	7929      	ldrb	r1, [r5, #4]
60008268:	0212      	lsls	r2, r2, #8
        temp = base->CTRL & ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
6000826a:	f023 0307 	bic.w	r3, r3, #7
        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000826e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
60008272:	430b      	orrs	r3, r1
60008274:	431a      	orrs	r2, r3
                LPUART_CTRL_ILT(config->rxIdleType);
60008276:	7bab      	ldrb	r3, [r5, #14]
60008278:	009b      	lsls	r3, r3, #2
6000827a:	f003 0304 	and.w	r3, r3, #4
        temp |= (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) |
6000827e:	4313      	orrs	r3, r2

#if defined(FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT) && FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT
        if (kLPUART_SevenDataBits == config->dataBitsCount)
60008280:	796a      	ldrb	r2, [r5, #5]
60008282:	2a01      	cmp	r2, #1
60008284:	d14b      	bne.n	6000831e <LPUART_Init+0x17e>
        {
            if (kLPUART_ParityDisabled != config->parityMode)
60008286:	2900      	cmp	r1, #0
60008288:	d046      	beq.n	60008318 <LPUART_Init+0x178>
            {
                temp &= ~LPUART_CTRL_M7_MASK; /* Seven data bits and one parity bit */
6000828a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
            {
                temp |= LPUART_CTRL_M_MASK; /* Eight data bits and one parity bit */
            }
        }

        base->CTRL = temp;
6000828e:	61a3      	str	r3, [r4, #24]

#if defined(FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT
        /* set stop bit per char */
        temp       = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
        base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
60008290:	79eb      	ldrb	r3, [r5, #7]
        temp       = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
60008292:	6922      	ldr	r2, [r4, #16]
        base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
60008294:	035b      	lsls	r3, r3, #13
        temp       = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
60008296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
        base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
6000829a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
6000829e:	4313      	orrs	r3, r2
600082a0:	6123      	str	r3, [r4, #16]
           mark larger than 1.
           For example, if RX FIFO water mark is 2, upper layer needs 5 bytes and
           5 bytes are received. the last byte will be saved in FIFO but not trigger
           RX interrupt because the water mark is 2.
         */
        base->WATER = (((uint32_t)(config->rxFifoWatermark) << 16U) | config->txFifoWatermark);
600082a2:	7a6a      	ldrb	r2, [r5, #9]
600082a4:	7a2b      	ldrb	r3, [r5, #8]
600082a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
600082aa:	62e3      	str	r3, [r4, #44]	; 0x2c

        /* Enable tx/rx FIFO */
        base->FIFO |= (LPUART_FIFO_TXFE_MASK | LPUART_FIFO_RXFE_MASK);
600082ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
600082ae:	f043 0388 	orr.w	r3, r3, #136	; 0x88
600082b2:	62a3      	str	r3, [r4, #40]	; 0x28

        /* Flush FIFO */
        base->FIFO |= (LPUART_FIFO_TXFLUSH_MASK | LPUART_FIFO_RXFLUSH_MASK);
600082b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
600082b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
600082ba:	62a3      	str	r3, [r4, #40]	; 0x28
        temp |= (LPUART_STAT_MA1F_MASK | LPUART_STAT_MA2F_MASK);
#endif

#if defined(FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT) && FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT
        /* Set the CTS configuration/TX CTS source. */
        base->MODIR |= LPUART_MODIR_TXCTSC(config->txCtsConfig) | LPUART_MODIR_TXCTSSRC(config->txCtsSource);
600082bc:	7b6b      	ldrb	r3, [r5, #13]
600082be:	7b2a      	ldrb	r2, [r5, #12]
600082c0:	011b      	lsls	r3, r3, #4
600082c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
600082c4:	0152      	lsls	r2, r2, #5
600082c6:	f003 0310 	and.w	r3, r3, #16
600082ca:	f002 0220 	and.w	r2, r2, #32
600082ce:	4313      	orrs	r3, r2
600082d0:	430b      	orrs	r3, r1
600082d2:	6263      	str	r3, [r4, #36]	; 0x24
        if (true == config->enableRxRTS)
600082d4:	7aab      	ldrb	r3, [r5, #10]
600082d6:	b11b      	cbz	r3, 600082e0 <LPUART_Init+0x140>
        {
            /* Enable the receiver RTS(request-to-send) function. */
            base->MODIR |= LPUART_MODIR_RXRTSE_MASK;
600082d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
600082da:	f043 0308 	orr.w	r3, r3, #8
600082de:	6263      	str	r3, [r4, #36]	; 0x24
        }
        if (true == config->enableTxCTS)
600082e0:	7aeb      	ldrb	r3, [r5, #11]
600082e2:	b11b      	cbz	r3, 600082ec <LPUART_Init+0x14c>
        {
            /* Enable the CTS(clear-to-send) function. */
            base->MODIR |= LPUART_MODIR_TXCTSE_MASK;
600082e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
600082e6:	f043 0301 	orr.w	r3, r3, #1
600082ea:	6263      	str	r3, [r4, #36]	; 0x24
        }
#endif

        /* Set data bits order. */
        if (true == config->isMsb)
600082ec:	79a9      	ldrb	r1, [r5, #6]
        {
            temp |= LPUART_STAT_MSBF_MASK;
600082ee:	4b11      	ldr	r3, [pc, #68]	; (60008334 <LPUART_Init+0x194>)
600082f0:	4a11      	ldr	r2, [pc, #68]	; (60008338 <LPUART_Init+0x198>)
600082f2:	2900      	cmp	r1, #0
600082f4:	bf18      	it	ne
600082f6:	461a      	movne	r2, r3
        else
        {
            temp &= ~LPUART_STAT_MSBF_MASK;
        }

        base->STAT |= temp;
600082f8:	6963      	ldr	r3, [r4, #20]
600082fa:	4313      	orrs	r3, r2
600082fc:	6163      	str	r3, [r4, #20]

        /* Enable TX/RX base on configure structure. */
        temp = base->CTRL;
        if (true == config->enableTx)
600082fe:	7c2a      	ldrb	r2, [r5, #16]
        temp = base->CTRL;
60008300:	69a3      	ldr	r3, [r4, #24]
        if (true == config->enableTx)
60008302:	b10a      	cbz	r2, 60008308 <LPUART_Init+0x168>
        {
            temp |= LPUART_CTRL_TE_MASK;
60008304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
        }

        if (true == config->enableRx)
60008308:	7c6a      	ldrb	r2, [r5, #17]
6000830a:	b10a      	cbz	r2, 60008310 <LPUART_Init+0x170>
        {
            temp |= LPUART_CTRL_RE_MASK;
6000830c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    status_t status = kStatus_Success;
60008310:	2000      	movs	r0, #0
        }

        base->CTRL = temp;
60008312:	61a3      	str	r3, [r4, #24]
    }

    return status;
}
60008314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                temp |= LPUART_CTRL_M7_MASK;
60008318:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
6000831c:	e7b7      	b.n	6000828e <LPUART_Init+0xee>
            if (kLPUART_ParityDisabled != config->parityMode)
6000831e:	2900      	cmp	r1, #0
60008320:	d0b5      	beq.n	6000828e <LPUART_Init+0xee>
                temp |= LPUART_CTRL_M_MASK; /* Eight data bits and one parity bit */
60008322:	f043 0310 	orr.w	r3, r3, #16
60008326:	e7b2      	b.n	6000828e <LPUART_Init+0xee>
        status = kStatus_LPUART_BaudrateNotSupport;
60008328:	f240 5021 	movw	r0, #1313	; 0x521
    return status;
6000832c:	e7f2      	b.n	60008314 <LPUART_Init+0x174>
6000832e:	bf00      	nop
60008330:	6000c378 	.word	0x6000c378
60008334:	e01fc000 	.word	0xe01fc000
60008338:	c01fc000 	.word	0xc01fc000

6000833c <LPUART_Deinit>:
 * This function waits for transmit to complete, disables TX and RX, and disables the LPUART clock.
 *
 * param base LPUART peripheral base address.
 */
void LPUART_Deinit(LPUART_Type *base)
{
6000833c:	b510      	push	{r4, lr}
    uint32_t temp;

#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    /* Wait tx FIFO send out*/
    while (0U != ((base->WATER & LPUART_WATER_TXCOUNT_MASK) >> LPUART_WATER_TXWATER_SHIFT))
6000833e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
60008340:	f413 6fe0 	tst.w	r3, #1792	; 0x700
60008344:	d1fb      	bne.n	6000833e <LPUART_Deinit+0x2>
    {
    }
#endif
    /* Wait last char shift out */
    while (0U == (base->STAT & LPUART_STAT_TC_MASK))
60008346:	6943      	ldr	r3, [r0, #20]
60008348:	025b      	lsls	r3, r3, #9
6000834a:	d5fc      	bpl.n	60008346 <LPUART_Deinit+0xa>

#if defined(FSL_FEATURE_LPUART_HAS_ADDRESS_MATCHING) && FSL_FEATURE_LPUART_HAS_ADDRESS_MATCHING
    temp |= (LPUART_STAT_MA1F_MASK | LPUART_STAT_MA2F_MASK);
#endif

    base->STAT |= temp;
6000834c:	6943      	ldr	r3, [r0, #20]

    /* Disable the module. */
    base->CTRL = 0U;
6000834e:	2400      	movs	r4, #0
    base->STAT |= temp;
60008350:	f043 23c0 	orr.w	r3, r3, #3221274624	; 0xc000c000
60008354:	f443 13f8 	orr.w	r3, r3, #2031616	; 0x1f0000
60008358:	6143      	str	r3, [r0, #20]
    base->CTRL = 0U;
6000835a:	6184      	str	r4, [r0, #24]

#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
    uint32_t instance = LPUART_GetInstance(base);
6000835c:	f7ff ff12 	bl	60008184 <LPUART_GetInstance>
 *
 * @param name  Which clock to disable, see \ref clock_ip_name_t.
 */
static inline void CLOCK_DisableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNotNeeded);
60008360:	4b03      	ldr	r3, [pc, #12]	; (60008370 <LPUART_Deinit+0x34>)
60008362:	4621      	mov	r1, r4
60008364:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
#if defined(LPUART_PERIPH_CLOCKS)
    (void)CLOCK_DisableClock(s_lpuartPeriphClocks[instance]);
#endif

#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
}
60008368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6000836c:	f7ff bef4 	b.w	60008158 <CLOCK_ControlGate>
60008370:	6000c378 	.word	0x6000c378

60008374 <LPUART_GetStatusFlags>:
 * return LPUART status flags which are ORed by the enumerators in the _lpuart_flags.
 */
uint32_t LPUART_GetStatusFlags(LPUART_Type *base)
{
    uint32_t temp;
    temp = base->STAT;
60008374:	6942      	ldr	r2, [r0, #20]
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    temp |= (base->FIFO &
60008376:	6a83      	ldr	r3, [r0, #40]	; 0x28
            16U;
#endif
    /* Only keeps the status bits */
    temp &= (uint32_t)kLPUART_AllFlags;
    return temp;
}
60008378:	4803      	ldr	r0, [pc, #12]	; (60008388 <LPUART_GetStatusFlags+0x14>)
             (LPUART_FIFO_TXEMPT_MASK | LPUART_FIFO_RXEMPT_MASK | LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) >>
6000837a:	0c1b      	lsrs	r3, r3, #16
6000837c:	f003 03c3 	and.w	r3, r3, #195	; 0xc3
    temp |= (base->FIFO &
60008380:	4313      	orrs	r3, r2
}
60008382:	4018      	ands	r0, r3
60008384:	4770      	bx	lr
60008386:	bf00      	nop
60008388:	c1ffc0c3 	.word	0xc1ffc0c3

6000838c <LPUART_ClearStatusFlags>:
 * retval kStatus_LPUART_FlagCannotClearManually The flag can't be cleared by this function but
 *         it is cleared automatically by hardware.
 * retval kStatus_Success Status in the mask are cleared.
 */
status_t LPUART_ClearStatusFlags(LPUART_Type *base, uint32_t mask)
{
6000838c:	b510      	push	{r4, lr}

    /* Only deal with the clearable flags */
    mask &= (uint32_t)kLPUART_AllClearFlags;
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    /* Status bits in FIFO register */
    if ((mask & ((uint32_t)kLPUART_TxFifoOverflowFlag | (uint32_t)kLPUART_RxFifoUnderflowFlag)) != 0U)
6000838e:	078b      	lsls	r3, r1, #30
    mask &= (uint32_t)kLPUART_AllClearFlags;
60008390:	4c0c      	ldr	r4, [pc, #48]	; (600083c4 <LPUART_ClearStatusFlags+0x38>)
60008392:	ea04 0401 	and.w	r4, r4, r1
    if ((mask & ((uint32_t)kLPUART_TxFifoOverflowFlag | (uint32_t)kLPUART_RxFifoUnderflowFlag)) != 0U)
60008396:	d007      	beq.n	600083a8 <LPUART_ClearStatusFlags+0x1c>
    {
        /* Get the FIFO register value and mask the rx/tx FIFO flush bits and the status bits that can be W1C in case
           they are written 1 accidentally. */
        temp = (uint32_t)base->FIFO;
60008398:	6a82      	ldr	r2, [r0, #40]	; 0x28
        temp &= (uint32_t)(
            ~(LPUART_FIFO_TXFLUSH_MASK | LPUART_FIFO_RXFLUSH_MASK | LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK));
        temp |= (mask << 16U) & (LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK);
6000839a:	0423      	lsls	r3, r4, #16
        temp &= (uint32_t)(
6000839c:	f422 3270 	bic.w	r2, r2, #245760	; 0x3c000
        temp |= (mask << 16U) & (LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK);
600083a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
600083a4:	4313      	orrs	r3, r2
        base->FIFO = temp;
600083a6:	6283      	str	r3, [r0, #40]	; 0x28
    }
#endif
    /* Status bits in STAT register */
    /* First get the STAT register value and mask all the bits that not represent status, then OR with the status bit
     * that is to be W1C */
    temp       = (base->STAT & 0x3E000000UL) | mask;
600083a8:	6943      	ldr	r3, [r0, #20]
600083aa:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
600083ae:	4323      	orrs	r3, r4
    base->STAT = temp;
600083b0:	6143      	str	r3, [r0, #20]
    /* If some flags still pending. */
    if (0U != (mask & LPUART_GetStatusFlags(base)))
600083b2:	f7ff ffdf 	bl	60008374 <LPUART_GetStatusFlags>
    {
        status = kStatus_LPUART_FlagCannotClearManually;
600083b6:	4220      	tst	r0, r4
    {
        status = kStatus_Success;
    }

    return status;
}
600083b8:	f240 501a 	movw	r0, #1306	; 0x51a
600083bc:	bf08      	it	eq
600083be:	2000      	moveq	r0, #0
600083c0:	bd10      	pop	{r4, pc}
600083c2:	bf00      	nop
600083c4:	c01fc003 	.word	0xc01fc003

600083c8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
600083c8:	b510      	push	{r4, lr}
600083ca:	4604      	mov	r4, r0
600083cc:	b086      	sub	sp, #24
	z_impl_log_panic();
600083ce:	f7fc ff73 	bl	600052b8 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
600083d2:	4b07      	ldr	r3, [pc, #28]	; (600083f0 <k_sys_fatal_error_handler+0x28>)
600083d4:	9305      	str	r3, [sp, #20]
600083d6:	2302      	movs	r3, #2
600083d8:	9304      	str	r3, [sp, #16]
600083da:	4806      	ldr	r0, [pc, #24]	; (600083f4 <k_sys_fatal_error_handler+0x2c>)
600083dc:	2300      	movs	r3, #0
600083de:	aa04      	add	r2, sp, #16
600083e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
600083e4:	f7fd f848 	bl	60005478 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
600083e8:	4620      	mov	r0, r4
600083ea:	f002 fdd9 	bl	6000afa0 <arch_system_halt>
600083ee:	bf00      	nop
600083f0:	6000cd01 	.word	0x6000cd01
600083f4:	6000b888 	.word	0x6000b888

600083f8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
600083f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600083fc:	b086      	sub	sp, #24
600083fe:	4605      	mov	r5, r0
60008400:	460e      	mov	r6, r1
60008402:	af00      	add	r7, sp, #0
	__asm__ volatile(
60008404:	f04f 0310 	mov.w	r3, #16
60008408:	f3ef 8811 	mrs	r8, BASEPRI
6000840c:	f383 8812 	msr	BASEPRI_MAX, r3
60008410:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
60008414:	f000 fd74 	bl	60008f00 <z_impl_z_current_get>
60008418:	2d04      	cmp	r5, #4
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
6000841a:	46e9      	mov	r9, sp
6000841c:	b08a      	sub	sp, #40	; 0x28
6000841e:	bf98      	it	ls
60008420:	4b2c      	ldrls	r3, [pc, #176]	; (600084d4 <z_fatal_error+0xdc>)
60008422:	4604      	mov	r4, r0
60008424:	bf88      	it	hi
60008426:	4b2c      	ldrhi	r3, [pc, #176]	; (600084d8 <z_fatal_error+0xe0>)
60008428:	466a      	mov	r2, sp
6000842a:	bf98      	it	ls
6000842c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
60008430:	61d3      	str	r3, [r2, #28]
60008432:	f240 3301 	movw	r3, #769	; 0x301
60008436:	4929      	ldr	r1, [pc, #164]	; (600084dc <z_fatal_error+0xe4>)
60008438:	f04f 0a00 	mov.w	sl, #0
6000843c:	8493      	strh	r3, [r2, #36]	; 0x24
6000843e:	4b28      	ldr	r3, [pc, #160]	; (600084e0 <z_fatal_error+0xe8>)
60008440:	f8c2 a020 	str.w	sl, [r2, #32]
60008444:	e9c2 1505 	strd	r1, r5, [r2, #20]
60008448:	f842 3f10 	str.w	r3, [r2, #16]!
6000844c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
60008450:	4653      	mov	r3, sl
60008452:	4824      	ldr	r0, [pc, #144]	; (600084e4 <z_fatal_error+0xec>)
60008454:	f7fd f810 	bl	60005478 <z_impl_z_log_msg_static_create>
60008458:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
6000845a:	b17e      	cbz	r6, 6000847c <z_fatal_error+0x84>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
6000845c:	69f3      	ldr	r3, [r6, #28]
6000845e:	f3c3 0308 	ubfx	r3, r3, #0, #9
60008462:	b15b      	cbz	r3, 6000847c <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
60008464:	4b20      	ldr	r3, [pc, #128]	; (600084e8 <z_fatal_error+0xf0>)
60008466:	617b      	str	r3, [r7, #20]
60008468:	2302      	movs	r3, #2
6000846a:	613b      	str	r3, [r7, #16]
6000846c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
60008470:	4653      	mov	r3, sl
60008472:	f107 0210 	add.w	r2, r7, #16
60008476:	481b      	ldr	r0, [pc, #108]	; (600084e4 <z_fatal_error+0xec>)
60008478:	f7fc fffe 	bl	60005478 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
6000847c:	b12c      	cbz	r4, 6000848a <z_fatal_error+0x92>
6000847e:	4620      	mov	r0, r4
60008480:	f002 fda1 	bl	6000afc6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
60008484:	b108      	cbz	r0, 6000848a <z_fatal_error+0x92>
60008486:	7803      	ldrb	r3, [r0, #0]
60008488:	b903      	cbnz	r3, 6000848c <z_fatal_error+0x94>
		thread_name = "unknown";
6000848a:	4818      	ldr	r0, [pc, #96]	; (600084ec <z_fatal_error+0xf4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
6000848c:	46e9      	mov	r9, sp
6000848e:	b08a      	sub	sp, #40	; 0x28
60008490:	466a      	mov	r2, sp
60008492:	4b17      	ldr	r3, [pc, #92]	; (600084f0 <z_fatal_error+0xf8>)
60008494:	61d0      	str	r0, [r2, #28]
60008496:	e9c2 3405 	strd	r3, r4, [r2, #20]
6000849a:	f240 3301 	movw	r3, #769	; 0x301
6000849e:	8413      	strh	r3, [r2, #32]
600084a0:	4b14      	ldr	r3, [pc, #80]	; (600084f4 <z_fatal_error+0xfc>)
600084a2:	f842 3f10 	str.w	r3, [r2, #16]!
600084a6:	2300      	movs	r3, #0
600084a8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
600084ac:	480d      	ldr	r0, [pc, #52]	; (600084e4 <z_fatal_error+0xec>)
600084ae:	f7fc ffe3 	bl	60005478 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
600084b2:	4631      	mov	r1, r6
600084b4:	4628      	mov	r0, r5
600084b6:	46cd      	mov	sp, r9
600084b8:	f7ff ff86 	bl	600083c8 <k_sys_fatal_error_handler>
	__asm__ volatile(
600084bc:	f388 8811 	msr	BASEPRI, r8
600084c0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
600084c4:	4620      	mov	r0, r4
600084c6:	f7fd ff5f 	bl	60006388 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
600084ca:	3718      	adds	r7, #24
600084cc:	46bd      	mov	sp, r7
600084ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
600084d2:	bf00      	nop
600084d4:	6000c2f8 	.word	0x6000c2f8
600084d8:	6000cd10 	.word	0x6000cd10
600084dc:	6000cd26 	.word	0x6000cd26
600084e0:	01000005 	.word	0x01000005
600084e4:	6000b888 	.word	0x6000b888
600084e8:	6000cd4e 	.word	0x6000cd4e
600084ec:	6000cd1e 	.word	0x6000cd1e
600084f0:	6000cd6f 	.word	0x6000cd6f
600084f4:	01000004 	.word	0x01000004

600084f8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
600084f8:	4b0f      	ldr	r3, [pc, #60]	; (60008538 <z_sys_init_run_level+0x40>)
{
600084fa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
600084fc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
60008500:	3001      	adds	r0, #1
60008502:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
60008506:	42a6      	cmp	r6, r4
60008508:	d800      	bhi.n	6000850c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
6000850a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
6000850c:	e9d4 3500 	ldrd	r3, r5, [r4]
60008510:	4628      	mov	r0, r5
60008512:	4798      	blx	r3
		if (dev != NULL) {
60008514:	b16d      	cbz	r5, 60008532 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
60008516:	b138      	cbz	r0, 60008528 <z_sys_init_run_level+0x30>
				if (rc < 0) {
60008518:	2800      	cmp	r0, #0
				dev->state->init_res = rc;
6000851a:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
6000851c:	bfb8      	it	lt
6000851e:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
60008520:	28ff      	cmp	r0, #255	; 0xff
60008522:	bfa8      	it	ge
60008524:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
60008526:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
60008528:	68ea      	ldr	r2, [r5, #12]
6000852a:	7853      	ldrb	r3, [r2, #1]
6000852c:	f043 0301 	orr.w	r3, r3, #1
60008530:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
60008532:	3408      	adds	r4, #8
60008534:	e7e7      	b.n	60008506 <z_sys_init_run_level+0xe>
60008536:	bf00      	nop
60008538:	6000c30c 	.word	0x6000c30c

6000853c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
6000853c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
6000853e:	2003      	movs	r0, #3
{
60008540:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
60008542:	4b09      	ldr	r3, [pc, #36]	; (60008568 <bg_thread_main+0x2c>)
60008544:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
60008546:	f7ff ffd7 	bl	600084f8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
6000854a:	f000 ffb9 	bl	600094c0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
6000854e:	2004      	movs	r0, #4
60008550:	f7ff ffd2 	bl	600084f8 <z_sys_init_run_level>

	z_init_static_threads();
60008554:	f000 f9a2 	bl	6000889c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
60008558:	f7fb fc8c 	bl	60003e74 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
6000855c:	4a03      	ldr	r2, [pc, #12]	; (6000856c <bg_thread_main+0x30>)
6000855e:	7b13      	ldrb	r3, [r2, #12]
60008560:	f023 0301 	bic.w	r3, r3, #1
60008564:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
60008566:	bd08      	pop	{r3, pc}
60008568:	80001c6b 	.word	0x80001c6b
6000856c:	80000f80 	.word	0x80000f80

60008570 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
60008570:	4806      	ldr	r0, [pc, #24]	; (6000858c <z_bss_zero+0x1c>)
60008572:	2100      	movs	r1, #0
60008574:	4a06      	ldr	r2, [pc, #24]	; (60008590 <z_bss_zero+0x20>)
{
60008576:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
60008578:	1a12      	subs	r2, r2, r0
6000857a:	f002 fd1a 	bl	6000afb2 <z_early_memset>
		       - (uintptr_t) &__dtcm_bss_start);
6000857e:	4805      	ldr	r0, [pc, #20]	; (60008594 <z_bss_zero+0x24>)
	z_early_memset(&__dtcm_bss_start, 0,
60008580:	4a05      	ldr	r2, [pc, #20]	; (60008598 <z_bss_zero+0x28>)
60008582:	2100      	movs	r1, #0
60008584:	1a12      	subs	r2, r2, r0
60008586:	f002 fd14 	bl	6000afb2 <z_early_memset>
}
6000858a:	bd08      	pop	{r3, pc}
6000858c:	800009b0 	.word	0x800009b0
60008590:	80001c6c 	.word	0x80001c6c
60008594:	20000000 	.word	0x20000000
60008598:	20000000 	.word	0x20000000

6000859c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
6000859c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct k_thread *thread = &z_idle_threads[i];
6000859e:	23c8      	movs	r3, #200	; 0xc8
600085a0:	4e17      	ldr	r6, [pc, #92]	; (60008600 <z_init_cpu+0x64>)
{
600085a2:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
600085a4:	2701      	movs	r7, #1
	struct k_thread *thread = &z_idle_threads[i];
600085a6:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
600085aa:	4b16      	ldr	r3, [pc, #88]	; (60008604 <z_init_cpu+0x68>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
600085ac:	4c16      	ldr	r4, [pc, #88]	; (60008608 <z_init_cpu+0x6c>)
{
600085ae:	4605      	mov	r5, r0
	z_setup_new_thread(thread, stack,
600085b0:	9305      	str	r3, [sp, #20]
600085b2:	230f      	movs	r3, #15
600085b4:	4915      	ldr	r1, [pc, #84]	; (6000860c <z_init_cpu+0x70>)
600085b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
600085ba:	e9cd 3703 	strd	r3, r7, [sp, #12]
600085be:	2300      	movs	r3, #0
600085c0:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
600085c4:	2330      	movs	r3, #48	; 0x30
600085c6:	fb03 4400 	mla	r4, r3, r0, r4
	z_setup_new_thread(thread, stack,
600085ca:	f44f 70c0 	mov.w	r0, #384	; 0x180
600085ce:	4b10      	ldr	r3, [pc, #64]	; (60008610 <z_init_cpu+0x74>)
600085d0:	fb00 1105 	mla	r1, r0, r5, r1
600085d4:	4630      	mov	r0, r6
600085d6:	9400      	str	r4, [sp, #0]
600085d8:	f000 f8bc 	bl	60008754 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
600085dc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
600085de:	4a0d      	ldr	r2, [pc, #52]	; (60008614 <z_init_cpu+0x78>)
600085e0:	f023 0304 	bic.w	r3, r3, #4
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
600085e4:	60e6      	str	r6, [r4, #12]
	_kernel.cpus[id].id = id;
600085e6:	7525      	strb	r5, [r4, #20]
600085e8:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
600085ea:	f44f 6304 	mov.w	r3, #2112	; 0x840
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
600085ee:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
600085f2:	fb05 3303 	mla	r3, r5, r3, r3
600085f6:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
600085f8:	6063      	str	r3, [r4, #4]
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
600085fa:	b007      	add	sp, #28
600085fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
600085fe:	bf00      	nop
60008600:	80000eb8 	.word	0x80000eb8
60008604:	6000cdd1 	.word	0x6000cdd1
60008608:	80001048 	.word	0x80001048
6000860c:	80002800 	.word	0x80002800
60008610:	6000afcf 	.word	0x6000afcf
60008614:	80001fc0 	.word	0x80001fc0

60008618 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
60008618:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
6000861a:	2000      	movs	r0, #0
{
6000861c:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
6000861e:	f7ff ff6b 	bl	600084f8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
60008622:	4b2c      	ldr	r3, [pc, #176]	; (600086d4 <z_cstart+0xbc>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
60008624:	f383 8808 	msr	MSP, r3
60008628:	4d2b      	ldr	r5, [pc, #172]	; (600086d8 <z_cstart+0xc0>)
6000862a:	2400      	movs	r4, #0
6000862c:	23f0      	movs	r3, #240	; 0xf0
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
6000862e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
60008632:	4f2a      	ldr	r7, [pc, #168]	; (600086dc <z_cstart+0xc4>)
60008634:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
60008638:	77ec      	strb	r4, [r5, #31]
6000863a:	762c      	strb	r4, [r5, #24]
6000863c:	766c      	strb	r4, [r5, #25]
6000863e:	76ac      	strb	r4, [r5, #26]
60008640:	f885 4020 	strb.w	r4, [r5, #32]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
60008644:	6a6b      	ldr	r3, [r5, #36]	; 0x24
60008646:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
6000864a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
6000864c:	f7fd fe60 	bl	60006310 <z_arm_fault_init>
	z_arm_cpu_idle_init();
60008650:	f7fd f9d6 	bl	60005a00 <z_arm_cpu_idle_init>
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
60008654:	62ae      	str	r6, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
60008656:	62ee      	str	r6, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
60008658:	f7fd ff68 	bl	6000652c <z_arm_mpu_init>
	_kernel.ready_q.cache = &z_main_thread;
6000865c:	4d20      	ldr	r5, [pc, #128]	; (600086e0 <z_cstart+0xc8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
6000865e:	f7fd fea9 	bl	600063b4 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
60008662:	f7fc fd9b 	bl	6000519c <log_core_init>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
60008666:	f240 1301 	movw	r3, #257	; 0x101
	dummy_thread->base.cpu_mask = -1;
6000866a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
6000866e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
60008672:	ab06      	add	r3, sp, #24
60008674:	4e1b      	ldr	r6, [pc, #108]	; (600086e4 <z_cstart+0xcc>)
	dummy_thread->resource_pool = NULL;
60008676:	9435      	str	r4, [sp, #212]	; 0xd4
	_current_cpu->current = dummy_thread;
60008678:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
6000867a:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
6000867e:	f002 fc83 	bl	6000af88 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
60008682:	2001      	movs	r0, #1
60008684:	f7ff ff38 	bl	600084f8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
60008688:	2002      	movs	r0, #2
6000868a:	f7ff ff35 	bl	600084f8 <z_sys_init_run_level>
	z_sched_init();
6000868e:	f000 fb91 	bl	60008db4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
60008692:	4b15      	ldr	r3, [pc, #84]	; (600086e8 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
60008694:	6335      	str	r5, [r6, #48]	; 0x30
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
60008696:	f44f 6280 	mov.w	r2, #1024	; 0x400
6000869a:	9305      	str	r3, [sp, #20]
6000869c:	2301      	movs	r3, #1
6000869e:	4913      	ldr	r1, [pc, #76]	; (600086ec <z_cstart+0xd4>)
600086a0:	4628      	mov	r0, r5
600086a2:	9400      	str	r4, [sp, #0]
600086a4:	e9cd 4303 	strd	r4, r3, [sp, #12]
600086a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
600086ac:	463b      	mov	r3, r7
600086ae:	f000 f851 	bl	60008754 <z_setup_new_thread>
600086b2:	7b6a      	ldrb	r2, [r5, #13]
600086b4:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
600086b6:	4628      	mov	r0, r5
600086b8:	f022 0204 	bic.w	r2, r2, #4
600086bc:	736a      	strb	r2, [r5, #13]
600086be:	f002 fcfa 	bl	6000b0b6 <z_ready_thread>
	z_init_cpu(0);
600086c2:	4620      	mov	r0, r4
600086c4:	f7ff ff6a 	bl	6000859c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
600086c8:	463a      	mov	r2, r7
600086ca:	4631      	mov	r1, r6
600086cc:	4628      	mov	r0, r5
600086ce:	f7fd faef 	bl	60005cb0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
600086d2:	bf00      	nop
600086d4:	80002800 	.word	0x80002800
600086d8:	e000ed00 	.word	0xe000ed00
600086dc:	6000853d 	.word	0x6000853d
600086e0:	80000f80 	.word	0x80000f80
600086e4:	80001048 	.word	0x80001048
600086e8:	6000cdd6 	.word	0x6000cdd6
600086ec:	80002980 	.word	0x80002980

600086f0 <z_thread_monitor_exit>:
	__asm__ volatile(
600086f0:	f04f 0310 	mov.w	r3, #16
600086f4:	f3ef 8111 	mrs	r1, BASEPRI
600086f8:	f383 8812 	msr	BASEPRI_MAX, r3
600086fc:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
60008700:	4a0b      	ldr	r2, [pc, #44]	; (60008730 <z_thread_monitor_exit+0x40>)
60008702:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
60008704:	4283      	cmp	r3, r0
60008706:	d108      	bne.n	6000871a <z_thread_monitor_exit+0x2a>
		_kernel.threads = _kernel.threads->next_thread;
60008708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
6000870c:	63d3      	str	r3, [r2, #60]	; 0x3c
	__asm__ volatile(
6000870e:	f381 8811 	msr	BASEPRI, r1
60008712:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
60008716:	4770      	bx	lr
60008718:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
6000871a:	2b00      	cmp	r3, #0
6000871c:	d0f7      	beq.n	6000870e <z_thread_monitor_exit+0x1e>
			(thread != prev_thread->next_thread)) {
6000871e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
		while ((prev_thread != NULL) &&
60008722:	4282      	cmp	r2, r0
60008724:	d1f8      	bne.n	60008718 <z_thread_monitor_exit+0x28>
			prev_thread->next_thread = thread->next_thread;
60008726:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
6000872a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
6000872e:	e7ee      	b.n	6000870e <z_thread_monitor_exit+0x1e>
60008730:	80001048 	.word	0x80001048

60008734 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
60008734:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
60008736:	4604      	mov	r4, r0
60008738:	b908      	cbnz	r0, 6000873e <z_impl_k_thread_name_set+0xa>
		thread = _current;
6000873a:	4b05      	ldr	r3, [pc, #20]	; (60008750 <z_impl_k_thread_name_set+0x1c>)
6000873c:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
6000873e:	221f      	movs	r2, #31
60008740:	f104 008c 	add.w	r0, r4, #140	; 0x8c
60008744:	f001 facd 	bl	60009ce2 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
60008748:	2000      	movs	r0, #0
6000874a:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
6000874e:	bd10      	pop	{r4, pc}
60008750:	80001048 	.word	0x80001048

60008754 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
60008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
60008758:	4698      	mov	r8, r3
6000875a:	b085      	sub	sp, #20
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
6000875c:	f100 0370 	add.w	r3, r0, #112	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
60008760:	3207      	adds	r2, #7

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
60008762:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
60008764:	f101 0b40 	add.w	fp, r1, #64	; 0x40
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
60008768:	f022 0a07 	bic.w	sl, r2, #7
{
6000876c:	4604      	mov	r4, r0
6000876e:	460e      	mov	r6, r1
	thread_base->pended_on = NULL;
60008770:	6085      	str	r5, [r0, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
60008772:	f10a 0740 	add.w	r7, sl, #64	; 0x40
	memset(stack_buf_start, 0xaa, stack_buf_size);
60008776:	4652      	mov	r2, sl
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
60008778:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
6000877a:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
6000877c:	21aa      	movs	r1, #170	; 0xaa
{
6000877e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
60008782:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
	thread_base->user_options = (uint8_t)options;
60008786:	9b12      	ldr	r3, [sp, #72]	; 0x48
60008788:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
6000878a:	2304      	movs	r3, #4
6000878c:	7343      	strb	r3, [r0, #13]
	thread_base->prio = priority;
6000878e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
60008790:	e9c0 5508 	strd	r5, r5, [r0, #32]
60008794:	7383      	strb	r3, [r0, #14]
	memset(stack_buf_start, 0xaa, stack_buf_size);
60008796:	4658      	mov	r0, fp
60008798:	f001 fad2 	bl	60009d40 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
6000879c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->stack_info.delta = delta;
6000879e:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
600087a2:	463a      	mov	r2, r7
600087a4:	4631      	mov	r1, r6
600087a6:	4620      	mov	r0, r4
	new_thread->stack_info.size = stack_buf_size;
600087a8:	e9c4 ba2c 	strd	fp, sl, [r4, #176]	; 0xb0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
600087ac:	9302      	str	r3, [sp, #8]
600087ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
600087b0:	9301      	str	r3, [sp, #4]
600087b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
600087b4:	9300      	str	r3, [sp, #0]
600087b6:	4643      	mov	r3, r8
600087b8:	f7fd fa4a 	bl	60005c50 <arch_new_thread>
	new_thread->entry.parameter1 = p1;
600087bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	new_thread->init_data = NULL;
600087be:	66e5      	str	r5, [r4, #108]	; 0x6c
	new_thread->entry.parameter1 = p1;
600087c0:	67e3      	str	r3, [r4, #124]	; 0x7c
	new_thread->entry.parameter2 = p2;
600087c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->entry.pEntry = entry;
600087c4:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
	new_thread->entry.parameter2 = p2;
600087c8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	new_thread->entry.parameter3 = p3;
600087cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
600087ce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	__asm__ volatile(
600087d2:	f04f 0210 	mov.w	r2, #16
600087d6:	f3ef 8311 	mrs	r3, BASEPRI
600087da:	f382 8812 	msr	BASEPRI_MAX, r2
600087de:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
600087e2:	4e17      	ldr	r6, [pc, #92]	; (60008840 <z_setup_new_thread+0xec>)
600087e4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	_kernel.threads = new_thread;
600087e6:	63f4      	str	r4, [r6, #60]	; 0x3c
	new_thread->next_thread = _kernel.threads;
600087e8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	__asm__ volatile(
600087ec:	f383 8811 	msr	BASEPRI, r3
600087f0:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
600087f4:	f1b9 0f00 	cmp.w	r9, #0
600087f8:	d011      	beq.n	6000881e <z_setup_new_thread+0xca>
		strncpy(new_thread->name, name,
600087fa:	221f      	movs	r2, #31
600087fc:	4649      	mov	r1, r9
600087fe:	f104 008c 	add.w	r0, r4, #140	; 0x8c
60008802:	f001 fa6e 	bl	60009ce2 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
60008806:	f884 50ab 	strb.w	r5, [r4, #171]	; 0xab
		new_thread->base.cpu_mask = -1; /* allow all cpus */
6000880a:	23ff      	movs	r3, #255	; 0xff
6000880c:	7523      	strb	r3, [r4, #20]
	if (!_current) {
6000880e:	68b3      	ldr	r3, [r6, #8]
60008810:	b943      	cbnz	r3, 60008824 <z_setup_new_thread+0xd0>
		new_thread->resource_pool = NULL;
60008812:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
}
60008816:	4638      	mov	r0, r7
60008818:	b005      	add	sp, #20
6000881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
6000881e:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c
60008822:	e7f2      	b.n	6000880a <z_setup_new_thread+0xb6>
	new_thread->resource_pool = _current->resource_pool;
60008824:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
	new_thread->base.usage = (struct k_cycle_stats) {};
60008828:	2210      	movs	r2, #16
6000882a:	2100      	movs	r1, #0
6000882c:	f104 0038 	add.w	r0, r4, #56	; 0x38
	new_thread->resource_pool = _current->resource_pool;
60008830:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	new_thread->base.usage = (struct k_cycle_stats) {};
60008834:	f001 fa84 	bl	60009d40 <memset>
	new_thread->base.usage.track_usage =
60008838:	2301      	movs	r3, #1
6000883a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	return stack_ptr;
6000883e:	e7ea      	b.n	60008816 <z_setup_new_thread+0xc2>
60008840:	80001048 	.word	0x80001048

60008844 <z_impl_k_thread_create>:
{
60008844:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
60008846:	2500      	movs	r5, #0
{
60008848:	b087      	sub	sp, #28
6000884a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
6000884c:	9505      	str	r5, [sp, #20]
6000884e:	9d10      	ldr	r5, [sp, #64]	; 0x40
60008850:	9504      	str	r5, [sp, #16]
60008852:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
60008854:	9503      	str	r5, [sp, #12]
60008856:	9d0e      	ldr	r5, [sp, #56]	; 0x38
60008858:	9502      	str	r5, [sp, #8]
6000885a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
6000885c:	9501      	str	r5, [sp, #4]
6000885e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
60008860:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
60008864:	9500      	str	r5, [sp, #0]
60008866:	f7ff ff75 	bl	60008754 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
6000886a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
6000886e:	bf08      	it	eq
60008870:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
60008874:	d005      	beq.n	60008882 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
60008876:	ea56 0307 	orrs.w	r3, r6, r7
6000887a:	d105      	bne.n	60008888 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
6000887c:	4620      	mov	r0, r4
6000887e:	f000 fa19 	bl	60008cb4 <z_sched_start>
}
60008882:	4620      	mov	r0, r4
60008884:	b007      	add	sp, #28
60008886:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
60008888:	463a      	mov	r2, r7
6000888a:	4633      	mov	r3, r6
6000888c:	4902      	ldr	r1, [pc, #8]	; (60008898 <z_impl_k_thread_create+0x54>)
6000888e:	f104 0020 	add.w	r0, r4, #32
60008892:	f000 fc1f 	bl	600090d4 <z_add_timeout>
60008896:	e7f4      	b.n	60008882 <z_impl_k_thread_create+0x3e>
60008898:	6000b023 	.word	0x6000b023

6000889c <z_init_static_threads>:
{
6000889c:	b5f0      	push	{r4, r5, r6, r7, lr}
6000889e:	4c21      	ldr	r4, [pc, #132]	; (60008924 <z_init_static_threads+0x88>)
600088a0:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
600088a2:	4d21      	ldr	r5, [pc, #132]	; (60008928 <z_init_static_threads+0x8c>)
600088a4:	4626      	mov	r6, r4
600088a6:	342c      	adds	r4, #44	; 0x2c
600088a8:	42ae      	cmp	r6, r5
600088aa:	d30b      	bcc.n	600088c4 <z_init_static_threads+0x28>
	_FOREACH_STATIC_THREAD(thread_data) {
600088ac:	4c1d      	ldr	r4, [pc, #116]	; (60008924 <z_init_static_threads+0x88>)
600088ae:	260a      	movs	r6, #10
600088b0:	4f1e      	ldr	r7, [pc, #120]	; (6000892c <z_init_static_threads+0x90>)
	k_sched_lock();
600088b2:	f000 fa4f 	bl	60008d54 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
600088b6:	42ac      	cmp	r4, r5
600088b8:	d320      	bcc.n	600088fc <z_init_static_threads+0x60>
}
600088ba:	b007      	add	sp, #28
600088bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
600088c0:	f000 ba5c 	b.w	60008d7c <k_sched_unlock>
		z_setup_new_thread(
600088c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
600088c8:	9305      	str	r3, [sp, #20]
600088ca:	f854 3c0c 	ldr.w	r3, [r4, #-12]
600088ce:	9304      	str	r3, [sp, #16]
600088d0:	f854 3c10 	ldr.w	r3, [r4, #-16]
600088d4:	9303      	str	r3, [sp, #12]
600088d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
600088da:	9302      	str	r3, [sp, #8]
600088dc:	f854 3c18 	ldr.w	r3, [r4, #-24]
600088e0:	9301      	str	r3, [sp, #4]
600088e2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
600088e6:	9300      	str	r3, [sp, #0]
600088e8:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
600088ec:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
600088f0:	f7ff ff30 	bl	60008754 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
600088f4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
600088f8:	66de      	str	r6, [r3, #108]	; 0x6c
	_FOREACH_STATIC_THREAD(thread_data) {
600088fa:	e7d3      	b.n	600088a4 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
600088fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
600088fe:	1c53      	adds	r3, r2, #1
60008900:	d009      	beq.n	60008916 <z_init_static_threads+0x7a>
					    K_MSEC(thread_data->init_delay));
60008902:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
60008906:	6820      	ldr	r0, [r4, #0]
60008908:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
6000890c:	ea52 0103 	orrs.w	r1, r2, r3
60008910:	d103      	bne.n	6000891a <z_init_static_threads+0x7e>
	z_sched_start(thread);
60008912:	f000 f9cf 	bl	60008cb4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
60008916:	342c      	adds	r4, #44	; 0x2c
60008918:	e7cd      	b.n	600088b6 <z_init_static_threads+0x1a>
6000891a:	4639      	mov	r1, r7
6000891c:	3020      	adds	r0, #32
6000891e:	f000 fbd9 	bl	600090d4 <z_add_timeout>
60008922:	e7f8      	b.n	60008916 <z_init_static_threads+0x7a>
60008924:	6000b80c 	.word	0x6000b80c
60008928:	6000b80c 	.word	0x6000b80c
6000892c:	6000b023 	.word	0x6000b023

60008930 <z_thread_mark_switched_in>:

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
void z_thread_mark_switched_in(void)
{
#if defined(CONFIG_SCHED_THREAD_USAGE) && !defined(CONFIG_USE_SWITCH)
	z_sched_usage_start(_current);
60008930:	4b01      	ldr	r3, [pc, #4]	; (60008938 <z_thread_mark_switched_in+0x8>)
60008932:	6898      	ldr	r0, [r3, #8]
60008934:	f000 bd8c 	b.w	60009450 <z_sched_usage_start>
60008938:	80001048 	.word	0x80001048

6000893c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
6000893c:	b538      	push	{r3, r4, r5, lr}
6000893e:	4604      	mov	r4, r0
	__asm__ volatile(
60008940:	f04f 0310 	mov.w	r3, #16
60008944:	f3ef 8511 	mrs	r5, BASEPRI
60008948:	f383 8812 	msr	BASEPRI_MAX, r3
6000894c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
60008950:	f002 fbea 	bl	6000b128 <z_unpend_first_thread>

	if (thread != NULL) {
60008954:	b150      	cbz	r0, 6000896c <z_impl_k_sem_give+0x30>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
60008956:	2200      	movs	r2, #0
60008958:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
6000895c:	f002 fbab 	bl	6000b0b6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
60008960:	4629      	mov	r1, r5
60008962:	4806      	ldr	r0, [pc, #24]	; (6000897c <z_impl_k_sem_give+0x40>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
60008964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
60008968:	f000 b992 	b.w	60008c90 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
6000896c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
60008970:	429a      	cmp	r2, r3
60008972:	bf18      	it	ne
60008974:	3301      	addne	r3, #1
60008976:	60a3      	str	r3, [r4, #8]
}
60008978:	e7f2      	b.n	60008960 <z_impl_k_sem_give+0x24>
6000897a:	bf00      	nop
6000897c:	80001c6c 	.word	0x80001c6c

60008980 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
60008980:	b513      	push	{r0, r1, r4, lr}
60008982:	f04f 0410 	mov.w	r4, #16
60008986:	f3ef 8111 	mrs	r1, BASEPRI
6000898a:	f384 8812 	msr	BASEPRI_MAX, r4
6000898e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
60008992:	6884      	ldr	r4, [r0, #8]
60008994:	b144      	cbz	r4, 600089a8 <z_impl_k_sem_take+0x28>
		sem->count--;
60008996:	3c01      	subs	r4, #1
60008998:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
6000899a:	f381 8811 	msr	BASEPRI, r1
6000899e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
600089a2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
600089a4:	b002      	add	sp, #8
600089a6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
600089a8:	ea52 0403 	orrs.w	r4, r2, r3
600089ac:	d106      	bne.n	600089bc <z_impl_k_sem_take+0x3c>
600089ae:	f381 8811 	msr	BASEPRI, r1
600089b2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
600089b6:	f06f 000f 	mvn.w	r0, #15
600089ba:	e7f3      	b.n	600089a4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
600089bc:	e9cd 2300 	strd	r2, r3, [sp]
600089c0:	4602      	mov	r2, r0
600089c2:	4802      	ldr	r0, [pc, #8]	; (600089cc <z_impl_k_sem_take+0x4c>)
600089c4:	f000 f946 	bl	60008c54 <z_pend_curr>
	return ret;
600089c8:	e7ec      	b.n	600089a4 <z_impl_k_sem_take+0x24>
600089ca:	bf00      	nop
600089cc:	80001c6c 	.word	0x80001c6c

600089d0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
600089d0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
600089d2:	4d07      	ldr	r5, [pc, #28]	; (600089f0 <z_reset_time_slice+0x20>)
600089d4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
600089d6:	b154      	cbz	r4, 600089ee <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
600089d8:	f7fe fdf4 	bl	600075c4 <sys_clock_elapsed>
600089dc:	4b05      	ldr	r3, [pc, #20]	; (600089f4 <z_reset_time_slice+0x24>)
600089de:	4404      	add	r4, r0
		z_set_timeout_expiry(slice_time(curr), false);
600089e0:	2100      	movs	r1, #0
600089e2:	6828      	ldr	r0, [r5, #0]
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
600089e4:	611c      	str	r4, [r3, #16]
	}
}
600089e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
600089ea:	f002 bbe5 	b.w	6000b1b8 <z_set_timeout_expiry>
}
600089ee:	bd38      	pop	{r3, r4, r5, pc}
600089f0:	80001c58 	.word	0x80001c58
600089f4:	80001048 	.word	0x80001048

600089f8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
600089f8:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
600089fa:	4d12      	ldr	r5, [pc, #72]	; (60008a44 <update_cache+0x4c>)
600089fc:	462b      	mov	r3, r5
600089fe:	f853 4f34 	ldr.w	r4, [r3, #52]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
60008a02:	429c      	cmp	r4, r3
60008a04:	d00b      	beq.n	60008a1e <update_cache+0x26>
		if ((thread->base.cpu_mask & BIT(_current_cpu->id)) != 0) {
60008a06:	7d2a      	ldrb	r2, [r5, #20]
60008a08:	2301      	movs	r3, #1
60008a0a:	4093      	lsls	r3, r2
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
60008a0c:	6baa      	ldr	r2, [r5, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(pq, thread, base.qnode_dlist) {
60008a0e:	b134      	cbz	r4, 60008a1e <update_cache+0x26>
		if ((thread->base.cpu_mask & BIT(_current_cpu->id)) != 0) {
60008a10:	7d21      	ldrb	r1, [r4, #20]
60008a12:	4219      	tst	r1, r3
60008a14:	d104      	bne.n	60008a20 <update_cache+0x28>
60008a16:	42a2      	cmp	r2, r4
60008a18:	d001      	beq.n	60008a1e <update_cache+0x26>
60008a1a:	6824      	ldr	r4, [r4, #0]
60008a1c:	e7f7      	b.n	60008a0e <update_cache+0x16>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
60008a1e:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
60008a20:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
60008a22:	b938      	cbnz	r0, 60008a34 <update_cache+0x3c>
	if (z_is_thread_prevented_from_running(_current)) {
60008a24:	7b5a      	ldrb	r2, [r3, #13]
60008a26:	06d2      	lsls	r2, r2, #27
60008a28:	d104      	bne.n	60008a34 <update_cache+0x3c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
60008a2a:	6a22      	ldr	r2, [r4, #32]
60008a2c:	b912      	cbnz	r2, 60008a34 <update_cache+0x3c>
	if (is_preempt(_current) || is_metairq(thread)) {
60008a2e:	89da      	ldrh	r2, [r3, #14]
60008a30:	2a7f      	cmp	r2, #127	; 0x7f
60008a32:	d805      	bhi.n	60008a40 <update_cache+0x48>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
60008a34:	42a3      	cmp	r3, r4
60008a36:	d002      	beq.n	60008a3e <update_cache+0x46>
			z_reset_time_slice(thread);
60008a38:	4620      	mov	r0, r4
60008a3a:	f7ff ffc9 	bl	600089d0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
60008a3e:	4623      	mov	r3, r4
60008a40:	632b      	str	r3, [r5, #48]	; 0x30
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
60008a42:	bd38      	pop	{r3, r4, r5, pc}
60008a44:	80001048 	.word	0x80001048

60008a48 <move_thread_to_end_of_prio_q>:
{
60008a48:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
60008a4a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
60008a4e:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
60008a50:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
60008a52:	2a00      	cmp	r2, #0
60008a54:	da04      	bge.n	60008a60 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
60008a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
60008a5a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
60008a5c:	f002 facf 	bl	6000affe <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
60008a60:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
60008a62:	4a15      	ldr	r2, [pc, #84]	; (60008ab8 <move_thread_to_end_of_prio_q+0x70>)
60008a64:	f063 037f 	orn	r3, r3, #127	; 0x7f
60008a68:	4610      	mov	r0, r2
60008a6a:	734b      	strb	r3, [r1, #13]
60008a6c:	f850 3f34 	ldr.w	r3, [r0, #52]!
	return (node == list->tail) ? NULL : node->next;
60008a70:	6b94      	ldr	r4, [r2, #56]	; 0x38
	return sys_dlist_is_empty(list) ? NULL : list->head;
60008a72:	4283      	cmp	r3, r0
60008a74:	bf08      	it	eq
60008a76:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
60008a78:	b923      	cbnz	r3, 60008a84 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
60008a7a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
60008a7e:	6021      	str	r1, [r4, #0]
	list->tail = node;
60008a80:	6391      	str	r1, [r2, #56]	; 0x38
}
60008a82:	e00c      	b.n	60008a9e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
60008a84:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
60008a88:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
60008a8c:	42b5      	cmp	r5, r6
60008a8e:	d00e      	beq.n	60008aae <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
60008a90:	42ae      	cmp	r6, r5
60008a92:	dd0c      	ble.n	60008aae <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
60008a94:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
60008a96:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
60008a9a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
60008a9c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
60008a9e:	6890      	ldr	r0, [r2, #8]
60008aa0:	1a43      	subs	r3, r0, r1
60008aa2:	4258      	negs	r0, r3
}
60008aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
60008aa8:	4158      	adcs	r0, r3
60008aaa:	f7ff bfa5 	b.w	600089f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
60008aae:	429c      	cmp	r4, r3
60008ab0:	d0e3      	beq.n	60008a7a <move_thread_to_end_of_prio_q+0x32>
60008ab2:	681b      	ldr	r3, [r3, #0]
60008ab4:	e7e0      	b.n	60008a78 <move_thread_to_end_of_prio_q+0x30>
60008ab6:	bf00      	nop
60008ab8:	80001048 	.word	0x80001048

60008abc <ready_thread>:
{
60008abc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
60008abe:	f990 300d 	ldrsb.w	r3, [r0, #13]
60008ac2:	7b42      	ldrb	r2, [r0, #13]
60008ac4:	2b00      	cmp	r3, #0
60008ac6:	db29      	blt.n	60008b1c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
60008ac8:	06d3      	lsls	r3, r2, #27
60008aca:	d127      	bne.n	60008b1c <ready_thread+0x60>
	return node->next != NULL;
60008acc:	6a03      	ldr	r3, [r0, #32]
60008ace:	bb2b      	cbnz	r3, 60008b1c <ready_thread+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
60008ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
	return list->head == list;
60008ad4:	4912      	ldr	r1, [pc, #72]	; (60008b20 <ready_thread+0x64>)
60008ad6:	7342      	strb	r2, [r0, #13]
60008ad8:	460a      	mov	r2, r1
60008ada:	f852 4f34 	ldr.w	r4, [r2, #52]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
60008ade:	4294      	cmp	r4, r2
60008ae0:	bf18      	it	ne
60008ae2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
60008ae4:	6b8c      	ldr	r4, [r1, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
60008ae6:	b923      	cbnz	r3, 60008af2 <ready_thread+0x36>
	node->prev = tail;
60008ae8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
60008aec:	6020      	str	r0, [r4, #0]
	list->tail = node;
60008aee:	6388      	str	r0, [r1, #56]	; 0x38
}
60008af0:	e00c      	b.n	60008b0c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
60008af2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
60008af6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
60008afa:	42b5      	cmp	r5, r6
60008afc:	d00a      	beq.n	60008b14 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
60008afe:	42ae      	cmp	r6, r5
60008b00:	dd08      	ble.n	60008b14 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
60008b02:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
60008b04:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
60008b08:	6010      	str	r0, [r2, #0]
	successor->prev = node;
60008b0a:	6058      	str	r0, [r3, #4]
		update_cache(0);
60008b0c:	2000      	movs	r0, #0
}
60008b0e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
60008b10:	f7ff bf72 	b.w	600089f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
60008b14:	42a3      	cmp	r3, r4
60008b16:	d0e7      	beq.n	60008ae8 <ready_thread+0x2c>
60008b18:	681b      	ldr	r3, [r3, #0]
60008b1a:	e7e4      	b.n	60008ae6 <ready_thread+0x2a>
}
60008b1c:	bc70      	pop	{r4, r5, r6}
60008b1e:	4770      	bx	lr
60008b20:	80001048 	.word	0x80001048

60008b24 <unready_thread>:
{
60008b24:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
60008b26:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
60008b2a:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
60008b2c:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
60008b2e:	2a00      	cmp	r2, #0
60008b30:	da04      	bge.n	60008b3c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
60008b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
60008b36:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
60008b38:	f002 fa61 	bl	6000affe <sys_dlist_remove>
	update_cache(thread == _current);
60008b3c:	4b04      	ldr	r3, [pc, #16]	; (60008b50 <unready_thread+0x2c>)
60008b3e:	6898      	ldr	r0, [r3, #8]
60008b40:	1a43      	subs	r3, r0, r1
60008b42:	4258      	negs	r0, r3
60008b44:	4158      	adcs	r0, r3
}
60008b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
60008b4a:	f7ff bf55 	b.w	600089f8 <update_cache>
60008b4e:	bf00      	nop
60008b50:	80001048 	.word	0x80001048

60008b54 <pend_locked>:
{
60008b54:	b570      	push	{r4, r5, r6, lr}
60008b56:	4615      	mov	r5, r2
60008b58:	461c      	mov	r4, r3
60008b5a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
60008b5c:	f002 fa83 	bl	6000b066 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
60008b60:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
60008b64:	bf08      	it	eq
60008b66:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
60008b6a:	d008      	beq.n	60008b7e <pend_locked+0x2a>
60008b6c:	462a      	mov	r2, r5
60008b6e:	4623      	mov	r3, r4
60008b70:	f106 0020 	add.w	r0, r6, #32
60008b74:	4902      	ldr	r1, [pc, #8]	; (60008b80 <pend_locked+0x2c>)
}
60008b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
60008b7a:	f000 baab 	b.w	600090d4 <z_add_timeout>
60008b7e:	bd70      	pop	{r4, r5, r6, pc}
60008b80:	6000b023 	.word	0x6000b023

60008b84 <k_sched_time_slice_set>:
{
60008b84:	b510      	push	{r4, lr}
	__asm__ volatile(
60008b86:	f04f 0310 	mov.w	r3, #16
60008b8a:	f3ef 8411 	mrs	r4, BASEPRI
60008b8e:	f383 8812 	msr	BASEPRI_MAX, r3
60008b92:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
60008b96:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
60008b98:	2800      	cmp	r0, #0
60008b9a:	fb00 f303 	mul.w	r3, r0, r3
60008b9e:	dd02      	ble.n	60008ba6 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
60008ba0:	2b02      	cmp	r3, #2
60008ba2:	bfb8      	it	lt
60008ba4:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
60008ba6:	4a07      	ldr	r2, [pc, #28]	; (60008bc4 <k_sched_time_slice_set+0x40>)
60008ba8:	2000      	movs	r0, #0
60008baa:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
60008bac:	4806      	ldr	r0, [pc, #24]	; (60008bc8 <k_sched_time_slice_set+0x44>)
60008bae:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
60008bb0:	4b06      	ldr	r3, [pc, #24]	; (60008bcc <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
60008bb2:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
60008bb4:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
60008bb6:	f7ff ff0b 	bl	600089d0 <z_reset_time_slice>
	__asm__ volatile(
60008bba:	f384 8811 	msr	BASEPRI, r4
60008bbe:	f3bf 8f6f 	isb	sy
}
60008bc2:	bd10      	pop	{r4, pc}
60008bc4:	80001048 	.word	0x80001048
60008bc8:	80001c58 	.word	0x80001c58
60008bcc:	80001c54 	.word	0x80001c54

60008bd0 <z_time_slice>:
{
60008bd0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
60008bd2:	f04f 0310 	mov.w	r3, #16
60008bd6:	f3ef 8511 	mrs	r5, BASEPRI
60008bda:	f383 8812 	msr	BASEPRI_MAX, r3
60008bde:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
60008be2:	4b17      	ldr	r3, [pc, #92]	; (60008c40 <z_time_slice+0x70>)
60008be4:	4a17      	ldr	r2, [pc, #92]	; (60008c44 <z_time_slice+0x74>)
60008be6:	689c      	ldr	r4, [r3, #8]
60008be8:	6811      	ldr	r1, [r2, #0]
60008bea:	428c      	cmp	r4, r1
60008bec:	d107      	bne.n	60008bfe <z_time_slice+0x2e>
	z_reset_time_slice(curr);
60008bee:	4620      	mov	r0, r4
60008bf0:	f7ff feee 	bl	600089d0 <z_reset_time_slice>
	__asm__ volatile(
60008bf4:	f385 8811 	msr	BASEPRI, r5
60008bf8:	f3bf 8f6f 	isb	sy
}
60008bfc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
60008bfe:	2100      	movs	r1, #0
60008c00:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
60008c02:	4a11      	ldr	r2, [pc, #68]	; (60008c48 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
60008c04:	6812      	ldr	r2, [r2, #0]
60008c06:	b1c2      	cbz	r2, 60008c3a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
60008c08:	89e2      	ldrh	r2, [r4, #14]
60008c0a:	2a7f      	cmp	r2, #127	; 0x7f
60008c0c:	d815      	bhi.n	60008c3a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
60008c0e:	7b62      	ldrb	r2, [r4, #13]
60008c10:	06d2      	lsls	r2, r2, #27
60008c12:	d112      	bne.n	60008c3a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
60008c14:	4a0d      	ldr	r2, [pc, #52]	; (60008c4c <z_time_slice+0x7c>)
60008c16:	f994 100e 	ldrsb.w	r1, [r4, #14]
60008c1a:	6812      	ldr	r2, [r2, #0]
60008c1c:	4291      	cmp	r1, r2
60008c1e:	db0c      	blt.n	60008c3a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
60008c20:	4a0b      	ldr	r2, [pc, #44]	; (60008c50 <z_time_slice+0x80>)
60008c22:	4294      	cmp	r4, r2
60008c24:	d009      	beq.n	60008c3a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
60008c26:	691a      	ldr	r2, [r3, #16]
60008c28:	4282      	cmp	r2, r0
60008c2a:	dc03      	bgt.n	60008c34 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
60008c2c:	4620      	mov	r0, r4
60008c2e:	f7ff ff0b 	bl	60008a48 <move_thread_to_end_of_prio_q>
60008c32:	e7dc      	b.n	60008bee <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
60008c34:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
60008c36:	611a      	str	r2, [r3, #16]
60008c38:	e7dc      	b.n	60008bf4 <z_time_slice+0x24>
60008c3a:	2200      	movs	r2, #0
60008c3c:	e7fb      	b.n	60008c36 <z_time_slice+0x66>
60008c3e:	bf00      	nop
60008c40:	80001048 	.word	0x80001048
60008c44:	80001c50 	.word	0x80001c50
60008c48:	80001c58 	.word	0x80001c58
60008c4c:	80001c54 	.word	0x80001c54
60008c50:	80000eb8 	.word	0x80000eb8

60008c54 <z_pend_curr>:
	pending_current = _current;
60008c54:	480c      	ldr	r0, [pc, #48]	; (60008c88 <z_pend_curr+0x34>)
{
60008c56:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
60008c58:	4d0c      	ldr	r5, [pc, #48]	; (60008c8c <z_pend_curr+0x38>)
{
60008c5a:	460c      	mov	r4, r1
	pending_current = _current;
60008c5c:	6886      	ldr	r6, [r0, #8]
{
60008c5e:	4611      	mov	r1, r2
	pending_current = _current;
60008c60:	602e      	str	r6, [r5, #0]
{
60008c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
60008c66:	f04f 0610 	mov.w	r6, #16
60008c6a:	f3ef 8511 	mrs	r5, BASEPRI
60008c6e:	f386 8812 	msr	BASEPRI_MAX, r6
60008c72:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
60008c76:	6880      	ldr	r0, [r0, #8]
60008c78:	f7ff ff6c 	bl	60008b54 <pend_locked>
	ret = arch_swap(key);
60008c7c:	4620      	mov	r0, r4
}
60008c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
60008c82:	f7fc bf83 	b.w	60005b8c <arch_swap>
60008c86:	bf00      	nop
60008c88:	80001048 	.word	0x80001048
60008c8c:	80001c50 	.word	0x80001c50

60008c90 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
60008c90:	b949      	cbnz	r1, 60008ca6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
60008c92:	f3ef 8005 	mrs	r0, IPSR
60008c96:	b930      	cbnz	r0, 60008ca6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
60008c98:	4b05      	ldr	r3, [pc, #20]	; (60008cb0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
60008c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
60008c9c:	689b      	ldr	r3, [r3, #8]
60008c9e:	429a      	cmp	r2, r3
60008ca0:	d001      	beq.n	60008ca6 <z_reschedule+0x16>
60008ca2:	f7fc bf73 	b.w	60005b8c <arch_swap>
	__asm__ volatile(
60008ca6:	f381 8811 	msr	BASEPRI, r1
60008caa:	f3bf 8f6f 	isb	sy
}
60008cae:	4770      	bx	lr
60008cb0:	80001048 	.word	0x80001048

60008cb4 <z_sched_start>:
{
60008cb4:	b510      	push	{r4, lr}
	__asm__ volatile(
60008cb6:	f04f 0210 	mov.w	r2, #16
60008cba:	f3ef 8411 	mrs	r4, BASEPRI
60008cbe:	f382 8812 	msr	BASEPRI_MAX, r2
60008cc2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
60008cc6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
60008cc8:	0751      	lsls	r1, r2, #29
60008cca:	d404      	bmi.n	60008cd6 <z_sched_start+0x22>
	__asm__ volatile(
60008ccc:	f384 8811 	msr	BASEPRI, r4
60008cd0:	f3bf 8f6f 	isb	sy
}
60008cd4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
60008cd6:	f022 0204 	bic.w	r2, r2, #4
60008cda:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
60008cdc:	f7ff feee 	bl	60008abc <ready_thread>
	z_reschedule(&sched_spinlock, key);
60008ce0:	4621      	mov	r1, r4
60008ce2:	4802      	ldr	r0, [pc, #8]	; (60008cec <z_sched_start+0x38>)
}
60008ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
60008ce8:	f7ff bfd2 	b.w	60008c90 <z_reschedule>
60008cec:	80001c6c 	.word	0x80001c6c

60008cf0 <z_impl_k_thread_suspend>:
{
60008cf0:	b570      	push	{r4, r5, r6, lr}
60008cf2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
60008cf4:	3020      	adds	r0, #32
60008cf6:	f002 fa49 	bl	6000b18c <z_abort_timeout>
	__asm__ volatile(
60008cfa:	f04f 0310 	mov.w	r3, #16
60008cfe:	f3ef 8611 	mrs	r6, BASEPRI
60008d02:	f383 8812 	msr	BASEPRI_MAX, r3
60008d06:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
60008d0a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
60008d0e:	7b63      	ldrb	r3, [r4, #13]
60008d10:	2a00      	cmp	r2, #0
60008d12:	da05      	bge.n	60008d20 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
60008d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
60008d18:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
60008d1a:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
60008d1c:	f002 f96f 	bl	6000affe <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
60008d20:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
60008d22:	4d0b      	ldr	r5, [pc, #44]	; (60008d50 <z_impl_k_thread_suspend+0x60>)
60008d24:	f043 0310 	orr.w	r3, r3, #16
60008d28:	68a8      	ldr	r0, [r5, #8]
60008d2a:	7363      	strb	r3, [r4, #13]
60008d2c:	1b03      	subs	r3, r0, r4
60008d2e:	4258      	negs	r0, r3
60008d30:	4158      	adcs	r0, r3
60008d32:	f7ff fe61 	bl	600089f8 <update_cache>
	__asm__ volatile(
60008d36:	f386 8811 	msr	BASEPRI, r6
60008d3a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
60008d3e:	68ab      	ldr	r3, [r5, #8]
60008d40:	42a3      	cmp	r3, r4
60008d42:	d103      	bne.n	60008d4c <z_impl_k_thread_suspend+0x5c>
}
60008d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
60008d48:	f002 ba16 	b.w	6000b178 <z_reschedule_unlocked>
}
60008d4c:	bd70      	pop	{r4, r5, r6, pc}
60008d4e:	bf00      	nop
60008d50:	80001048 	.word	0x80001048

60008d54 <k_sched_lock>:
	__asm__ volatile(
60008d54:	f04f 0310 	mov.w	r3, #16
60008d58:	f3ef 8111 	mrs	r1, BASEPRI
60008d5c:	f383 8812 	msr	BASEPRI_MAX, r3
60008d60:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
60008d64:	4b04      	ldr	r3, [pc, #16]	; (60008d78 <k_sched_lock+0x24>)
60008d66:	689a      	ldr	r2, [r3, #8]
60008d68:	7bd3      	ldrb	r3, [r2, #15]
60008d6a:	3b01      	subs	r3, #1
60008d6c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
60008d6e:	f381 8811 	msr	BASEPRI, r1
60008d72:	f3bf 8f6f 	isb	sy
}
60008d76:	4770      	bx	lr
60008d78:	80001048 	.word	0x80001048

60008d7c <k_sched_unlock>:
{
60008d7c:	b510      	push	{r4, lr}
	__asm__ volatile(
60008d7e:	f04f 0310 	mov.w	r3, #16
60008d82:	f3ef 8411 	mrs	r4, BASEPRI
60008d86:	f383 8812 	msr	BASEPRI_MAX, r3
60008d8a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
60008d8e:	4b08      	ldr	r3, [pc, #32]	; (60008db0 <k_sched_unlock+0x34>)
		update_cache(0);
60008d90:	2000      	movs	r0, #0
		++_current->base.sched_locked;
60008d92:	689a      	ldr	r2, [r3, #8]
60008d94:	7bd3      	ldrb	r3, [r2, #15]
60008d96:	3301      	adds	r3, #1
60008d98:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
60008d9a:	f7ff fe2d 	bl	600089f8 <update_cache>
	__asm__ volatile(
60008d9e:	f384 8811 	msr	BASEPRI, r4
60008da2:	f3bf 8f6f 	isb	sy
}
60008da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
60008daa:	f002 b9e5 	b.w	6000b178 <z_reschedule_unlocked>
60008dae:	bf00      	nop
60008db0:	80001048 	.word	0x80001048

60008db4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
60008db4:	4b04      	ldr	r3, [pc, #16]	; (60008dc8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
60008db6:	2100      	movs	r1, #0
60008db8:	f103 0234 	add.w	r2, r3, #52	; 0x34
60008dbc:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
60008dbe:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
60008dc2:	f7ff bedf 	b.w	60008b84 <k_sched_time_slice_set>
60008dc6:	bf00      	nop
60008dc8:	80001048 	.word	0x80001048

60008dcc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
60008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
60008dce:	f04f 0310 	mov.w	r3, #16
60008dd2:	f3ef 8511 	mrs	r5, BASEPRI
60008dd6:	f383 8812 	msr	BASEPRI_MAX, r3
60008dda:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
60008dde:	4919      	ldr	r1, [pc, #100]	; (60008e44 <z_impl_k_yield+0x78>)
60008de0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
60008de2:	7b43      	ldrb	r3, [r0, #13]
60008de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
60008de8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
60008dea:	f002 f908 	bl	6000affe <sys_dlist_remove>
	}
	queue_thread(_current);
60008dee:	688b      	ldr	r3, [r1, #8]
	return list->head == list;
60008df0:	4608      	mov	r0, r1
	thread->base.thread_state |= _THREAD_QUEUED;
60008df2:	7b5a      	ldrb	r2, [r3, #13]
60008df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
60008df8:	735a      	strb	r2, [r3, #13]
60008dfa:	f850 2f34 	ldr.w	r2, [r0, #52]!
	return (node == list->tail) ? NULL : node->next;
60008dfe:	6b8c      	ldr	r4, [r1, #56]	; 0x38
	return sys_dlist_is_empty(list) ? NULL : list->head;
60008e00:	4282      	cmp	r2, r0
60008e02:	bf08      	it	eq
60008e04:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
60008e06:	b922      	cbnz	r2, 60008e12 <z_impl_k_yield+0x46>
	node->prev = tail;
60008e08:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
60008e0c:	6023      	str	r3, [r4, #0]
	list->tail = node;
60008e0e:	638b      	str	r3, [r1, #56]	; 0x38
}
60008e10:	e00c      	b.n	60008e2c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
60008e12:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
60008e16:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
60008e1a:	42be      	cmp	r6, r7
60008e1c:	d00e      	beq.n	60008e3c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
60008e1e:	42b7      	cmp	r7, r6
60008e20:	dd0c      	ble.n	60008e3c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
60008e22:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
60008e24:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
60008e28:	600b      	str	r3, [r1, #0]
	successor->prev = node;
60008e2a:	6053      	str	r3, [r2, #4]
	update_cache(1);
60008e2c:	2001      	movs	r0, #1
60008e2e:	f7ff fde3 	bl	600089f8 <update_cache>
60008e32:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
60008e34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
60008e38:	f7fc bea8 	b.w	60005b8c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
60008e3c:	42a2      	cmp	r2, r4
60008e3e:	d0e3      	beq.n	60008e08 <z_impl_k_yield+0x3c>
60008e40:	6812      	ldr	r2, [r2, #0]
60008e42:	e7e0      	b.n	60008e06 <z_impl_k_yield+0x3a>
60008e44:	80001048 	.word	0x80001048

60008e48 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
60008e48:	ea50 0301 	orrs.w	r3, r0, r1
{
60008e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60008e50:	4605      	mov	r5, r0
60008e52:	460e      	mov	r6, r1
	if (ticks == 0) {
60008e54:	d103      	bne.n	60008e5e <z_tick_sleep+0x16>
	z_impl_k_yield();
60008e56:	f7ff ffb9 	bl	60008dcc <z_impl_k_yield>
		k_yield();
		return 0;
60008e5a:	2000      	movs	r0, #0
60008e5c:	e02c      	b.n	60008eb8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
60008e5e:	1c83      	adds	r3, r0, #2
60008e60:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
60008e64:	db2a      	blt.n	60008ebc <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
60008e66:	f002 f9c3 	bl	6000b1f0 <sys_clock_tick_get_32>
60008e6a:	182c      	adds	r4, r5, r0
60008e6c:	f04f 0310 	mov.w	r3, #16
60008e70:	f3ef 8811 	mrs	r8, BASEPRI
60008e74:	f383 8812 	msr	BASEPRI_MAX, r3
60008e78:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
60008e7c:	4f11      	ldr	r7, [pc, #68]	; (60008ec4 <z_tick_sleep+0x7c>)
60008e7e:	4b12      	ldr	r3, [pc, #72]	; (60008ec8 <z_tick_sleep+0x80>)
60008e80:	68b8      	ldr	r0, [r7, #8]
60008e82:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
60008e84:	f7ff fe4e 	bl	60008b24 <unready_thread>
	z_add_thread_timeout(_current, timeout);
60008e88:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
60008e8a:	462a      	mov	r2, r5
60008e8c:	490f      	ldr	r1, [pc, #60]	; (60008ecc <z_tick_sleep+0x84>)
60008e8e:	4633      	mov	r3, r6
60008e90:	3020      	adds	r0, #32
60008e92:	f000 f91f 	bl	600090d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
60008e96:	68ba      	ldr	r2, [r7, #8]
60008e98:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
60008e9a:	7b53      	ldrb	r3, [r2, #13]
60008e9c:	f043 0310 	orr.w	r3, r3, #16
60008ea0:	7353      	strb	r3, [r2, #13]
60008ea2:	f7fc fe73 	bl	60005b8c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
60008ea6:	f002 f9a3 	bl	6000b1f0 <sys_clock_tick_get_32>
60008eaa:	1a20      	subs	r0, r4, r0
60008eac:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
60008eb0:	2801      	cmp	r0, #1
60008eb2:	f173 0300 	sbcs.w	r3, r3, #0
60008eb6:	dbd0      	blt.n	60008e5a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
60008eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
60008ebc:	f06f 0401 	mvn.w	r4, #1
60008ec0:	1a24      	subs	r4, r4, r0
60008ec2:	e7d3      	b.n	60008e6c <z_tick_sleep+0x24>
60008ec4:	80001048 	.word	0x80001048
60008ec8:	80001c50 	.word	0x80001c50
60008ecc:	6000b023 	.word	0x6000b023

60008ed0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
60008ed0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
60008ed4:	bf08      	it	eq
60008ed6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
60008eda:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
60008edc:	d106      	bne.n	60008eec <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
60008ede:	4b07      	ldr	r3, [pc, #28]	; (60008efc <z_impl_k_sleep+0x2c>)
60008ee0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
60008ee2:	f7ff ff05 	bl	60008cf0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
60008ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
60008eea:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
60008eec:	f7ff ffac 	bl	60008e48 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
60008ef0:	220a      	movs	r2, #10
60008ef2:	2300      	movs	r3, #0
60008ef4:	17c1      	asrs	r1, r0, #31
60008ef6:	f7fa fdbf 	bl	60003a78 <__aeabi_uldivmod>
	return ret;
60008efa:	e7f6      	b.n	60008eea <z_impl_k_sleep+0x1a>
60008efc:	80001048 	.word	0x80001048

60008f00 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
60008f00:	4b01      	ldr	r3, [pc, #4]	; (60008f08 <z_impl_z_current_get+0x8>)
60008f02:	6898      	ldr	r0, [r3, #8]
60008f04:	4770      	bx	lr
60008f06:	bf00      	nop
60008f08:	80001048 	.word	0x80001048

60008f0c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
60008f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
60008f10:	4604      	mov	r4, r0
60008f12:	f04f 0310 	mov.w	r3, #16
60008f16:	f3ef 8611 	mrs	r6, BASEPRI
60008f1a:	f383 8812 	msr	BASEPRI_MAX, r3
60008f1e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
60008f22:	7b03      	ldrb	r3, [r0, #12]
60008f24:	07d9      	lsls	r1, r3, #31
60008f26:	d50b      	bpl.n	60008f40 <z_thread_abort+0x34>
	__asm__ volatile(
60008f28:	f386 8811 	msr	BASEPRI, r6
60008f2c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
60008f30:	4040      	eors	r0, r0
60008f32:	f380 8811 	msr	BASEPRI, r0
60008f36:	f04f 0004 	mov.w	r0, #4
60008f3a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
60008f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
60008f40:	7b43      	ldrb	r3, [r0, #13]
60008f42:	071a      	lsls	r2, r3, #28
60008f44:	d504      	bpl.n	60008f50 <z_thread_abort+0x44>
60008f46:	f386 8811 	msr	BASEPRI, r6
60008f4a:	f3bf 8f6f 	isb	sy
60008f4e:	e7f5      	b.n	60008f3c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
60008f50:	f023 0220 	bic.w	r2, r3, #32
60008f54:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
60008f58:	09d2      	lsrs	r2, r2, #7
60008f5a:	d123      	bne.n	60008fa4 <z_thread_abort+0x98>
		thread->base.thread_state &= ~_THREAD_ABORTING;
60008f5c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
60008f5e:	68a3      	ldr	r3, [r4, #8]
60008f60:	b113      	cbz	r3, 60008f68 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
60008f62:	4620      	mov	r0, r4
60008f64:	f002 f853 	bl	6000b00e <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
60008f68:	f104 0770 	add.w	r7, r4, #112	; 0x70
60008f6c:	f04f 0800 	mov.w	r8, #0
	return z_abort_timeout(&thread->base.timeout);
60008f70:	f104 0020 	add.w	r0, r4, #32
60008f74:	f002 f90a 	bl	6000b18c <z_abort_timeout>
	return list->head == list;
60008f78:	6f25      	ldr	r5, [r4, #112]	; 0x70
	return sys_dlist_is_empty(list) ? NULL : list->head;
60008f7a:	42bd      	cmp	r5, r7
60008f7c:	d000      	beq.n	60008f80 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
60008f7e:	b9cd      	cbnz	r5, 60008fb4 <z_thread_abort+0xa8>
		update_cache(1);
60008f80:	2001      	movs	r0, #1
60008f82:	f7ff fd39 	bl	600089f8 <update_cache>
		z_thread_monitor_exit(thread);
60008f86:	4620      	mov	r0, r4
60008f88:	f7ff fbb2 	bl	600086f0 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
60008f8c:	4b10      	ldr	r3, [pc, #64]	; (60008fd0 <z_thread_abort+0xc4>)
60008f8e:	689b      	ldr	r3, [r3, #8]
60008f90:	42a3      	cmp	r3, r4
60008f92:	d1d8      	bne.n	60008f46 <z_thread_abort+0x3a>
60008f94:	f3ef 8305 	mrs	r3, IPSR
60008f98:	2b00      	cmp	r3, #0
60008f9a:	d1d4      	bne.n	60008f46 <z_thread_abort+0x3a>
60008f9c:	4630      	mov	r0, r6
60008f9e:	f7fc fdf5 	bl	60005b8c <arch_swap>
	return ret;
60008fa2:	e7d0      	b.n	60008f46 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
60008fa4:	f003 035f 	and.w	r3, r3, #95	; 0x5f
60008fa8:	f043 0308 	orr.w	r3, r3, #8
60008fac:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
60008fae:	f002 f826 	bl	6000affe <sys_dlist_remove>
}
60008fb2:	e7d4      	b.n	60008f5e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
60008fb4:	4628      	mov	r0, r5
60008fb6:	f002 f82a 	bl	6000b00e <unpend_thread_no_timeout>
60008fba:	f105 0020 	add.w	r0, r5, #32
60008fbe:	f002 f8e5 	bl	6000b18c <z_abort_timeout>
		ready_thread(thread);
60008fc2:	4628      	mov	r0, r5
60008fc4:	f8c5 80c4 	str.w	r8, [r5, #196]	; 0xc4
60008fc8:	f7ff fd78 	bl	60008abc <ready_thread>
60008fcc:	e7d4      	b.n	60008f78 <z_thread_abort+0x6c>
60008fce:	bf00      	nop
60008fd0:	80001048 	.word	0x80001048

60008fd4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
60008fd4:	480c      	ldr	r0, [pc, #48]	; (60009008 <z_data_copy+0x34>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
60008fd6:	4a0d      	ldr	r2, [pc, #52]	; (6000900c <z_data_copy+0x38>)
60008fd8:	490d      	ldr	r1, [pc, #52]	; (60009010 <z_data_copy+0x3c>)
60008fda:	1a12      	subs	r2, r2, r0
{
60008fdc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
60008fde:	f001 ffea 	bl	6000afb6 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
60008fe2:	4a0c      	ldr	r2, [pc, #48]	; (60009014 <z_data_copy+0x40>)
60008fe4:	490c      	ldr	r1, [pc, #48]	; (60009018 <z_data_copy+0x44>)
60008fe6:	480d      	ldr	r0, [pc, #52]	; (6000901c <z_data_copy+0x48>)
60008fe8:	f001 ffe5 	bl	6000afb6 <z_early_memcpy>
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)
	z_early_memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		       __ccm_data_end - __ccm_data_start);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_itcm), okay)
	z_early_memcpy(&__itcm_start, &__itcm_load_start,
60008fec:	4a0c      	ldr	r2, [pc, #48]	; (60009020 <z_data_copy+0x4c>)
60008fee:	490d      	ldr	r1, [pc, #52]	; (60009024 <z_data_copy+0x50>)
60008ff0:	480d      	ldr	r0, [pc, #52]	; (60009028 <z_data_copy+0x54>)
60008ff2:	f001 ffe0 	bl	6000afb6 <z_early_memcpy>
		       (uintptr_t) &__itcm_size);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
		       __dtcm_data_end - __dtcm_data_start);
60008ff6:	480d      	ldr	r0, [pc, #52]	; (6000902c <z_data_copy+0x58>)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
60008ff8:	4a0d      	ldr	r2, [pc, #52]	; (60009030 <z_data_copy+0x5c>)
60008ffa:	490e      	ldr	r1, [pc, #56]	; (60009034 <z_data_copy+0x60>)
60008ffc:	1a12      	subs	r2, r2, r0
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
60008ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
60009002:	f001 bfd8 	b.w	6000afb6 <z_early_memcpy>
60009006:	bf00      	nop
60009008:	80000800 	.word	0x80000800
6000900c:	800009ac 	.word	0x800009ac
60009010:	6000ce20 	.word	0x6000ce20
60009014:	00000000 	.word	0x00000000
60009018:	6000ce20 	.word	0x6000ce20
6000901c:	80000800 	.word	0x80000800
60009020:	00000000 	.word	0x00000000
60009024:	6000cfcc 	.word	0x6000cfcc
60009028:	00000000 	.word	0x00000000
6000902c:	20000000 	.word	0x20000000
60009030:	20000000 	.word	0x20000000
60009034:	6000cfcc 	.word	0x6000cfcc

60009038 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
60009038:	4b03      	ldr	r3, [pc, #12]	; (60009048 <elapsed+0x10>)
6000903a:	681b      	ldr	r3, [r3, #0]
6000903c:	b90b      	cbnz	r3, 60009042 <elapsed+0xa>
6000903e:	f7fe bac1 	b.w	600075c4 <sys_clock_elapsed>
}
60009042:	2000      	movs	r0, #0
60009044:	4770      	bx	lr
60009046:	bf00      	nop
60009048:	80001c5c 	.word	0x80001c5c

6000904c <next_timeout>:
	return list->head == list;
6000904c:	4b11      	ldr	r3, [pc, #68]	; (60009094 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
6000904e:	b510      	push	{r4, lr}
60009050:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60009052:	429c      	cmp	r4, r3
60009054:	d10a      	bne.n	6000906c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
60009056:	f7ff ffef 	bl	60009038 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
6000905a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
6000905e:	4b0e      	ldr	r3, [pc, #56]	; (60009098 <next_timeout+0x4c>)
60009060:	691b      	ldr	r3, [r3, #16]
60009062:	b113      	cbz	r3, 6000906a <next_timeout+0x1e>
60009064:	4298      	cmp	r0, r3
60009066:	bfa8      	it	ge
60009068:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
6000906a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
6000906c:	f7ff ffe4 	bl	60009038 <elapsed>
	if ((to == NULL) ||
60009070:	2c00      	cmp	r4, #0
60009072:	d0f2      	beq.n	6000905a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
60009074:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
60009078:	1a1b      	subs	r3, r3, r0
6000907a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
6000907e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
60009082:	f172 0100 	sbcs.w	r1, r2, #0
60009086:	dae8      	bge.n	6000905a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
60009088:	2a00      	cmp	r2, #0
6000908a:	bfac      	ite	ge
6000908c:	4618      	movge	r0, r3
6000908e:	2000      	movlt	r0, #0
60009090:	e7e5      	b.n	6000905e <next_timeout+0x12>
60009092:	bf00      	nop
60009094:	80000944 	.word	0x80000944
60009098:	80001048 	.word	0x80001048

6000909c <remove_timeout>:
{
6000909c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
6000909e:	b170      	cbz	r0, 600090be <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
600090a0:	4b0b      	ldr	r3, [pc, #44]	; (600090d0 <remove_timeout+0x34>)
600090a2:	685b      	ldr	r3, [r3, #4]
600090a4:	4298      	cmp	r0, r3
600090a6:	d00a      	beq.n	600090be <remove_timeout+0x22>
600090a8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
600090aa:	b143      	cbz	r3, 600090be <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
600090ac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
600090b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
600090b4:	1912      	adds	r2, r2, r4
600090b6:	eb41 0105 	adc.w	r1, r1, r5
600090ba:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
600090be:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
600090c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
600090c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
600090c6:	2300      	movs	r3, #0
	node->prev = NULL;
600090c8:	e9c0 3300 	strd	r3, r3, [r0]
}
600090cc:	bd30      	pop	{r4, r5, pc}
600090ce:	bf00      	nop
600090d0:	80000944 	.word	0x80000944

600090d4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
600090d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
600090d8:	bf08      	it	eq
600090da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
600090de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600090e0:	4604      	mov	r4, r0
600090e2:	461d      	mov	r5, r3
600090e4:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
600090e6:	d061      	beq.n	600091ac <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
600090e8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
600090ea:	f04f 0310 	mov.w	r3, #16
600090ee:	f3ef 8711 	mrs	r7, BASEPRI
600090f2:	f383 8812 	msr	BASEPRI_MAX, r3
600090f6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
600090fa:	3201      	adds	r2, #1
600090fc:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
60009100:	da24      	bge.n	6000914c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
60009102:	4930      	ldr	r1, [pc, #192]	; (600091c4 <z_add_timeout+0xf0>)
60009104:	f06f 0301 	mvn.w	r3, #1
60009108:	e9d1 2000 	ldrd	r2, r0, [r1]
6000910c:	1a9b      	subs	r3, r3, r2
6000910e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60009112:	eb62 0000 	sbc.w	r0, r2, r0
60009116:	1b9e      	subs	r6, r3, r6
60009118:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
6000911c:	2e01      	cmp	r6, #1
6000911e:	f170 0300 	sbcs.w	r3, r0, #0
60009122:	da01      	bge.n	60009128 <z_add_timeout+0x54>
60009124:	2601      	movs	r6, #1
60009126:	2000      	movs	r0, #0
60009128:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
6000912c:	4e26      	ldr	r6, [pc, #152]	; (600091c8 <z_add_timeout+0xf4>)
6000912e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
60009132:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60009134:	45b4      	cmp	ip, r6
60009136:	bf08      	it	eq
60009138:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
6000913c:	f1bc 0f00 	cmp.w	ip, #0
60009140:	d10d      	bne.n	6000915e <z_add_timeout+0x8a>
	node->prev = tail;
60009142:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
60009146:	602c      	str	r4, [r5, #0]
	list->tail = node;
60009148:	6074      	str	r4, [r6, #4]
}
6000914a:	e01c      	b.n	60009186 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
6000914c:	f7ff ff74 	bl	60009038 <elapsed>
60009150:	3601      	adds	r6, #1
60009152:	f145 0500 	adc.w	r5, r5, #0
60009156:	1836      	adds	r6, r6, r0
60009158:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
6000915c:	e7e4      	b.n	60009128 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
6000915e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
60009162:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
60009166:	4293      	cmp	r3, r2
60009168:	eb71 0e00 	sbcs.w	lr, r1, r0
6000916c:	da1f      	bge.n	600091ae <z_add_timeout+0xda>
				t->dticks -= to->dticks;
6000916e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
60009170:	f8dc 3004 	ldr.w	r3, [ip, #4]
60009174:	eb60 0001 	sbc.w	r0, r0, r1
60009178:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
6000917c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
60009180:	601c      	str	r4, [r3, #0]
	successor->prev = node;
60009182:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
60009186:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
60009188:	42b3      	cmp	r3, r6
6000918a:	d00b      	beq.n	600091a4 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
6000918c:	429c      	cmp	r4, r3
6000918e:	d109      	bne.n	600091a4 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
60009190:	f7ff ff5c 	bl	6000904c <next_timeout>

			if (next_time == 0 ||
60009194:	b118      	cbz	r0, 6000919e <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
60009196:	4b0d      	ldr	r3, [pc, #52]	; (600091cc <z_add_timeout+0xf8>)
			if (next_time == 0 ||
60009198:	691b      	ldr	r3, [r3, #16]
6000919a:	4283      	cmp	r3, r0
6000919c:	d002      	beq.n	600091a4 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
6000919e:	2100      	movs	r1, #0
600091a0:	f7fe f99e 	bl	600074e0 <sys_clock_set_timeout>
	__asm__ volatile(
600091a4:	f387 8811 	msr	BASEPRI, r7
600091a8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
600091ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
600091ae:	1a9b      	subs	r3, r3, r2
600091b0:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
600091b4:	45ac      	cmp	ip, r5
600091b6:	e9c4 3104 	strd	r3, r1, [r4, #16]
600091ba:	d0c2      	beq.n	60009142 <z_add_timeout+0x6e>
600091bc:	f8dc c000 	ldr.w	ip, [ip]
600091c0:	e7bc      	b.n	6000913c <z_add_timeout+0x68>
600091c2:	bf00      	nop
600091c4:	80001088 	.word	0x80001088
600091c8:	80000944 	.word	0x80000944
600091cc:	80001048 	.word	0x80001048

600091d0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
600091d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
600091d4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
600091d6:	f7ff fcfb 	bl	60008bd0 <z_time_slice>
	__asm__ volatile(
600091da:	f04f 0310 	mov.w	r3, #16
600091de:	f3ef 8c11 	mrs	ip, BASEPRI
600091e2:	f383 8812 	msr	BASEPRI_MAX, r3
600091e6:	f3bf 8f6f 	isb	sy
	return list->head == list;
600091ea:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 6000929c <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
600091ee:	2500      	movs	r5, #0
	announce_remaining = ticks;
600091f0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 600092a0 <sys_clock_announce+0xd0>
600091f4:	f8da 0000 	ldr.w	r0, [sl]
600091f8:	f8c9 4000 	str.w	r4, [r9]
		t->dticks = 0;
600091fc:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
600091fe:	4550      	cmp	r0, sl
60009200:	bf08      	it	eq
60009202:	2000      	moveq	r0, #0
		curr_tick += dt;
60009204:	4f27      	ldr	r7, [pc, #156]	; (600092a4 <sys_clock_announce+0xd4>)
	     (t != NULL) && (t->dticks <= announce_remaining);
60009206:	f8d9 3000 	ldr.w	r3, [r9]
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
6000920a:	46e0      	mov	r8, ip
		curr_tick += dt;
6000920c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
60009210:	b380      	cbz	r0, 60009274 <sys_clock_announce+0xa4>
60009212:	ea4f 7ee3 	mov.w	lr, r3, asr #31
60009216:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
6000921a:	42b3      	cmp	r3, r6
6000921c:	eb7e 0b0c 	sbcs.w	fp, lr, ip
60009220:	da05      	bge.n	6000922e <sys_clock_announce+0x5e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
60009222:	1af6      	subs	r6, r6, r3
60009224:	eb6c 040e 	sbc.w	r4, ip, lr
60009228:	e9c0 6404 	strd	r6, r4, [r0, #16]
6000922c:	e022      	b.n	60009274 <sys_clock_announce+0xa4>
		curr_tick += dt;
6000922e:	18b2      	adds	r2, r6, r2
60009230:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
60009234:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
60009238:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
6000923c:	f7ff ff2e 	bl	6000909c <remove_timeout>
	__asm__ volatile(
60009240:	f388 8811 	msr	BASEPRI, r8
60009244:	f3bf 8f6f 	isb	sy
		t->fn(t);
60009248:	6883      	ldr	r3, [r0, #8]
6000924a:	4798      	blx	r3
	__asm__ volatile(
6000924c:	f04f 0310 	mov.w	r3, #16
60009250:	f3ef 8811 	mrs	r8, BASEPRI
60009254:	f383 8812 	msr	BASEPRI_MAX, r3
60009258:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
6000925c:	f8d9 3000 	ldr.w	r3, [r9]
	k.key = arch_irq_lock();
60009260:	46c4      	mov	ip, r8
	return list->head == list;
60009262:	f8da 0000 	ldr.w	r0, [sl]
60009266:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
60009268:	4550      	cmp	r0, sl
6000926a:	f8c9 3000 	str.w	r3, [r9]
6000926e:	d1ca      	bne.n	60009206 <sys_clock_announce+0x36>
		curr_tick += dt;
60009270:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
60009274:	189a      	adds	r2, r3, r2
	announce_remaining = 0;
60009276:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
6000927a:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
6000927e:	f8c9 4000 	str.w	r4, [r9]
	curr_tick += announce_remaining;
60009282:	e9c7 2300 	strd	r2, r3, [r7]

	sys_clock_set_timeout(next_timeout(), false);
60009286:	f7ff fee1 	bl	6000904c <next_timeout>
6000928a:	4621      	mov	r1, r4
6000928c:	f7fe f928 	bl	600074e0 <sys_clock_set_timeout>
	__asm__ volatile(
60009290:	f388 8811 	msr	BASEPRI, r8
60009294:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
60009298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
6000929c:	80000944 	.word	0x80000944
600092a0:	80001c5c 	.word	0x80001c5c
600092a4:	80001088 	.word	0x80001088

600092a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
600092a8:	b510      	push	{r4, lr}
	__asm__ volatile(
600092aa:	f04f 0310 	mov.w	r3, #16
600092ae:	f3ef 8411 	mrs	r4, BASEPRI
600092b2:	f383 8812 	msr	BASEPRI_MAX, r3
600092b6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
600092ba:	f7ff febd 	bl	60009038 <elapsed>
600092be:	4a06      	ldr	r2, [pc, #24]	; (600092d8 <sys_clock_tick_get+0x30>)
600092c0:	4603      	mov	r3, r0
600092c2:	e9d2 0100 	ldrd	r0, r1, [r2]
600092c6:	1818      	adds	r0, r3, r0
600092c8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
600092cc:	f384 8811 	msr	BASEPRI, r4
600092d0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
600092d4:	bd10      	pop	{r4, pc}
600092d6:	bf00      	nop
600092d8:	80001088 	.word	0x80001088

600092dc <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
600092dc:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
600092de:	4604      	mov	r4, r0
600092e0:	b178      	cbz	r0, 60009302 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
600092e2:	f7fe f98d 	bl	60007600 <sys_clock_cycle_get_32>
600092e6:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
600092e8:	4806      	ldr	r0, [pc, #24]	; (60009304 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
600092ea:	2300      	movs	r3, #0
600092ec:	4a06      	ldr	r2, [pc, #24]	; (60009308 <z_impl_k_busy_wait+0x2c>)
600092ee:	fba4 0100 	umull	r0, r1, r4, r0
600092f2:	f7fa fbc1 	bl	60003a78 <__aeabi_uldivmod>
600092f6:	4604      	mov	r4, r0
600092f8:	f7fe f982 	bl	60007600 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
600092fc:	1b43      	subs	r3, r0, r5
600092fe:	42a3      	cmp	r3, r4
60009300:	d3fa      	bcc.n	600092f8 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
60009302:	bd38      	pop	{r3, r4, r5, pc}
60009304:	1dcd6500 	.word	0x1dcd6500
60009308:	000f4240 	.word	0x000f4240

6000930c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
6000930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000930e:	4604      	mov	r4, r0
	__asm__ volatile(
60009310:	f04f 0310 	mov.w	r3, #16
60009314:	f3ef 8711 	mrs	r7, BASEPRI
60009318:	f383 8812 	msr	BASEPRI_MAX, r3
6000931c:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
60009320:	6802      	ldr	r2, [r0, #0]
60009322:	b122      	cbz	r2, 6000932e <z_timer_expiration_handler+0x22>
	__asm__ volatile(
60009324:	f387 8811 	msr	BASEPRI, r7
60009328:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
6000932c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
6000932e:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
60009332:	1c58      	adds	r0, r3, #1
60009334:	f146 0100 	adc.w	r1, r6, #0
60009338:	2802      	cmp	r0, #2
6000933a:	f171 0100 	sbcs.w	r1, r1, #0
6000933e:	d327      	bcc.n	60009390 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
60009340:	2b01      	cmp	r3, #1
60009342:	f176 0100 	sbcs.w	r1, r6, #0
60009346:	bfbc      	itt	lt
60009348:	2301      	movlt	r3, #1
6000934a:	4616      	movlt	r6, r2
6000934c:	1e5d      	subs	r5, r3, #1
6000934e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
60009352:	f001 ff51 	bl	6000b1f8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
60009356:	3001      	adds	r0, #1
60009358:	f141 0100 	adc.w	r1, r1, #0
6000935c:	1940      	adds	r0, r0, r5
6000935e:	eb46 0101 	adc.w	r1, r6, r1
60009362:	2801      	cmp	r0, #1
60009364:	f171 0100 	sbcs.w	r1, r1, #0
60009368:	db3b      	blt.n	600093e2 <z_timer_expiration_handler+0xd6>
6000936a:	f001 ff45 	bl	6000b1f8 <z_impl_k_uptime_ticks>
6000936e:	3001      	adds	r0, #1
60009370:	f06f 0201 	mvn.w	r2, #1
60009374:	f141 0100 	adc.w	r1, r1, #0
60009378:	1940      	adds	r0, r0, r5
6000937a:	eb46 0301 	adc.w	r3, r6, r1
6000937e:	1a12      	subs	r2, r2, r0
60009380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
60009384:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
60009388:	4918      	ldr	r1, [pc, #96]	; (600093ec <z_timer_expiration_handler+0xe0>)
6000938a:	4620      	mov	r0, r4
6000938c:	f7ff fea2 	bl	600090d4 <z_add_timeout>
	timer->status += 1U;
60009390:	6b23      	ldr	r3, [r4, #48]	; 0x30
60009392:	3301      	adds	r3, #1
60009394:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
60009396:	6a23      	ldr	r3, [r4, #32]
60009398:	b173      	cbz	r3, 600093b8 <z_timer_expiration_handler+0xac>
6000939a:	f387 8811 	msr	BASEPRI, r7
6000939e:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
600093a2:	6a23      	ldr	r3, [r4, #32]
600093a4:	4620      	mov	r0, r4
600093a6:	4798      	blx	r3
	__asm__ volatile(
600093a8:	f04f 0310 	mov.w	r3, #16
600093ac:	f3ef 8711 	mrs	r7, BASEPRI
600093b0:	f383 8812 	msr	BASEPRI_MAX, r3
600093b4:	f3bf 8f6f 	isb	sy
	return list->head == list;
600093b8:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
600093bc:	42a5      	cmp	r5, r4
600093be:	d0b1      	beq.n	60009324 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
600093c0:	2d00      	cmp	r5, #0
600093c2:	d0af      	beq.n	60009324 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
600093c4:	4628      	mov	r0, r5
600093c6:	f001 fe86 	bl	6000b0d6 <z_unpend_thread_no_timeout>
600093ca:	2300      	movs	r3, #0
600093cc:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	__asm__ volatile(
600093d0:	f387 8811 	msr	BASEPRI, r7
600093d4:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
600093d8:	4628      	mov	r0, r5
}
600093da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
600093de:	f001 be6a 	b.w	6000b0b6 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
600093e2:	f06f 0201 	mvn.w	r2, #1
600093e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
600093ea:	e7cd      	b.n	60009388 <z_timer_expiration_handler+0x7c>
600093ec:	6000930d 	.word	0x6000930d

600093f0 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
600093f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
600093f4:	bf08      	it	eq
600093f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
600093fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600093fe:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
60009402:	4605      	mov	r5, r0
60009404:	461c      	mov	r4, r3
60009406:	4691      	mov	r9, r2
60009408:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
6000940a:	d01c      	beq.n	60009446 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
6000940c:	1c53      	adds	r3, r2, #1
6000940e:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
60009412:	db09      	blt.n	60009428 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
60009414:	2a01      	cmp	r2, #1
60009416:	f174 0300 	sbcs.w	r3, r4, #0
6000941a:	bfbc      	itt	lt
6000941c:	2201      	movlt	r2, #1
6000941e:	2400      	movlt	r4, #0
60009420:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
60009424:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
60009428:	4628      	mov	r0, r5
6000942a:	f001 feaf 	bl	6000b18c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
6000942e:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
60009430:	464a      	mov	r2, r9
60009432:	4628      	mov	r0, r5
	timer->status = 0U;
60009434:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
60009436:	4643      	mov	r3, r8
60009438:	4904      	ldr	r1, [pc, #16]	; (6000944c <z_impl_k_timer_start+0x5c>)
	timer->period = period;
6000943a:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
		     duration);
}
6000943e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
60009442:	f7ff be47 	b.w	600090d4 <z_add_timeout>
}
60009446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000944a:	bf00      	nop
6000944c:	6000930d 	.word	0x6000930d

60009450 <z_sched_usage_start>:
	}
#endif
}

void z_sched_usage_start(struct k_thread *thread)
{
60009450:	b508      	push	{r3, lr}
60009452:	f7fe f8d5 	bl	60007600 <sys_clock_cycle_get_32>
	/* One write through a volatile pointer doesn't require
	 * synchronization as long as _usage() treats it as volatile
	 * (we can't race with _stop() by design).
	 */

	_current_cpu->usage0 = usage_now();
60009456:	2801      	cmp	r0, #1
60009458:	4b02      	ldr	r3, [pc, #8]	; (60009464 <z_sched_usage_start+0x14>)
6000945a:	bf38      	it	cc
6000945c:	2001      	movcc	r0, #1
6000945e:	6198      	str	r0, [r3, #24]
#endif
}
60009460:	bd08      	pop	{r3, pc}
60009462:	bf00      	nop
60009464:	80001048 	.word	0x80001048

60009468 <z_sched_usage_stop>:

void z_sched_usage_stop(void)
{
60009468:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
6000946a:	f04f 0310 	mov.w	r3, #16
6000946e:	f3ef 8611 	mrs	r6, BASEPRI
60009472:	f383 8812 	msr	BASEPRI_MAX, r3
60009476:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t k   = k_spin_lock(&usage_lock);

	struct _cpu     *cpu = _current_cpu;

	uint32_t u0 = cpu->usage0;
6000947a:	4d10      	ldr	r5, [pc, #64]	; (600094bc <z_sched_usage_stop+0x54>)
6000947c:	69ac      	ldr	r4, [r5, #24]

	if (u0 != 0) {
6000947e:	b1ac      	cbz	r4, 600094ac <z_sched_usage_stop+0x44>
60009480:	f7fe f8be 	bl	60007600 <sys_clock_cycle_get_32>
		uint32_t cycles = usage_now() - u0;

		if (cpu->current->base.usage.track_usage) {
60009484:	68ab      	ldr	r3, [r5, #8]
		uint32_t cycles = usage_now() - u0;
60009486:	2801      	cmp	r0, #1
60009488:	bf2c      	ite	cs
6000948a:	ebc4 0100 	rsbcs	r1, r4, r0
6000948e:	f1c4 0101 	rsbcc	r1, r4, #1
		if (cpu->current->base.usage.track_usage) {
60009492:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
60009496:	b132      	cbz	r2, 600094a6 <z_sched_usage_stop+0x3e>
	thread->base.usage.total += cycles;
60009498:	e9d3 200e 	ldrd	r2, r0, [r3, #56]	; 0x38
6000949c:	1852      	adds	r2, r2, r1
6000949e:	f140 0000 	adc.w	r0, r0, #0
600094a2:	e9c3 200e 	strd	r2, r0, [r3, #56]	; 0x38
			sched_thread_update_usage(cpu->current, cycles);
		}

		sched_cpu_update_usage(cpu, cycles);
600094a6:	4805      	ldr	r0, [pc, #20]	; (600094bc <z_sched_usage_stop+0x54>)
600094a8:	f001 fed1 	bl	6000b24e <sched_cpu_update_usage>
	}

	cpu->usage0 = 0;
600094ac:	2300      	movs	r3, #0
600094ae:	61ab      	str	r3, [r5, #24]
	__asm__ volatile(
600094b0:	f386 8811 	msr	BASEPRI, r6
600094b4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&usage_lock, k);
}
600094b8:	bd70      	pop	{r4, r5, r6, pc}
600094ba:	bf00      	nop
600094bc:	80001048 	.word	0x80001048

600094c0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
600094c0:	4801      	ldr	r0, [pc, #4]	; (600094c8 <boot_banner+0x8>)
600094c2:	f000 b86e 	b.w	600095a2 <printk>
600094c6:	bf00      	nop
600094c8:	6000cdde 	.word	0x6000cdde

600094cc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
600094cc:	4770      	bx	lr

600094ce <cbpprintf_external>:
{
600094ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
600094d2:	4606      	mov	r6, r0
600094d4:	460d      	mov	r5, r1
600094d6:	4617      	mov	r7, r2
	if (buf == NULL) {
600094d8:	4698      	mov	r8, r3
600094da:	b32b      	cbz	r3, 60009528 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
600094dc:	f898 4000 	ldrb.w	r4, [r8]
	for (i = 0; i < s_nbr; i++) {
600094e0:	f04f 0a00 	mov.w	sl, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
600094e4:	f893 9001 	ldrb.w	r9, [r3, #1]
	args_size = hdr->hdr.desc.len * sizeof(int);
600094e8:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
600094ea:	78db      	ldrb	r3, [r3, #3]
600094ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
600094f0:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
600094f4:	441c      	add	r4, r3
600094f6:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
600094f8:	45ca      	cmp	sl, r9
600094fa:	d309      	bcc.n	60009510 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
600094fc:	f108 0308 	add.w	r3, r8, #8
60009500:	f8d8 2004 	ldr.w	r2, [r8, #4]
60009504:	4639      	mov	r1, r7
60009506:	4630      	mov	r0, r6
60009508:	46ac      	mov	ip, r5
}
6000950a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
6000950e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
60009510:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
60009514:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
60009518:	4620      	mov	r0, r4
		*ps = s;
6000951a:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
6000951e:	f000 fbf4 	bl	60009d0a <strlen>
60009522:	3001      	adds	r0, #1
60009524:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
60009526:	e7e7      	b.n	600094f8 <cbpprintf_external+0x2a>
}
60009528:	f06f 0015 	mvn.w	r0, #21
6000952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

60009530 <is_ptr>:
{
60009530:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
60009532:	2500      	movs	r5, #0
{
60009534:	4602      	mov	r2, r0
	bool mod = false;
60009536:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
60009538:	4614      	mov	r4, r2
6000953a:	f814 3b01 	ldrb.w	r3, [r4], #1
6000953e:	b90b      	cbnz	r3, 60009544 <is_ptr+0x14>
					return false;
60009540:	4618      	mov	r0, r3
60009542:	e009      	b.n	60009558 <is_ptr+0x28>
		if (mod) {
60009544:	b198      	cbz	r0, 6000956e <is_ptr+0x3e>
			if (cnt == n) {
60009546:	428d      	cmp	r5, r1
60009548:	d107      	bne.n	6000955a <is_ptr+0x2a>
				if (c == 'p') {
6000954a:	2b70      	cmp	r3, #112	; 0x70
6000954c:	d004      	beq.n	60009558 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
6000954e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
60009552:	2a3a      	cmp	r2, #58	; 0x3a
60009554:	d80b      	bhi.n	6000956e <is_ptr+0x3e>
					return false;
60009556:	2000      	movs	r0, #0
}
60009558:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
6000955a:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
6000955e:	2e3a      	cmp	r6, #58	; 0x3a
60009560:	d805      	bhi.n	6000956e <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
60009562:	7853      	ldrb	r3, [r2, #1]
				cnt++;
60009564:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
60009566:	1c94      	adds	r4, r2, #2
60009568:	2b00      	cmp	r3, #0
6000956a:	d0e9      	beq.n	60009540 <is_ptr+0x10>
6000956c:	2000      	movs	r0, #0
		if (c == '%') {
6000956e:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
60009570:	4622      	mov	r2, r4
			mod = !mod;
60009572:	bf08      	it	eq
60009574:	f080 0001 	eoreq.w	r0, r0, #1
60009578:	e7de      	b.n	60009538 <is_ptr+0x8>

6000957a <arch_printk_char_out>:
}
6000957a:	2000      	movs	r0, #0
6000957c:	4770      	bx	lr

6000957e <str_out>:
{
6000957e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
60009580:	688a      	ldr	r2, [r1, #8]
60009582:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
60009584:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
60009586:	b114      	cbz	r4, 6000958e <str_out+0x10>
60009588:	684b      	ldr	r3, [r1, #4]
6000958a:	4293      	cmp	r3, r2
6000958c:	dc01      	bgt.n	60009592 <str_out+0x14>
		ctx->count++;
6000958e:	608d      	str	r5, [r1, #8]
}
60009590:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
60009592:	3b01      	subs	r3, #1
		ctx->str[ctx->count++] = '\0';
60009594:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
60009596:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
60009598:	bf0a      	itet	eq
6000959a:	2200      	moveq	r2, #0
		ctx->str[ctx->count++] = c;
6000959c:	54a0      	strbne	r0, [r4, r2]
		ctx->str[ctx->count++] = '\0';
6000959e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
600095a0:	e7f6      	b.n	60009590 <str_out+0x12>

600095a2 <printk>:
{
600095a2:	b40f      	push	{r0, r1, r2, r3}
600095a4:	b507      	push	{r0, r1, r2, lr}
600095a6:	a904      	add	r1, sp, #16
600095a8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
600095ac:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
600095ae:	f000 faf8 	bl	60009ba2 <z_log_vprintk>
}
600095b2:	b003      	add	sp, #12
600095b4:	f85d eb04 	ldr.w	lr, [sp], #4
600095b8:	b004      	add	sp, #16
600095ba:	4770      	bx	lr

600095bc <snprintk>:
{
600095bc:	b40c      	push	{r2, r3}
600095be:	b507      	push	{r0, r1, r2, lr}
600095c0:	ab04      	add	r3, sp, #16
600095c2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
600095c6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
600095c8:	f7fb f83c 	bl	60004644 <vsnprintk>
}
600095cc:	b003      	add	sp, #12
600095ce:	f85d eb04 	ldr.w	lr, [sp], #4
600095d2:	b002      	add	sp, #8
600095d4:	4770      	bx	lr

600095d6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
600095d6:	4604      	mov	r4, r0
600095d8:	4608      	mov	r0, r1
600095da:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
600095dc:	461a      	mov	r2, r3
{
600095de:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
600095e0:	47a0      	blx	r4
	return z_impl_z_current_get();
600095e2:	f7ff fc8d 	bl	60008f00 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
600095e6:	f7fc fecf 	bl	60006388 <z_impl_k_thread_abort>

600095ea <encode_uint>:
{
600095ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
600095ee:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
600095f0:	78d3      	ldrb	r3, [r2, #3]
{
600095f2:	4680      	mov	r8, r0
600095f4:	460f      	mov	r7, r1
	switch (specifier) {
600095f6:	2b6f      	cmp	r3, #111	; 0x6f
{
600095f8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
600095fa:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
600095fe:	d029      	beq.n	60009654 <encode_uint+0x6a>
60009600:	d824      	bhi.n	6000964c <encode_uint+0x62>
		return 10;
60009602:	2b58      	cmp	r3, #88	; 0x58
60009604:	bf0c      	ite	eq
60009606:	2610      	moveq	r6, #16
60009608:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
6000960a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
6000960e:	4632      	mov	r2, r6
60009610:	2300      	movs	r3, #0
60009612:	4640      	mov	r0, r8
60009614:	4639      	mov	r1, r7
60009616:	f7fa fa2f 	bl	60003a78 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
6000961a:	2a09      	cmp	r2, #9
6000961c:	b2d4      	uxtb	r4, r2
6000961e:	d81e      	bhi.n	6000965e <encode_uint+0x74>
60009620:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
60009622:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
60009624:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
60009626:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
6000962a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
6000962e:	d301      	bcc.n	60009634 <encode_uint+0x4a>
60009630:	45d1      	cmp	r9, sl
60009632:	d811      	bhi.n	60009658 <encode_uint+0x6e>
	if (conv->flag_hash) {
60009634:	782b      	ldrb	r3, [r5, #0]
60009636:	069b      	lsls	r3, r3, #26
60009638:	d505      	bpl.n	60009646 <encode_uint+0x5c>
		if (radix == 8) {
6000963a:	2e08      	cmp	r6, #8
6000963c:	d115      	bne.n	6000966a <encode_uint+0x80>
			conv->altform_0 = true;
6000963e:	78ab      	ldrb	r3, [r5, #2]
60009640:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
60009644:	70ab      	strb	r3, [r5, #2]
}
60009646:	4648      	mov	r0, r9
60009648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
6000964c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
60009650:	2b70      	cmp	r3, #112	; 0x70
60009652:	e7d7      	b.n	60009604 <encode_uint+0x1a>
	switch (specifier) {
60009654:	2608      	movs	r6, #8
60009656:	e7d8      	b.n	6000960a <encode_uint+0x20>
		value /= radix;
60009658:	4680      	mov	r8, r0
6000965a:	460f      	mov	r7, r1
6000965c:	e7d7      	b.n	6000960e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
6000965e:	f1bb 0f19 	cmp.w	fp, #25
60009662:	bf94      	ite	ls
60009664:	3437      	addls	r4, #55	; 0x37
60009666:	3457      	addhi	r4, #87	; 0x57
60009668:	e7db      	b.n	60009622 <encode_uint+0x38>
		} else if (radix == 16) {
6000966a:	2e10      	cmp	r6, #16
6000966c:	d1eb      	bne.n	60009646 <encode_uint+0x5c>
			conv->altform_0c = true;
6000966e:	78ab      	ldrb	r3, [r5, #2]
60009670:	f043 0310 	orr.w	r3, r3, #16
60009674:	e7e6      	b.n	60009644 <encode_uint+0x5a>

60009676 <outs>:
{
60009676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000967a:	4607      	mov	r7, r0
6000967c:	4688      	mov	r8, r1
6000967e:	4615      	mov	r5, r2
60009680:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
60009682:	4614      	mov	r4, r2
60009684:	42b4      	cmp	r4, r6
60009686:	d305      	bcc.n	60009694 <outs+0x1e>
60009688:	b10e      	cbz	r6, 6000968e <outs+0x18>
	return (int)count;
6000968a:	1b60      	subs	r0, r4, r5
6000968c:	e008      	b.n	600096a0 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
6000968e:	7823      	ldrb	r3, [r4, #0]
60009690:	2b00      	cmp	r3, #0
60009692:	d0fa      	beq.n	6000968a <outs+0x14>
		int rc = out((int)*sp++, ctx);
60009694:	4641      	mov	r1, r8
60009696:	f814 0b01 	ldrb.w	r0, [r4], #1
6000969a:	47b8      	blx	r7
		if (rc < 0) {
6000969c:	2800      	cmp	r0, #0
6000969e:	daf1      	bge.n	60009684 <outs+0xe>
}
600096a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

600096a4 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
600096a4:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
600096a6:	6903      	ldr	r3, [r0, #16]
{
600096a8:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
600096aa:	f013 0008 	ands.w	r0, r3, #8
600096ae:	d109      	bne.n	600096c4 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
600096b0:	6813      	ldr	r3, [r2, #0]
600096b2:	68d4      	ldr	r4, [r2, #12]
600096b4:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
600096b6:	bf97      	itett	ls
600096b8:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
600096ba:	1ae3      	subhi	r3, r4, r3

	return true;
600096bc:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
600096be:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
600096c0:	600b      	str	r3, [r1, #0]
}
600096c2:	bd10      	pop	{r4, pc}
600096c4:	2300      	movs	r3, #0
		return false;
600096c6:	4618      	mov	r0, r3
600096c8:	e7fa      	b.n	600096c0 <free_space+0x1c>

600096ca <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
600096ca:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
600096cc:	a901      	add	r1, sp, #4
{
600096ce:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
600096d0:	f7ff ffe8 	bl	600096a4 <free_space>
600096d4:	b120      	cbz	r0, 600096e0 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
600096d6:	9b01      	ldr	r3, [sp, #4]
600096d8:	68e2      	ldr	r2, [r4, #12]
600096da:	3b01      	subs	r3, #1
600096dc:	4413      	add	r3, r2
600096de:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
600096e0:	6a20      	ldr	r0, [r4, #32]
600096e2:	9b01      	ldr	r3, [sp, #4]
600096e4:	1ac0      	subs	r0, r0, r3
}
600096e6:	3801      	subs	r0, #1
600096e8:	b002      	add	sp, #8
600096ea:	bd10      	pop	{r4, pc}

600096ec <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
600096ec:	b510      	push	{r4, lr}
600096ee:	4604      	mov	r4, r0
	uint32_t i = idx + val;
600096f0:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
600096f2:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
600096f4:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
600096f6:	07d2      	lsls	r2, r2, #31
600096f8:	d502      	bpl.n	60009700 <idx_inc+0x14>
		return i & (buffer->size - 1);
600096fa:	3b01      	subs	r3, #1
600096fc:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
600096fe:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
60009700:	4298      	cmp	r0, r3
60009702:	bf28      	it	cs
60009704:	1ac0      	subcs	r0, r0, r3
60009706:	e7fa      	b.n	600096fe <idx_inc+0x12>

60009708 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
60009708:	b510      	push	{r4, lr}
6000970a:	4604      	mov	r4, r0
6000970c:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
6000970e:	68c1      	ldr	r1, [r0, #12]
60009710:	f7ff ffec 	bl	600096ec <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
60009714:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
60009716:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
60009718:	f023 0308 	bic.w	r3, r3, #8
6000971c:	6123      	str	r3, [r4, #16]
}
6000971e:	bd10      	pop	{r4, pc}

60009720 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
60009720:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
60009722:	008b      	lsls	r3, r1, #2
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
60009724:	69c2      	ldr	r2, [r0, #28]
{
60009726:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
60009728:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
6000972a:	f043 0302 	orr.w	r3, r3, #2
{
6000972e:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
60009730:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60009734:	462a      	mov	r2, r5
60009736:	6801      	ldr	r1, [r0, #0]
60009738:	f7ff ffd8 	bl	600096ec <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
6000973c:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
6000973e:	6861      	ldr	r1, [r4, #4]
60009740:	462a      	mov	r2, r5
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60009742:	4298      	cmp	r0, r3
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60009744:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
60009746:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
60009748:	bf02      	ittt	eq
6000974a:	6923      	ldreq	r3, [r4, #16]
6000974c:	f043 0308 	orreq.w	r3, r3, #8
60009750:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
60009752:	f7ff ffcb 	bl	600096ec <idx_inc>
60009756:	6060      	str	r0, [r4, #4]
}
60009758:	bd38      	pop	{r3, r4, r5, pc}

6000975a <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
6000975a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
6000975e:	68c7      	ldr	r7, [r0, #12]
{
60009760:	469b      	mov	fp, r3
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
60009762:	69c6      	ldr	r6, [r0, #28]
{
60009764:	4604      	mov	r4, r0
60009766:	4688      	mov	r8, r1
60009768:	4691      	mov	r9, r2
	if (item->hdr.busy && !item->hdr.valid) {
6000976a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
6000976e:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
60009772:	f003 0303 	and.w	r3, r3, #3
60009776:	2b02      	cmp	r3, #2
60009778:	f04f 0300 	mov.w	r3, #0
6000977c:	d009      	beq.n	60009792 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
6000977e:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
60009780:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
60009784:	6923      	ldr	r3, [r4, #16]
60009786:	0799      	lsls	r1, r3, #30
60009788:	d410      	bmi.n	600097ac <drop_item_locked+0x52>
		return false;
6000978a:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
6000978c:	b003      	add	sp, #12
6000978e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
60009792:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
60009796:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
60009798:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
6000979a:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
6000979e:	d0f1      	beq.n	60009784 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
600097a0:	f7ff ffb2 	bl	60009708 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
600097a4:	68e3      	ldr	r3, [r4, #12]
600097a6:	60a3      	str	r3, [r4, #8]
		return true;
600097a8:	2001      	movs	r0, #1
600097aa:	e7ef      	b.n	6000978c <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
600097ac:	69a3      	ldr	r3, [r4, #24]
600097ae:	4650      	mov	r0, sl
600097b0:	4798      	blx	r3
	return item->hdr.valid;
600097b2:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
600097b6:	4605      	mov	r5, r0
	if (!is_valid(item)) {
600097b8:	07da      	lsls	r2, r3, #31
600097ba:	d5e6      	bpl.n	6000978a <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
600097bc:	f013 0302 	ands.w	r3, r3, #2
600097c0:	d01d      	beq.n	600097fe <drop_item_locked+0xa4>
		if (free_wlen) {
600097c2:	f1b8 0f00 	cmp.w	r8, #0
600097c6:	d003      	beq.n	600097d0 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
600097c8:	4641      	mov	r1, r8
600097ca:	4620      	mov	r0, r4
600097cc:	f7ff ffa8 	bl	60009720 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
600097d0:	6861      	ldr	r1, [r4, #4]
600097d2:	462a      	mov	r2, r5
600097d4:	4620      	mov	r0, r4
600097d6:	f7ff ff89 	bl	600096ec <idx_inc>
600097da:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
600097dc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
600097e0:	4299      	cmp	r1, r3
600097e2:	d104      	bne.n	600097ee <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
600097e4:	462a      	mov	r2, r5
600097e6:	4620      	mov	r0, r4
600097e8:	f7ff ff80 	bl	600096ec <idx_inc>
600097ec:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
600097ee:	68a3      	ldr	r3, [r4, #8]
600097f0:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
600097f2:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
600097f4:	6923      	ldr	r3, [r4, #16]
600097f6:	f043 0308 	orr.w	r3, r3, #8
600097fa:	6123      	str	r3, [r4, #16]
600097fc:	e7d4      	b.n	600097a8 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
600097fe:	4601      	mov	r1, r0
60009800:	4620      	mov	r0, r4
60009802:	9301      	str	r3, [sp, #4]
60009804:	f7ff ff80 	bl	60009708 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
60009808:	68e2      	ldr	r2, [r4, #12]
6000980a:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
6000980c:	f1b8 0f00 	cmp.w	r8, #0
60009810:	d004      	beq.n	6000981c <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
60009812:	6821      	ldr	r1, [r4, #0]
60009814:	69e2      	ldr	r2, [r4, #28]
60009816:	9b01      	ldr	r3, [sp, #4]
60009818:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
6000981c:	eb05 0208 	add.w	r2, r5, r8
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
60009820:	4620      	mov	r0, r4
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
60009822:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
60009826:	6821      	ldr	r1, [r4, #0]
60009828:	f7ff ff60 	bl	600096ec <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
6000982c:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
6000982e:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
60009830:	f043 0308 	orr.w	r3, r3, #8
60009834:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
60009836:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
6000983a:	f36f 0300 	bfc	r3, #0, #1
6000983e:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
60009842:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
60009846:	e7af      	b.n	600097a8 <drop_item_locked+0x4e>

60009848 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
60009848:	b570      	push	{r4, r5, r6, lr}
6000984a:	4604      	mov	r4, r0
6000984c:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
6000984e:	f7ff ff4d 	bl	600096ec <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
60009852:	6823      	ldr	r3, [r4, #0]
60009854:	4283      	cmp	r3, r0
60009856:	d105      	bne.n	60009864 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
60009858:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
6000985a:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
6000985c:	f023 0308 	bic.w	r3, r3, #8
60009860:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
60009862:	bd70      	pop	{r4, r5, r6, pc}
	union mpsc_pbuf_generic skip = {
60009864:	00ab      	lsls	r3, r5, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
60009866:	69e2      	ldr	r2, [r4, #28]
	buffer->wr_idx = idx_inc(buffer,
60009868:	4620      	mov	r0, r4
	union mpsc_pbuf_generic skip = {
6000986a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
6000986e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
60009872:	462a      	mov	r2, r5
60009874:	6861      	ldr	r1, [r4, #4]
60009876:	f7ff ff39 	bl	600096ec <idx_inc>
6000987a:	6060      	str	r0, [r4, #4]
6000987c:	e7f1      	b.n	60009862 <post_drop_action+0x1a>

6000987e <max_utilization_update>:
{
6000987e:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
60009880:	6903      	ldr	r3, [r0, #16]
{
60009882:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
60009884:	075b      	lsls	r3, r3, #29
60009886:	d506      	bpl.n	60009896 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
60009888:	6a45      	ldr	r5, [r0, #36]	; 0x24
6000988a:	f7ff ff1e 	bl	600096ca <get_usage>
6000988e:	4285      	cmp	r5, r0
60009890:	bf2c      	ite	cs
60009892:	6265      	strcs	r5, [r4, #36]	; 0x24
60009894:	6260      	strcc	r0, [r4, #36]	; 0x24
}
60009896:	bd38      	pop	{r3, r4, r5, pc}

60009898 <mpsc_pbuf_init>:
{
60009898:	b538      	push	{r3, r4, r5, lr}
6000989a:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
6000989c:	221c      	movs	r2, #28
6000989e:	2100      	movs	r1, #0
{
600098a0:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
600098a2:	f000 fa4d 	bl	60009d40 <memset>
	buffer->get_wlen = cfg->get_wlen;
600098a6:	68eb      	ldr	r3, [r5, #12]
	buffer->max_usage = 0;
600098a8:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
600098aa:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
600098ac:	68ab      	ldr	r3, [r5, #8]
600098ae:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
600098b0:	682b      	ldr	r3, [r5, #0]
600098b2:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
600098b4:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
600098b6:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
600098b8:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
600098ba:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
600098bc:	b123      	cbz	r3, 600098c8 <mpsc_pbuf_init+0x30>
600098be:	1e59      	subs	r1, r3, #1
600098c0:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
600098c2:	bf08      	it	eq
600098c4:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
600098c8:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
600098ca:	2201      	movs	r2, #1
600098cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
600098d0:	2100      	movs	r1, #0
}
600098d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
600098d6:	f001 bb86 	b.w	6000afe6 <z_impl_k_sem_init>

600098da <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
600098da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
600098de:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
600098e0:	2500      	movs	r5, #0
{
600098e2:	4604      	mov	r4, r0
600098e4:	460e      	mov	r6, r1
600098e6:	9300      	str	r3, [sp, #0]
600098e8:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
600098ea:	6a03      	ldr	r3, [r0, #32]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
600098ec:	46a9      	mov	r9, r5
	union mpsc_pbuf_generic *dropped_item = NULL;
600098ee:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
600098f0:	428b      	cmp	r3, r1
	uint32_t tmp_wr_idx_shift = 0;
600098f2:	9505      	str	r5, [sp, #20]
	if (wlen > (buffer->size)) {
600098f4:	d33a      	bcc.n	6000996c <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
600098f6:	f04f 0310 	mov.w	r3, #16
600098fa:	f3ef 8b11 	mrs	fp, BASEPRI
600098fe:	f383 8812 	msr	BASEPRI_MAX, r3
60009902:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
60009906:	9a05      	ldr	r2, [sp, #20]
60009908:	46d8      	mov	r8, fp
6000990a:	b12a      	cbz	r2, 60009918 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
6000990c:	4629      	mov	r1, r5
6000990e:	4620      	mov	r0, r4
60009910:	f7ff ff9a 	bl	60009848 <post_drop_action>
			tmp_wr_idx_shift = 0;
60009914:	2300      	movs	r3, #0
60009916:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
60009918:	a904      	add	r1, sp, #16
6000991a:	4620      	mov	r0, r4
6000991c:	f7ff fec2 	bl	600096a4 <free_space>

		if (free_wlen >= wlen) {
60009920:	9904      	ldr	r1, [sp, #16]
		wrap = free_space(buffer, &free_wlen);
60009922:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
60009924:	42b1      	cmp	r1, r6
60009926:	d32a      	bcc.n	6000997e <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
60009928:	6822      	ldr	r2, [r4, #0]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
6000992a:	4620      	mov	r0, r4
			item =
6000992c:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
6000992e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
60009932:	eb03 0982 	add.w	r9, r3, r2, lsl #2
			item->hdr.valid = 0;
60009936:	f021 0103 	bic.w	r1, r1, #3
6000993a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
6000993e:	4632      	mov	r2, r6
60009940:	6821      	ldr	r1, [r4, #0]
60009942:	f7ff fed3 	bl	600096ec <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
60009946:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
60009948:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
6000994a:	4298      	cmp	r0, r3
6000994c:	d012      	beq.n	60009974 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
6000994e:	2700      	movs	r7, #0
	__asm__ volatile(
60009950:	f388 8811 	msr	BASEPRI, r8
60009954:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
60009958:	9903      	ldr	r1, [sp, #12]
6000995a:	b129      	cbz	r1, 60009968 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
6000995c:	6962      	ldr	r2, [r4, #20]
6000995e:	b10a      	cbz	r2, 60009964 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
60009960:	4620      	mov	r0, r4
60009962:	4790      	blx	r2
			}
			dropped_item = NULL;
60009964:	2300      	movs	r3, #0
60009966:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
60009968:	2f00      	cmp	r7, #0
6000996a:	d1c4      	bne.n	600098f6 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
6000996c:	4648      	mov	r0, r9
6000996e:	b007      	add	sp, #28
60009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
60009974:	6923      	ldr	r3, [r4, #16]
60009976:	f043 0308 	orr.w	r3, r3, #8
6000997a:	6123      	str	r3, [r4, #16]
6000997c:	e7e7      	b.n	6000994e <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
6000997e:	b118      	cbz	r0, 60009988 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
60009980:	4620      	mov	r0, r4
60009982:	f7ff fecd 	bl	60009720 <add_skip_item>
			cont = true;
60009986:	e7e3      	b.n	60009950 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
60009988:	9b00      	ldr	r3, [sp, #0]
6000998a:	ea5a 0303 	orrs.w	r3, sl, r3
6000998e:	d01a      	beq.n	600099c6 <mpsc_pbuf_alloc+0xec>
60009990:	9101      	str	r1, [sp, #4]
60009992:	f001 fb12 	bl	6000afba <k_is_in_isr>
60009996:	9901      	ldr	r1, [sp, #4]
60009998:	b9a8      	cbnz	r0, 600099c6 <mpsc_pbuf_alloc+0xec>
6000999a:	f38b 8811 	msr	BASEPRI, fp
6000999e:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
600099a2:	4652      	mov	r2, sl
600099a4:	9b00      	ldr	r3, [sp, #0]
600099a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
600099aa:	f7fe ffe9 	bl	60008980 <z_impl_k_sem_take>
	__asm__ volatile(
600099ae:	f04f 0310 	mov.w	r3, #16
600099b2:	f3ef 8811 	mrs	r8, BASEPRI
600099b6:	f383 8812 	msr	BASEPRI_MAX, r3
600099ba:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
600099be:	fab0 f780 	clz	r7, r0
600099c2:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
600099c4:	e7c4      	b.n	60009950 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
600099c6:	ab05      	add	r3, sp, #20
600099c8:	aa03      	add	r2, sp, #12
600099ca:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
600099cc:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
600099ce:	f7ff fec4 	bl	6000975a <drop_item_locked>
600099d2:	4607      	mov	r7, r0
600099d4:	e7bc      	b.n	60009950 <mpsc_pbuf_alloc+0x76>

600099d6 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
600099d6:	b570      	push	{r4, r5, r6, lr}
600099d8:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
600099da:	6983      	ldr	r3, [r0, #24]
600099dc:	4608      	mov	r0, r1
{
600099de:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
600099e0:	4798      	blx	r3
600099e2:	4602      	mov	r2, r0
600099e4:	f04f 0310 	mov.w	r3, #16
600099e8:	f3ef 8611 	mrs	r6, BASEPRI
600099ec:	f383 8812 	msr	BASEPRI_MAX, r3
600099f0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
600099f4:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
600099f6:	4620      	mov	r0, r4
	item->hdr.valid = 1;
600099f8:	f043 0301 	orr.w	r3, r3, #1
600099fc:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
600099fe:	6861      	ldr	r1, [r4, #4]
60009a00:	f7ff fe74 	bl	600096ec <idx_inc>
60009a04:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
60009a06:	4620      	mov	r0, r4
60009a08:	f7ff ff39 	bl	6000987e <max_utilization_update>
	__asm__ volatile(
60009a0c:	f386 8811 	msr	BASEPRI, r6
60009a10:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
60009a14:	bd70      	pop	{r4, r5, r6, pc}

60009a16 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
60009a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60009a18:	4604      	mov	r4, r0
	__asm__ volatile(
60009a1a:	f04f 0310 	mov.w	r3, #16
60009a1e:	f3ef 8611 	mrs	r6, BASEPRI
60009a22:	f383 8812 	msr	BASEPRI_MAX, r3
60009a26:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
60009a2a:	6923      	ldr	r3, [r4, #16]
60009a2c:	f013 0f08 	tst.w	r3, #8
60009a30:	68a3      	ldr	r3, [r4, #8]
60009a32:	d102      	bne.n	60009a3a <mpsc_pbuf_claim+0x24>
60009a34:	6862      	ldr	r2, [r4, #4]
60009a36:	4293      	cmp	r3, r2
60009a38:	d900      	bls.n	60009a3c <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
60009a3a:	6a22      	ldr	r2, [r4, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
60009a3c:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
60009a3e:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
60009a40:	b92a      	cbnz	r2, 60009a4e <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
60009a42:	f386 8811 	msr	BASEPRI, r6
60009a46:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
60009a4a:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
60009a4c:	e033      	b.n	60009ab6 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
60009a4e:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
60009a52:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
60009a56:	f012 0003 	ands.w	r0, r2, #3
60009a5a:	d0f2      	beq.n	60009a42 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
60009a5c:	2802      	cmp	r0, #2
60009a5e:	d103      	bne.n	60009a68 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
60009a60:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
60009a64:	08ad      	lsrs	r5, r5, #2
60009a66:	d105      	bne.n	60009a74 <mpsc_pbuf_claim+0x5e>
60009a68:	07d0      	lsls	r0, r2, #31
60009a6a:	d412      	bmi.n	60009a92 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
60009a6c:	69a3      	ldr	r3, [r4, #24]
60009a6e:	4638      	mov	r0, r7
60009a70:	4798      	blx	r3
60009a72:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
60009a74:	68a1      	ldr	r1, [r4, #8]
60009a76:	462a      	mov	r2, r5
60009a78:	4620      	mov	r0, r4
60009a7a:	f7ff fe37 	bl	600096ec <idx_inc>
				rd_idx_inc(buffer, inc);
60009a7e:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
60009a80:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
60009a82:	4620      	mov	r0, r4
60009a84:	f7ff fe40 	bl	60009708 <rd_idx_inc>
60009a88:	f386 8811 	msr	BASEPRI, r6
60009a8c:	f3bf 8f6f 	isb	sy
	} while (cont);
60009a90:	e7c3      	b.n	60009a1a <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
60009a92:	f042 0202 	orr.w	r2, r2, #2
						buffer->get_wlen(item));
60009a96:	4638      	mov	r0, r7
				item->hdr.busy = 1;
60009a98:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
60009a9c:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
60009a9e:	69a3      	ldr	r3, [r4, #24]
60009aa0:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
60009aa2:	4629      	mov	r1, r5
						buffer->get_wlen(item));
60009aa4:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
60009aa6:	4620      	mov	r0, r4
60009aa8:	f7ff fe20 	bl	600096ec <idx_inc>
				buffer->tmp_rd_idx =
60009aac:	60a0      	str	r0, [r4, #8]
60009aae:	f386 8811 	msr	BASEPRI, r6
60009ab2:	f3bf 8f6f 	isb	sy
}
60009ab6:	4638      	mov	r0, r7
60009ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

60009aba <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
60009aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60009abc:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
60009abe:	6983      	ldr	r3, [r0, #24]
60009ac0:	4608      	mov	r0, r1
{
60009ac2:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
60009ac4:	4798      	blx	r3
60009ac6:	4606      	mov	r6, r0
	__asm__ volatile(
60009ac8:	f04f 0310 	mov.w	r3, #16
60009acc:	f3ef 8711 	mrs	r7, BASEPRI
60009ad0:	f383 8812 	msr	BASEPRI_MAX, r3
60009ad4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
60009ad8:	782b      	ldrb	r3, [r5, #0]
60009ada:	f36f 0300 	bfc	r3, #0, #1
60009ade:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
60009ae0:	6923      	ldr	r3, [r4, #16]
60009ae2:	079b      	lsls	r3, r3, #30
60009ae4:	d505      	bpl.n	60009af2 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
60009ae6:	68e2      	ldr	r2, [r4, #12]
60009ae8:	69e3      	ldr	r3, [r4, #28]
60009aea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
60009aee:	429d      	cmp	r5, r3
60009af0:	d11a      	bne.n	60009b28 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
60009af2:	782b      	ldrb	r3, [r5, #0]
60009af4:	f36f 0341 	bfc	r3, #1, #1
60009af8:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
60009afa:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
60009afe:	4299      	cmp	r1, r3
60009b00:	d104      	bne.n	60009b0c <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
60009b02:	4632      	mov	r2, r6
60009b04:	4620      	mov	r0, r4
60009b06:	f7ff fdf1 	bl	600096ec <idx_inc>
60009b0a:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
60009b0c:	4631      	mov	r1, r6
60009b0e:	4620      	mov	r0, r4
60009b10:	f7ff fdfa 	bl	60009708 <rd_idx_inc>
	__asm__ volatile(
60009b14:	f387 8811 	msr	BASEPRI, r7
60009b18:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
60009b1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
60009b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
60009b24:	f7fe bf0a 	b.w	6000893c <z_impl_k_sem_give>
		witem->skip.len = wlen;
60009b28:	682b      	ldr	r3, [r5, #0]
60009b2a:	f360 039f 	bfi	r3, r0, #2, #30
60009b2e:	602b      	str	r3, [r5, #0]
60009b30:	e7f0      	b.n	60009b14 <mpsc_pbuf_free+0x5a>

60009b32 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
60009b32:	6902      	ldr	r2, [r0, #16]
60009b34:	6883      	ldr	r3, [r0, #8]
60009b36:	0712      	lsls	r2, r2, #28
60009b38:	d402      	bmi.n	60009b40 <mpsc_pbuf_is_pending+0xe>
60009b3a:	6842      	ldr	r2, [r0, #4]
60009b3c:	429a      	cmp	r2, r3
60009b3e:	d200      	bcs.n	60009b42 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
60009b40:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
60009b42:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
60009b44:	1e18      	subs	r0, r3, #0
60009b46:	bf18      	it	ne
60009b48:	2001      	movne	r0, #1
60009b4a:	4770      	bx	lr

60009b4c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
60009b4c:	4770      	bx	lr

60009b4e <z_arm_platform_init>:
		(&__ocram_data_end - &__ocram_data_start));
	/* Zero BSS region */
	memset(&__ocram_bss_start, 0, (&__ocram_bss_end - &__ocram_bss_start));
#endif
	/* Call CMSIS SystemInit */
	SystemInit();
60009b4e:	f7fd bfaf 	b.w	60007ab0 <SystemInit>

60009b52 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
60009b52:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
60009b54:	075b      	lsls	r3, r3, #29
60009b56:	d40b      	bmi.n	60009b70 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
60009b58:	6803      	ldr	r3, [r0, #0]
60009b5a:	8842      	ldrh	r2, [r0, #2]
60009b5c:	f3c3 2349 	ubfx	r3, r3, #9, #10
60009b60:	f3c2 02cb 	ubfx	r2, r2, #3, #12
60009b64:	1898      	adds	r0, r3, r2
60009b66:	3017      	adds	r0, #23
60009b68:	f020 0007 	bic.w	r0, r0, #7
60009b6c:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
60009b6e:	4770      	bx	lr
	return 0;
60009b70:	2000      	movs	r0, #0
}
60009b72:	4770      	bx	lr

60009b74 <dummy_timestamp>:
}
60009b74:	2000      	movs	r0, #0
60009b76:	4770      	bx	lr

60009b78 <atomic_inc>:
{
60009b78:	4603      	mov	r3, r0
}
60009b7a:	f3bf 8f5b 	dmb	ish
60009b7e:	e853 0f00 	ldrex	r0, [r3]
60009b82:	1c42      	adds	r2, r0, #1
60009b84:	e843 2100 	strex	r1, r2, [r3]
60009b88:	2900      	cmp	r1, #0
60009b8a:	d1f8      	bne.n	60009b7e <atomic_inc+0x6>
60009b8c:	f3bf 8f5b 	dmb	ish
60009b90:	4770      	bx	lr

60009b92 <default_lf_get_timestamp>:
{
60009b92:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
60009b94:	f001 fb30 	bl	6000b1f8 <z_impl_k_uptime_ticks>
60009b98:	220a      	movs	r2, #10
60009b9a:	2300      	movs	r3, #0
60009b9c:	f7f9 ff6c 	bl	60003a78 <__aeabi_uldivmod>
}
60009ba0:	bd08      	pop	{r3, pc}

60009ba2 <z_log_vprintk>:
{
60009ba2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
60009ba4:	2300      	movs	r3, #0
60009ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
60009baa:	461a      	mov	r2, r3
60009bac:	4619      	mov	r1, r3
60009bae:	4618      	mov	r0, r3
60009bb0:	e9cd 3300 	strd	r3, r3, [sp]
60009bb4:	f7fb fcb4 	bl	60005520 <z_impl_z_log_msg_runtime_vcreate>
}
60009bb8:	b005      	add	sp, #20
60009bba:	f85d fb04 	ldr.w	pc, [sp], #4

60009bbe <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
60009bbe:	2001      	movs	r0, #1
60009bc0:	f7fb ba9c 	b.w	600050fc <z_log_dropped>

60009bc4 <z_log_get_tag>:
}
60009bc4:	2000      	movs	r0, #0
60009bc6:	4770      	bx	lr

60009bc8 <z_cbprintf_cpy>:
{
60009bc8:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
60009bca:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
{
60009bce:	460c      	mov	r4, r1
60009bd0:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
60009bd2:	1b9b      	subs	r3, r3, r6
60009bd4:	428b      	cmp	r3, r1
60009bd6:	d30a      	bcc.n	60009bee <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
60009bd8:	6813      	ldr	r3, [r2, #0]
60009bda:	460a      	mov	r2, r1
60009bdc:	4601      	mov	r1, r0
60009bde:	1998      	adds	r0, r3, r6
60009be0:	f000 f8a3 	bl	60009d2a <memcpy>
	desc->off += len;
60009be4:	68ab      	ldr	r3, [r5, #8]
	return len;
60009be6:	4620      	mov	r0, r4
	desc->off += len;
60009be8:	4423      	add	r3, r4
60009bea:	60ab      	str	r3, [r5, #8]
}
60009bec:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
60009bee:	f06f 001b 	mvn.w	r0, #27
60009bf2:	e7fb      	b.n	60009bec <z_cbprintf_cpy+0x24>

60009bf4 <z_log_msg_finalize>:
{
60009bf4:	b570      	push	{r4, r5, r6, lr}
60009bf6:	460e      	mov	r6, r1
60009bf8:	4615      	mov	r5, r2
60009bfa:	4619      	mov	r1, r3
	if (!msg) {
60009bfc:	4604      	mov	r4, r0
60009bfe:	b918      	cbnz	r0, 60009c08 <z_log_msg_finalize+0x14>
}
60009c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
60009c04:	f7fb ba7a 	b.w	600050fc <z_log_dropped>
	if (data) {
60009c08:	b13b      	cbz	r3, 60009c1a <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
60009c0a:	f3c2 2349 	ubfx	r3, r2, #9, #10
60009c0e:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
60009c10:	f3c2 42cb 	ubfx	r2, r2, #19, #12
60009c14:	4418      	add	r0, r3
60009c16:	f000 f888 	bl	60009d2a <memcpy>
	z_log_msg_commit(msg);
60009c1a:	4620      	mov	r0, r4
	msg->hdr.source = source;
60009c1c:	e9c4 5600 	strd	r5, r6, [r4]
}
60009c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
60009c24:	f7fb bbf4 	b.w	60005410 <z_log_msg_commit>

60009c28 <buffer_write>:
{
60009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60009c2a:	4606      	mov	r6, r0
60009c2c:	460d      	mov	r5, r1
60009c2e:	4614      	mov	r4, r2
60009c30:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
60009c32:	4621      	mov	r1, r4
60009c34:	4628      	mov	r0, r5
60009c36:	463a      	mov	r2, r7
60009c38:	47b0      	blx	r6
	} while (len != 0);
60009c3a:	1a24      	subs	r4, r4, r0
		buf += processed;
60009c3c:	4405      	add	r5, r0
	} while (len != 0);
60009c3e:	d1f8      	bne.n	60009c32 <buffer_write+0xa>
}
60009c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

60009c42 <cbvprintf>:
{
60009c42:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
60009c44:	2400      	movs	r4, #0
60009c46:	9400      	str	r4, [sp, #0]
60009c48:	f7fa fd12 	bl	60004670 <z_cbvprintf_impl>
}
60009c4c:	b002      	add	sp, #8
60009c4e:	bd10      	pop	{r4, pc}

60009c50 <log_output_flush>:
{
60009c50:	b510      	push	{r4, lr}
		     output->control_block->offset,
60009c52:	6842      	ldr	r2, [r0, #4]
{
60009c54:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
60009c56:	6881      	ldr	r1, [r0, #8]
60009c58:	6800      	ldr	r0, [r0, #0]
60009c5a:	e9d2 2300 	ldrd	r2, r3, [r2]
60009c5e:	f7ff ffe3 	bl	60009c28 <buffer_write>
	output->control_block->offset = 0;
60009c62:	6863      	ldr	r3, [r4, #4]
60009c64:	2200      	movs	r2, #0
60009c66:	601a      	str	r2, [r3, #0]
}
60009c68:	bd10      	pop	{r4, pc}

60009c6a <out_func>:
{
60009c6a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
60009c6c:	684b      	ldr	r3, [r1, #4]
{
60009c6e:	4605      	mov	r5, r0
60009c70:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
60009c72:	681a      	ldr	r2, [r3, #0]
60009c74:	68cb      	ldr	r3, [r1, #12]
60009c76:	429a      	cmp	r2, r3
60009c78:	d102      	bne.n	60009c80 <out_func+0x16>
		log_output_flush(out_ctx);
60009c7a:	4608      	mov	r0, r1
60009c7c:	f7ff ffe8 	bl	60009c50 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
60009c80:	6863      	ldr	r3, [r4, #4]
60009c82:	f3bf 8f5b 	dmb	ish
60009c86:	e853 2f00 	ldrex	r2, [r3]
60009c8a:	1c51      	adds	r1, r2, #1
60009c8c:	e843 1000 	strex	r0, r1, [r3]
60009c90:	2800      	cmp	r0, #0
60009c92:	d1f8      	bne.n	60009c86 <out_func+0x1c>
60009c94:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
60009c98:	68a3      	ldr	r3, [r4, #8]
}
60009c9a:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
60009c9c:	549d      	strb	r5, [r3, r2]
}
60009c9e:	bd38      	pop	{r3, r4, r5, pc}

60009ca0 <cr_out_func>:
	if (c == '\n') {
60009ca0:	280a      	cmp	r0, #10
{
60009ca2:	b538      	push	{r3, r4, r5, lr}
60009ca4:	4604      	mov	r4, r0
60009ca6:	460d      	mov	r5, r1
	if (c == '\n') {
60009ca8:	d102      	bne.n	60009cb0 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
60009caa:	200d      	movs	r0, #13
60009cac:	f7ff ffdd 	bl	60009c6a <out_func>
	out_func(c, ctx);
60009cb0:	4629      	mov	r1, r5
60009cb2:	4620      	mov	r0, r4
60009cb4:	f7ff ffd9 	bl	60009c6a <out_func>
}
60009cb8:	2000      	movs	r0, #0
60009cba:	bd38      	pop	{r3, r4, r5, pc}

60009cbc <log_backend_uart_init>:
}
60009cbc:	4770      	bx	lr

60009cbe <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
60009cbe:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
60009cc0:	6800      	ldr	r0, [r0, #0]
60009cc2:	f7fb beb1 	b.w	60005a28 <z_arm_fatal_error>

60009cc6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
60009cc6:	2100      	movs	r1, #0
60009cc8:	2001      	movs	r0, #1
60009cca:	f7fb bead 	b.w	60005a28 <z_arm_fatal_error>

60009cce <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
60009cce:	b508      	push	{r3, lr}
	handler();
60009cd0:	f7fb ff34 	bl	60005b3c <z_SysNmiOnReset>
	z_arm_int_exit();
}
60009cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
60009cd8:	f7fc b818 	b.w	60005d0c <z_arm_exc_exit>

60009cdc <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
60009cdc:	2300      	movs	r3, #0
60009cde:	f7fb bbcb 	b.w	60005478 <z_impl_z_log_msg_static_create>

60009ce2 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
60009ce2:	3901      	subs	r1, #1
60009ce4:	4603      	mov	r3, r0
{
60009ce6:	b510      	push	{r4, lr}
	while ((n > 0) && *s != '\0') {
60009ce8:	b922      	cbnz	r2, 60009cf4 <strncpy+0x12>
60009cea:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
60009cec:	2100      	movs	r1, #0
	while (n > 0) {
60009cee:	4293      	cmp	r3, r2
60009cf0:	d108      	bne.n	60009d04 <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
60009cf2:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
60009cf4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
60009cf8:	2c00      	cmp	r4, #0
60009cfa:	d0f6      	beq.n	60009cea <strncpy+0x8>
		n--;
60009cfc:	3a01      	subs	r2, #1
		*d = *s;
60009cfe:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
60009d02:	e7f1      	b.n	60009ce8 <strncpy+0x6>
		*d = '\0';
60009d04:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
60009d08:	e7f1      	b.n	60009cee <strncpy+0xc>

60009d0a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
60009d0a:	4603      	mov	r3, r0
	size_t n = 0;
60009d0c:	2000      	movs	r0, #0

	while (*s != '\0') {
60009d0e:	5c1a      	ldrb	r2, [r3, r0]
60009d10:	b902      	cbnz	r2, 60009d14 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
60009d12:	4770      	bx	lr
		n++;
60009d14:	3001      	adds	r0, #1
60009d16:	e7fa      	b.n	60009d0e <strlen+0x4>

60009d18 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
60009d18:	4603      	mov	r3, r0
	size_t n = 0;
60009d1a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
60009d1c:	5c1a      	ldrb	r2, [r3, r0]
60009d1e:	b10a      	cbz	r2, 60009d24 <strnlen+0xc>
60009d20:	4288      	cmp	r0, r1
60009d22:	d100      	bne.n	60009d26 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
60009d24:	4770      	bx	lr
		n++;
60009d26:	3001      	adds	r0, #1
60009d28:	e7f8      	b.n	60009d1c <strnlen+0x4>

60009d2a <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
60009d2a:	1e43      	subs	r3, r0, #1
60009d2c:	440a      	add	r2, r1
{
60009d2e:	b510      	push	{r4, lr}
	while (n > 0) {
60009d30:	4291      	cmp	r1, r2
60009d32:	d100      	bne.n	60009d36 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
60009d34:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
60009d36:	f811 4b01 	ldrb.w	r4, [r1], #1
60009d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
60009d3e:	e7f7      	b.n	60009d30 <memcpy+0x6>

60009d40 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
60009d40:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
60009d42:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
60009d44:	4603      	mov	r3, r0
	while (n > 0) {
60009d46:	4293      	cmp	r3, r2
60009d48:	d100      	bne.n	60009d4c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
60009d4a:	4770      	bx	lr
		*(d_byte++) = c_byte;
60009d4c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
60009d50:	e7f9      	b.n	60009d46 <memset+0x6>

60009d52 <_stdout_hook_default>:
}
60009d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
60009d56:	4770      	bx	lr

60009d58 <mcux_ccm_on>:
}
60009d58:	2000      	movs	r0, #0
60009d5a:	4770      	bx	lr

60009d5c <mcux_ccm_init>:

static int mcux_ccm_init(const struct device *dev)
{
	return 0;
}
60009d5c:	2000      	movs	r0, #0
60009d5e:	4770      	bx	lr

60009d60 <mcux_ccm_off>:
static int mcux_ccm_off(const struct device *dev,
60009d60:	2000      	movs	r0, #0
60009d62:	4770      	bx	lr

60009d64 <nxp_edma_callback>:
{
60009d64:	4613      	mov	r3, r2
60009d66:	b430      	push	{r4, r5}
60009d68:	460c      	mov	r4, r1
	uint32_t channel = handle->channel;
60009d6a:	7c02      	ldrb	r2, [r0, #16]
	if (transferDone) {
60009d6c:	b183      	cbz	r3, 60009d90 <nxp_edma_callback+0x2c>
		data->busy = (handle->tcdPool != NULL) && (handle->tcdUsed > 0);
60009d6e:	68c3      	ldr	r3, [r0, #12]
60009d70:	b12b      	cbz	r3, 60009d7e <nxp_edma_callback+0x1a>
60009d72:	7cc3      	ldrb	r3, [r0, #19]
60009d74:	b25b      	sxtb	r3, r3
60009d76:	2b00      	cmp	r3, #0
60009d78:	bfd4      	ite	le
60009d7a:	2300      	movle	r3, #0
60009d7c:	2301      	movgt	r3, #1
60009d7e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		ret = 0;
60009d82:	2300      	movs	r3, #0
	data->dma_callback(data->dev, data->user_data, channel, ret);
60009d84:	6b20      	ldr	r0, [r4, #48]	; 0x30
60009d86:	e9d4 150d 	ldrd	r1, r5, [r4, #52]	; 0x34
60009d8a:	46ac      	mov	ip, r5
}
60009d8c:	bc30      	pop	{r4, r5}
	data->dma_callback(data->dev, data->user_data, channel, ret);
60009d8e:	4760      	bx	ip
	int ret = 1;
60009d90:	2301      	movs	r3, #1
60009d92:	e7f7      	b.n	60009d84 <nxp_edma_callback+0x20>

60009d94 <dma_mcux_edma_channel_filter>:
	if (filter && *filter == DMA_CHANNEL_PERIODIC) {
60009d94:	b13a      	cbz	r2, 60009da6 <dma_mcux_edma_channel_filter+0x12>
60009d96:	7813      	ldrb	r3, [r2, #0]
60009d98:	2b01      	cmp	r3, #1
60009d9a:	d104      	bne.n	60009da6 <dma_mcux_edma_channel_filter+0x12>
		if (channel_id > 3) {
60009d9c:	2903      	cmp	r1, #3
60009d9e:	bfcc      	ite	gt
60009da0:	2000      	movgt	r0, #0
60009da2:	2001      	movle	r0, #1
60009da4:	4770      	bx	lr
	return true;
60009da6:	2001      	movs	r0, #1
}
60009da8:	4770      	bx	lr

60009daa <dma_mcux_edma_get_status>:
{
60009daa:	b570      	push	{r4, r5, r6, lr}
60009dac:	4614      	mov	r4, r2
	if (DEV_CHANNEL_DATA(dev, channel)->busy) {
60009dae:	6903      	ldr	r3, [r0, #16]
60009db0:	2254      	movs	r2, #84	; 0x54
{
60009db2:	4605      	mov	r5, r0
60009db4:	460e      	mov	r6, r1
	if (DEV_CHANNEL_DATA(dev, channel)->busy) {
60009db6:	fb02 3301 	mla	r3, r2, r1, r3
60009dba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
60009dbe:	b183      	cbz	r3, 60009de2 <dma_mcux_edma_get_status+0x38>
		status->busy = true;
60009dc0:	2301      	movs	r3, #1
60009dc2:	7023      	strb	r3, [r4, #0]
			EDMA_GetRemainingMajorLoopCount(DEV_BASE(dev), channel);
60009dc4:	6843      	ldr	r3, [r0, #4]
60009dc6:	6818      	ldr	r0, [r3, #0]
60009dc8:	f000 fd37 	bl	6000a83a <EDMA_GetRemainingMajorLoopCount>
60009dcc:	4603      	mov	r3, r0
		status->pending_length =
60009dce:	6063      	str	r3, [r4, #4]
	status->dir = DEV_CHANNEL_DATA(dev, channel)->transfer_settings.direction;
60009dd0:	2254      	movs	r2, #84	; 0x54
60009dd2:	692b      	ldr	r3, [r5, #16]
}
60009dd4:	2000      	movs	r0, #0
	status->dir = DEV_CHANNEL_DATA(dev, channel)->transfer_settings.direction;
60009dd6:	fb02 3306 	mla	r3, r2, r6, r3
60009dda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
60009dde:	7063      	strb	r3, [r4, #1]
}
60009de0:	bd70      	pop	{r4, r5, r6, pc}
		status->busy = false;
60009de2:	7023      	strb	r3, [r4, #0]
		status->pending_length = 0;
60009de4:	e7f3      	b.n	60009dce <dma_mcux_edma_get_status+0x24>

60009de6 <dma_mcux_edma_resume>:
{
60009de6:	b508      	push	{r3, lr}
	if (!data->busy) {
60009de8:	2354      	movs	r3, #84	; 0x54
	struct call_back *data = DEV_CHANNEL_DATA(dev, channel);
60009dea:	6900      	ldr	r0, [r0, #16]
	if (!data->busy) {
60009dec:	4359      	muls	r1, r3
60009dee:	1843      	adds	r3, r0, r1
60009df0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
60009df4:	b12b      	cbz	r3, 60009e02 <dma_mcux_edma_resume+0x1c>
	EDMA_StartTransfer(DEV_EDMA_HANDLE(dev, channel));
60009df6:	3124      	adds	r1, #36	; 0x24
60009df8:	4408      	add	r0, r1
60009dfa:	f000 fe45 	bl	6000aa88 <EDMA_StartTransfer>
	return 0;
60009dfe:	2000      	movs	r0, #0
}
60009e00:	bd08      	pop	{r3, pc}
		return -EINVAL;
60009e02:	f06f 0015 	mvn.w	r0, #21
60009e06:	e7fb      	b.n	60009e00 <dma_mcux_edma_resume+0x1a>

60009e08 <dma_mcux_edma_start>:
	data->busy = true;
60009e08:	2254      	movs	r2, #84	; 0x54
{
60009e0a:	b508      	push	{r3, lr}
	data->busy = true;
60009e0c:	4351      	muls	r1, r2
	struct call_back *data = DEV_CHANNEL_DATA(dev, channel);
60009e0e:	6903      	ldr	r3, [r0, #16]
	data->busy = true;
60009e10:	2201      	movs	r2, #1
60009e12:	440b      	add	r3, r1
	EDMA_StartTransfer(DEV_EDMA_HANDLE(dev, channel));
60009e14:	3124      	adds	r1, #36	; 0x24
	data->busy = true;
60009e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	EDMA_StartTransfer(DEV_EDMA_HANDLE(dev, channel));
60009e1a:	6900      	ldr	r0, [r0, #16]
60009e1c:	4408      	add	r0, r1
60009e1e:	f000 fe33 	bl	6000aa88 <EDMA_StartTransfer>
}
60009e22:	2000      	movs	r0, #0
60009e24:	bd08      	pop	{r3, pc}

60009e26 <dma_mcux_edma_suspend>:
{
60009e26:	b508      	push	{r3, lr}
	if (!data->busy) {
60009e28:	2354      	movs	r3, #84	; 0x54
	struct call_back *data = DEV_CHANNEL_DATA(dev, channel);
60009e2a:	6900      	ldr	r0, [r0, #16]
	if (!data->busy) {
60009e2c:	4359      	muls	r1, r3
60009e2e:	1843      	adds	r3, r0, r1
60009e30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
60009e34:	b12b      	cbz	r3, 60009e42 <dma_mcux_edma_suspend+0x1c>
	EDMA_StopTransfer(DEV_EDMA_HANDLE(dev, channel));
60009e36:	3124      	adds	r1, #36	; 0x24
60009e38:	4408      	add	r0, r1
60009e3a:	f000 fe4d 	bl	6000aad8 <EDMA_StopTransfer>
	return 0;
60009e3e:	2000      	movs	r0, #0
}
60009e40:	bd08      	pop	{r3, pc}
		return -EINVAL;
60009e42:	f06f 0015 	mvn.w	r0, #21
60009e46:	e7fb      	b.n	60009e40 <dma_mcux_edma_suspend+0x1a>

60009e48 <dma_mcux_edma_stop>:
{
60009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60009e4a:	4604      	mov	r4, r0
	struct dma_mcux_edma_data *data = DEV_DATA(dev);
60009e4c:	6905      	ldr	r5, [r0, #16]
	data->data_cb[channel].transfer_settings.valid = false;
60009e4e:	2054      	movs	r0, #84	; 0x54
60009e50:	2700      	movs	r7, #0
{
60009e52:	460e      	mov	r6, r1
	data->data_cb[channel].transfer_settings.valid = false;
60009e54:	4348      	muls	r0, r1
60009e56:	4405      	add	r5, r0
	if (!data->data_cb[channel].busy) {
60009e58:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
	data->data_cb[channel].transfer_settings.valid = false;
60009e5c:	f885 705a 	strb.w	r7, [r5, #90]	; 0x5a
	if (!data->data_cb[channel].busy) {
60009e60:	b18b      	cbz	r3, 60009e86 <dma_mcux_edma_stop+0x3e>
	EDMA_AbortTransfer(DEV_EDMA_HANDLE(dev, channel));
60009e62:	6923      	ldr	r3, [r4, #16]
60009e64:	3024      	adds	r0, #36	; 0x24
60009e66:	4418      	add	r0, r3
60009e68:	f000 fe40 	bl	6000aaec <EDMA_AbortTransfer>
	EDMA_ClearChannelStatusFlags(DEV_BASE(dev), channel,
60009e6c:	6863      	ldr	r3, [r4, #4]
60009e6e:	2207      	movs	r2, #7
60009e70:	4631      	mov	r1, r6
60009e72:	6818      	ldr	r0, [r3, #0]
60009e74:	f000 fd09 	bl	6000a88a <EDMA_ClearChannelStatusFlags>
	EDMA_ResetChannel(DEV_BASE(dev), channel);
60009e78:	6863      	ldr	r3, [r4, #4]
60009e7a:	4631      	mov	r1, r6
60009e7c:	6818      	ldr	r0, [r3, #0]
60009e7e:	f000 fc69 	bl	6000a754 <EDMA_ResetChannel>
	data->data_cb[channel].busy = false;
60009e82:	f885 705c 	strb.w	r7, [r5, #92]	; 0x5c
}
60009e86:	2000      	movs	r0, #0
60009e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

60009e8a <dma_imx_config_func_0>:
			      PRE_KERNEL_1, CONFIG_DMA_INIT_PRIORITY,   \
			      &dma_mcux_edma_api);		       \
								       \
	DMA_MCUX_EDMA_CONFIG_FUNC(n);

DT_INST_FOREACH_STATUS_OKAY(DMA_INIT)
60009e8a:	2200      	movs	r2, #0
60009e8c:	b508      	push	{r3, lr}
60009e8e:	4611      	mov	r1, r2
60009e90:	4610      	mov	r0, r2
60009e92:	f7fb fe3d 	bl	60005b10 <z_arm_irq_priority_set>
60009e96:	2000      	movs	r0, #0
60009e98:	f7fb fe2c 	bl	60005af4 <arch_irq_enable>
60009e9c:	2200      	movs	r2, #0
60009e9e:	2001      	movs	r0, #1
60009ea0:	4611      	mov	r1, r2
60009ea2:	f7fb fe35 	bl	60005b10 <z_arm_irq_priority_set>
60009ea6:	2001      	movs	r0, #1
60009ea8:	f7fb fe24 	bl	60005af4 <arch_irq_enable>
60009eac:	2200      	movs	r2, #0
60009eae:	2002      	movs	r0, #2
60009eb0:	4611      	mov	r1, r2
60009eb2:	f7fb fe2d 	bl	60005b10 <z_arm_irq_priority_set>
60009eb6:	2002      	movs	r0, #2
60009eb8:	f7fb fe1c 	bl	60005af4 <arch_irq_enable>
60009ebc:	2200      	movs	r2, #0
60009ebe:	2003      	movs	r0, #3
60009ec0:	4611      	mov	r1, r2
60009ec2:	f7fb fe25 	bl	60005b10 <z_arm_irq_priority_set>
60009ec6:	2003      	movs	r0, #3
60009ec8:	f7fb fe14 	bl	60005af4 <arch_irq_enable>
60009ecc:	2200      	movs	r2, #0
60009ece:	2004      	movs	r0, #4
60009ed0:	4611      	mov	r1, r2
60009ed2:	f7fb fe1d 	bl	60005b10 <z_arm_irq_priority_set>
60009ed6:	2004      	movs	r0, #4
60009ed8:	f7fb fe0c 	bl	60005af4 <arch_irq_enable>
60009edc:	2200      	movs	r2, #0
60009ede:	2005      	movs	r0, #5
60009ee0:	4611      	mov	r1, r2
60009ee2:	f7fb fe15 	bl	60005b10 <z_arm_irq_priority_set>
60009ee6:	2005      	movs	r0, #5
60009ee8:	f7fb fe04 	bl	60005af4 <arch_irq_enable>
60009eec:	2200      	movs	r2, #0
60009eee:	2006      	movs	r0, #6
60009ef0:	4611      	mov	r1, r2
60009ef2:	f7fb fe0d 	bl	60005b10 <z_arm_irq_priority_set>
60009ef6:	2006      	movs	r0, #6
60009ef8:	f7fb fdfc 	bl	60005af4 <arch_irq_enable>
60009efc:	2200      	movs	r2, #0
60009efe:	2007      	movs	r0, #7
60009f00:	4611      	mov	r1, r2
60009f02:	f7fb fe05 	bl	60005b10 <z_arm_irq_priority_set>
60009f06:	2007      	movs	r0, #7
60009f08:	f7fb fdf4 	bl	60005af4 <arch_irq_enable>
60009f0c:	2200      	movs	r2, #0
60009f0e:	2008      	movs	r0, #8
60009f10:	4611      	mov	r1, r2
60009f12:	f7fb fdfd 	bl	60005b10 <z_arm_irq_priority_set>
60009f16:	2008      	movs	r0, #8
60009f18:	f7fb fdec 	bl	60005af4 <arch_irq_enable>
60009f1c:	2200      	movs	r2, #0
60009f1e:	2009      	movs	r0, #9
60009f20:	4611      	mov	r1, r2
60009f22:	f7fb fdf5 	bl	60005b10 <z_arm_irq_priority_set>
60009f26:	2009      	movs	r0, #9
60009f28:	f7fb fde4 	bl	60005af4 <arch_irq_enable>
60009f2c:	2200      	movs	r2, #0
60009f2e:	200a      	movs	r0, #10
60009f30:	4611      	mov	r1, r2
60009f32:	f7fb fded 	bl	60005b10 <z_arm_irq_priority_set>
60009f36:	200a      	movs	r0, #10
60009f38:	f7fb fddc 	bl	60005af4 <arch_irq_enable>
60009f3c:	2200      	movs	r2, #0
60009f3e:	200b      	movs	r0, #11
60009f40:	4611      	mov	r1, r2
60009f42:	f7fb fde5 	bl	60005b10 <z_arm_irq_priority_set>
60009f46:	200b      	movs	r0, #11
60009f48:	f7fb fdd4 	bl	60005af4 <arch_irq_enable>
60009f4c:	2200      	movs	r2, #0
60009f4e:	200c      	movs	r0, #12
60009f50:	4611      	mov	r1, r2
60009f52:	f7fb fddd 	bl	60005b10 <z_arm_irq_priority_set>
60009f56:	200c      	movs	r0, #12
60009f58:	f7fb fdcc 	bl	60005af4 <arch_irq_enable>
60009f5c:	2200      	movs	r2, #0
60009f5e:	200d      	movs	r0, #13
60009f60:	4611      	mov	r1, r2
60009f62:	f7fb fdd5 	bl	60005b10 <z_arm_irq_priority_set>
60009f66:	200d      	movs	r0, #13
60009f68:	f7fb fdc4 	bl	60005af4 <arch_irq_enable>
60009f6c:	2200      	movs	r2, #0
60009f6e:	200e      	movs	r0, #14
60009f70:	4611      	mov	r1, r2
60009f72:	f7fb fdcd 	bl	60005b10 <z_arm_irq_priority_set>
60009f76:	200e      	movs	r0, #14
60009f78:	f7fb fdbc 	bl	60005af4 <arch_irq_enable>
60009f7c:	2200      	movs	r2, #0
60009f7e:	200f      	movs	r0, #15
60009f80:	4611      	mov	r1, r2
60009f82:	f7fb fdc5 	bl	60005b10 <z_arm_irq_priority_set>
60009f86:	200f      	movs	r0, #15
60009f88:	f7fb fdb4 	bl	60005af4 <arch_irq_enable>
60009f8c:	2200      	movs	r2, #0
60009f8e:	2010      	movs	r0, #16
60009f90:	4611      	mov	r1, r2
60009f92:	f7fb fdbd 	bl	60005b10 <z_arm_irq_priority_set>
60009f96:	2010      	movs	r0, #16
60009f98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
60009f9c:	f7fb bdaa 	b.w	60005af4 <arch_irq_enable>

60009fa0 <dma_mcux_edma_irq_handler>:
{
60009fa0:	b570      	push	{r4, r5, r6, lr}
60009fa2:	4605      	mov	r5, r0
	for (i = 0; i < DT_INST_PROP(0, dma_channels); i++) {
60009fa4:	2400      	movs	r4, #0
			EDMA_HandleIRQ(DEV_EDMA_HANDLE(dev, i));
60009fa6:	2654      	movs	r6, #84	; 0x54
		uint32_t flag = EDMA_GetChannelStatusFlags(DEV_BASE(dev), i);
60009fa8:	686b      	ldr	r3, [r5, #4]
60009faa:	4621      	mov	r1, r4
60009fac:	6818      	ldr	r0, [r3, #0]
60009fae:	f000 fc58 	bl	6000a862 <EDMA_GetChannelStatusFlags>
		if ((flag & (uint32_t)kEDMA_InterruptFlag) != 0U) {
60009fb2:	0743      	lsls	r3, r0, #29
60009fb4:	d506      	bpl.n	60009fc4 <dma_mcux_edma_irq_handler+0x24>
			EDMA_HandleIRQ(DEV_EDMA_HANDLE(dev, i));
60009fb6:	fb06 f304 	mul.w	r3, r6, r4
60009fba:	6928      	ldr	r0, [r5, #16]
60009fbc:	3324      	adds	r3, #36	; 0x24
60009fbe:	4418      	add	r0, r3
60009fc0:	f000 fdbd 	bl	6000ab3e <EDMA_HandleIRQ>
	for (i = 0; i < DT_INST_PROP(0, dma_channels); i++) {
60009fc4:	3401      	adds	r4, #1
60009fc6:	2c20      	cmp	r4, #32
60009fc8:	d1ee      	bne.n	60009fa8 <dma_mcux_edma_irq_handler+0x8>
}
60009fca:	bd70      	pop	{r4, r5, r6, pc}

60009fcc <z_log_msg_static_create.constprop.0>:
60009fcc:	2300      	movs	r3, #0
60009fce:	f7fb ba53 	b.w	60005478 <z_impl_z_log_msg_static_create>

60009fd2 <mcux_igpio_port_get_raw>:
}

static int mcux_igpio_port_get_raw(const struct device *dev, uint32_t *value)
{
	const struct mcux_igpio_config *config = dev->config;
	GPIO_Type *base = config->base;
60009fd2:	6843      	ldr	r3, [r0, #4]

	*value = base->DR;

	return 0;
}
60009fd4:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
60009fd6:	685b      	ldr	r3, [r3, #4]
	*value = base->DR;
60009fd8:	681b      	ldr	r3, [r3, #0]
60009fda:	600b      	str	r3, [r1, #0]
}
60009fdc:	4770      	bx	lr

60009fde <mcux_igpio_port_set_masked_raw>:
static int mcux_igpio_port_set_masked_raw(const struct device *dev,
					  uint32_t mask,
					  uint32_t value)
{
	const struct mcux_igpio_config *config = dev->config;
	GPIO_Type *base = config->base;
60009fde:	6843      	ldr	r3, [r0, #4]
60009fe0:	685b      	ldr	r3, [r3, #4]

	base->DR = (base->DR & ~mask) | (mask & value);
60009fe2:	6818      	ldr	r0, [r3, #0]
60009fe4:	4042      	eors	r2, r0
60009fe6:	400a      	ands	r2, r1
60009fe8:	4042      	eors	r2, r0

	return 0;
}
60009fea:	2000      	movs	r0, #0
	base->DR = (base->DR & ~mask) | (mask & value);
60009fec:	601a      	str	r2, [r3, #0]
}
60009fee:	4770      	bx	lr

60009ff0 <mcux_igpio_port_set_bits_raw>:

static int mcux_igpio_port_set_bits_raw(const struct device *dev,
					uint32_t mask)
{
	const struct mcux_igpio_config *config = dev->config;
	GPIO_Type *base = config->base;
60009ff0:	6843      	ldr	r3, [r0, #4]

	GPIO_PortSet(base, mask);

	return 0;
}
60009ff2:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
60009ff4:	685b      	ldr	r3, [r3, #4]
 * @param mask GPIO pin number macro
 */
static inline void GPIO_PortSet(GPIO_Type *base, uint32_t mask)
{
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_SET) && (FSL_FEATURE_IGPIO_HAS_DR_SET == 1))
    base->DR_SET = mask;
60009ff6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
60009ffa:	4770      	bx	lr

60009ffc <mcux_igpio_port_clear_bits_raw>:

static int mcux_igpio_port_clear_bits_raw(const struct device *dev,
					  uint32_t mask)
{
	const struct mcux_igpio_config *config = dev->config;
	GPIO_Type *base = config->base;
60009ffc:	6843      	ldr	r3, [r0, #4]

	GPIO_PortClear(base, mask);

	return 0;
}
60009ffe:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
6000a000:	685b      	ldr	r3, [r3, #4]
 * @param mask GPIO pin number macro
 */
static inline void GPIO_PortClear(GPIO_Type *base, uint32_t mask)
{
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_CLEAR) && (FSL_FEATURE_IGPIO_HAS_DR_CLEAR == 1))
    base->DR_CLEAR = mask;
6000a002:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
}
6000a006:	4770      	bx	lr

6000a008 <mcux_igpio_port_toggle_bits>:

static int mcux_igpio_port_toggle_bits(const struct device *dev,
				       uint32_t mask)
{
	const struct mcux_igpio_config *config = dev->config;
	GPIO_Type *base = config->base;
6000a008:	6843      	ldr	r3, [r0, #4]

	GPIO_PortToggle(base, mask);

	return 0;
}
6000a00a:	2000      	movs	r0, #0
	GPIO_Type *base = config->base;
6000a00c:	685b      	ldr	r3, [r3, #4]
 * @param mask GPIO pin number macro
 */
static inline void GPIO_PortToggle(GPIO_Type *base, uint32_t mask)
{
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_TOGGLE) && (FSL_FEATURE_IGPIO_HAS_DR_TOGGLE == 1))
    base->DR_TOGGLE = mask;
6000a00e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
}
6000a012:	4770      	bx	lr

6000a014 <mcux_igpio_pin_interrupt_configure>:

static int mcux_igpio_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
6000a014:	b570      	push	{r4, r5, r6, lr}
	GPIO_Type *base = config->base;
	unsigned int key;
	uint8_t icr;
	int shift;

	if (mode == GPIO_INT_MODE_DISABLED) {
6000a016:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	GPIO_Type *base = config->base;
6000a01a:	6840      	ldr	r0, [r0, #4]
6000a01c:	6840      	ldr	r0, [r0, #4]
	if (mode == GPIO_INT_MODE_DISABLED) {
6000a01e:	d113      	bne.n	6000a048 <mcux_igpio_pin_interrupt_configure+0x34>
	__asm__ volatile(
6000a020:	f04f 0310 	mov.w	r3, #16
6000a024:	f3ef 8411 	mrs	r4, BASEPRI
6000a028:	f383 8812 	msr	BASEPRI_MAX, r3
6000a02c:	f3bf 8f6f 	isb	sy
		key = irq_lock();

		WRITE_BIT(base->IMR, pin, 0);
6000a030:	2201      	movs	r2, #1
6000a032:	6943      	ldr	r3, [r0, #20]
6000a034:	408a      	lsls	r2, r1
6000a036:	ea23 0302 	bic.w	r3, r3, r2

	key = irq_lock();

	WRITE_BIT(base->EDGE_SEL, pin, trig == GPIO_INT_TRIG_BOTH);
	WRITE_BIT(base->ISR, pin, 1);
	WRITE_BIT(base->IMR, pin, 1);
6000a03a:	6143      	str	r3, [r0, #20]
	__asm__ volatile(
6000a03c:	f384 8811 	msr	BASEPRI, r4
6000a040:	f3bf 8f6f 	isb	sy
		return 0;
6000a044:	2000      	movs	r0, #0

	irq_unlock(key);

	return 0;
}
6000a046:	bd70      	pop	{r4, r5, r6, pc}
	if ((mode == GPIO_INT_MODE_EDGE) && (trig == GPIO_INT_TRIG_LOW)) {
6000a048:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
6000a04c:	d12b      	bne.n	6000a0a6 <mcux_igpio_pin_interrupt_configure+0x92>
6000a04e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
6000a052:	d030      	beq.n	6000a0b6 <mcux_igpio_pin_interrupt_configure+0xa2>
	} else if ((mode == GPIO_INT_MODE_EDGE) &&
6000a054:	f103 457c 	add.w	r5, r3, #4227858432	; 0xfc000000
6000a058:	426a      	negs	r2, r5
6000a05a:	416a      	adcs	r2, r5
6000a05c:	0052      	lsls	r2, r2, #1
	if (pin < 16) {
6000a05e:	290f      	cmp	r1, #15
6000a060:	d82d      	bhi.n	6000a0be <mcux_igpio_pin_interrupt_configure+0xaa>
		shift = 2 * pin;
6000a062:	004d      	lsls	r5, r1, #1
		base->ICR1 = (base->ICR1 & ~(3 << shift)) | (icr << shift);
6000a064:	2603      	movs	r6, #3
6000a066:	68c4      	ldr	r4, [r0, #12]
6000a068:	40ae      	lsls	r6, r5
6000a06a:	fa02 f505 	lsl.w	r5, r2, r5
6000a06e:	ea24 0406 	bic.w	r4, r4, r6
6000a072:	432c      	orrs	r4, r5
6000a074:	60c4      	str	r4, [r0, #12]
	__asm__ volatile(
6000a076:	f04f 0210 	mov.w	r2, #16
6000a07a:	f3ef 8411 	mrs	r4, BASEPRI
6000a07e:	f382 8812 	msr	BASEPRI_MAX, r2
6000a082:	f3bf 8f6f 	isb	sy
	WRITE_BIT(base->EDGE_SEL, pin, trig == GPIO_INT_TRIG_BOTH);
6000a086:	2201      	movs	r2, #1
6000a088:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
6000a08c:	69c3      	ldr	r3, [r0, #28]
6000a08e:	fa02 f201 	lsl.w	r2, r2, r1
6000a092:	bf0c      	ite	eq
6000a094:	4313      	orreq	r3, r2
6000a096:	4393      	bicne	r3, r2
6000a098:	61c3      	str	r3, [r0, #28]
	WRITE_BIT(base->ISR, pin, 1);
6000a09a:	6983      	ldr	r3, [r0, #24]
6000a09c:	4313      	orrs	r3, r2
6000a09e:	6183      	str	r3, [r0, #24]
	WRITE_BIT(base->IMR, pin, 1);
6000a0a0:	6943      	ldr	r3, [r0, #20]
6000a0a2:	4313      	orrs	r3, r2
6000a0a4:	e7c9      	b.n	6000a03a <mcux_igpio_pin_interrupt_configure+0x26>
	} else if ((mode == GPIO_INT_MODE_LEVEL) &&
6000a0a6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
6000a0aa:	d106      	bne.n	6000a0ba <mcux_igpio_pin_interrupt_configure+0xa6>
6000a0ac:	f103 447c 	add.w	r4, r3, #4227858432	; 0xfc000000
6000a0b0:	4262      	negs	r2, r4
6000a0b2:	4162      	adcs	r2, r4
6000a0b4:	e7d3      	b.n	6000a05e <mcux_igpio_pin_interrupt_configure+0x4a>
		icr = 3;
6000a0b6:	2203      	movs	r2, #3
6000a0b8:	e7d1      	b.n	6000a05e <mcux_igpio_pin_interrupt_configure+0x4a>
		icr = 0;
6000a0ba:	2200      	movs	r2, #0
6000a0bc:	e7cf      	b.n	6000a05e <mcux_igpio_pin_interrupt_configure+0x4a>
	} else if (pin < 32) {
6000a0be:	291f      	cmp	r1, #31
6000a0c0:	d80b      	bhi.n	6000a0da <mcux_igpio_pin_interrupt_configure+0xc6>
		shift = 2 * (pin - 16);
6000a0c2:	f1a1 0510 	sub.w	r5, r1, #16
		base->ICR2 = (base->ICR2 & ~(3 << shift)) | (icr << shift);
6000a0c6:	2603      	movs	r6, #3
6000a0c8:	6904      	ldr	r4, [r0, #16]
		shift = 2 * (pin - 16);
6000a0ca:	006d      	lsls	r5, r5, #1
		base->ICR2 = (base->ICR2 & ~(3 << shift)) | (icr << shift);
6000a0cc:	40ae      	lsls	r6, r5
6000a0ce:	40aa      	lsls	r2, r5
6000a0d0:	ea24 0406 	bic.w	r4, r4, r6
6000a0d4:	4322      	orrs	r2, r4
6000a0d6:	6102      	str	r2, [r0, #16]
6000a0d8:	e7cd      	b.n	6000a076 <mcux_igpio_pin_interrupt_configure+0x62>
		return -EINVAL;
6000a0da:	f06f 0015 	mvn.w	r0, #21
6000a0de:	e7b2      	b.n	6000a046 <mcux_igpio_pin_interrupt_configure+0x32>

6000a0e0 <mcux_igpio_manage_callback>:

static int mcux_igpio_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
6000a0e0:	b510      	push	{r4, lr}
	struct mcux_igpio_data *data = dev->data;
6000a0e2:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
6000a0e4:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
6000a0e6:	b1f8      	cbz	r0, 6000a128 <mcux_igpio_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
6000a0e8:	4288      	cmp	r0, r1
6000a0ea:	d119      	bne.n	6000a120 <mcux_igpio_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
6000a0ec:	689c      	ldr	r4, [r3, #8]
	return node->next;
6000a0ee:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
6000a0f0:	42a1      	cmp	r1, r4
	list->head = node;
6000a0f2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
6000a0f4:	d100      	bne.n	6000a0f8 <mcux_igpio_manage_callback+0x18>
	list->tail = node;
6000a0f6:	6098      	str	r0, [r3, #8]
	parent->next = child;
6000a0f8:	2000      	movs	r0, #0
6000a0fa:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
6000a0fc:	b12a      	cbz	r2, 6000a10a <mcux_igpio_manage_callback+0x2a>
	return list->head;
6000a0fe:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
6000a100:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
6000a102:	689a      	ldr	r2, [r3, #8]
	list->head = node;
6000a104:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
6000a106:	b902      	cbnz	r2, 6000a10a <mcux_igpio_manage_callback+0x2a>
	list->tail = node;
6000a108:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
6000a10a:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->callbacks, callback, set);
6000a10c:	e010      	b.n	6000a130 <mcux_igpio_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
6000a10e:	4281      	cmp	r1, r0
6000a110:	d106      	bne.n	6000a120 <mcux_igpio_manage_callback+0x40>
	return node->next;
6000a112:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
6000a114:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
6000a116:	6898      	ldr	r0, [r3, #8]
6000a118:	4281      	cmp	r1, r0
6000a11a:	d1ed      	bne.n	6000a0f8 <mcux_igpio_manage_callback+0x18>
	list->tail = node;
6000a11c:	609c      	str	r4, [r3, #8]
}
6000a11e:	e7eb      	b.n	6000a0f8 <mcux_igpio_manage_callback+0x18>
	return node->next;
6000a120:	4604      	mov	r4, r0
6000a122:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
6000a124:	2800      	cmp	r0, #0
6000a126:	d1f2      	bne.n	6000a10e <mcux_igpio_manage_callback+0x2e>
			if (!set) {
6000a128:	2a00      	cmp	r2, #0
6000a12a:	d1e8      	bne.n	6000a0fe <mcux_igpio_manage_callback+0x1e>
				return -EINVAL;
6000a12c:	f06f 0015 	mvn.w	r0, #21
}
6000a130:	bd10      	pop	{r4, pc}

6000a132 <mcux_igpio_configure>:
{
6000a132:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct mcux_igpio_config *config = dev->config;
6000a134:	6843      	ldr	r3, [r0, #4]
{
6000a136:	4615      	mov	r5, r2
6000a138:	b087      	sub	sp, #28
6000a13a:	460e      	mov	r6, r1
	GPIO_Type *base = config->base;
6000a13c:	685f      	ldr	r7, [r3, #4]
	int cfg_idx = pin, i;
6000a13e:	4608      	mov	r0, r1
	for (i = 0; i < config->gap_count; i++) {
6000a140:	f893 c011 	ldrb.w	ip, [r3, #17]
6000a144:	2200      	movs	r2, #0
6000a146:	4594      	cmp	ip, r2
6000a148:	dc43      	bgt.n	6000a1d2 <mcux_igpio_configure+0xa0>
	if (cfg_idx >= config->mux_count) {
6000a14a:	7c1a      	ldrb	r2, [r3, #16]
6000a14c:	4282      	cmp	r2, r0
6000a14e:	dd4b      	ble.n	6000a1e8 <mcux_igpio_configure+0xb6>
		(volatile uint32_t *)config->pin_muxes[cfg_idx].config_register;
6000a150:	6899      	ldr	r1, [r3, #8]
6000a152:	2314      	movs	r3, #20
6000a154:	fb03 1100 	mla	r1, r3, r0, r1
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
6000a158:	07a8      	lsls	r0, r5, #30
	volatile uint32_t *gpio_cfg_reg =
6000a15a:	684b      	ldr	r3, [r1, #4]
	uint32_t reg = *gpio_cfg_reg;
6000a15c:	681b      	ldr	r3, [r3, #0]
		reg |= IOMUXC_SW_PAD_CTL_PAD_ODE_MASK;
6000a15e:	bf4c      	ite	mi
6000a160:	f443 6300 	orrmi.w	r3, r3, #2048	; 0x800
		reg &= ~IOMUXC_SW_PAD_CTL_PAD_ODE_MASK;
6000a164:	f423 6300 	bicpl.w	r3, r3, #2048	; 0x800
	if (((flags & GPIO_PULL_UP) != 0) || ((flags & GPIO_PULL_DOWN) != 0)) {
6000a168:	f015 0f30 	tst.w	r5, #48	; 0x30
6000a16c:	d043      	beq.n	6000a1f6 <mcux_igpio_configure+0xc4>
		if (((flags & GPIO_PULL_UP) != 0)) {
6000a16e:	06ea      	lsls	r2, r5, #27
			reg |= IOMUXC_SW_PAD_CTL_PAD_PUS(2);
6000a170:	bf56      	itet	pl
6000a172:	f423 4340 	bicpl.w	r3, r3, #49152	; 0xc000
6000a176:	f443 4420 	orrmi.w	r4, r3, #40960	; 0xa000
			reg &= ~IOMUXC_SW_PAD_CTL_PAD_PUS_MASK;
6000a17a:	f443 5400 	orrpl.w	r4, r3, #8192	; 0x2000
	memcpy(&pin_cfg.pinmux, &config->pin_muxes[cfg_idx], sizeof(pin_cfg));
6000a17e:	2218      	movs	r2, #24
6000a180:	4668      	mov	r0, sp
6000a182:	f7ff fdd2 	bl	60009d2a <memcpy>
	pinctrl_configure_pins(&pin_cfg, 1, PINCTRL_REG_NONE);
6000a186:	2200      	movs	r2, #0
6000a188:	2101      	movs	r1, #1
6000a18a:	4668      	mov	r0, sp
	pin_cfg.pin_ctrl_flags = reg;
6000a18c:	9405      	str	r4, [sp, #20]
	pinctrl_configure_pins(&pin_cfg, 1, PINCTRL_REG_NONE);
6000a18e:	f000 f8ad 	bl	6000a2ec <pinctrl_configure_pins>
	if (((flags & GPIO_INPUT) != 0) && ((flags & GPIO_OUTPUT) != 0)) {
6000a192:	f405 3340 	and.w	r3, r5, #196608	; 0x30000
6000a196:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
6000a19a:	d025      	beq.n	6000a1e8 <mcux_igpio_configure+0xb6>
	if (flags & GPIO_OUTPUT_INIT_HIGH) {
6000a19c:	032c      	lsls	r4, r5, #12
6000a19e:	d504      	bpl.n	6000a1aa <mcux_igpio_configure+0x78>
    GPIO_PinWrite(base, pin, output);
6000a1a0:	2201      	movs	r2, #1
6000a1a2:	4631      	mov	r1, r6
6000a1a4:	4638      	mov	r0, r7
6000a1a6:	f000 fee5 	bl	6000af74 <GPIO_PinWrite>
	if (flags & GPIO_OUTPUT_INIT_LOW) {
6000a1aa:	0368      	lsls	r0, r5, #13
6000a1ac:	d504      	bpl.n	6000a1b8 <mcux_igpio_configure+0x86>
6000a1ae:	2200      	movs	r2, #0
6000a1b0:	4631      	mov	r1, r6
6000a1b2:	4638      	mov	r0, r7
6000a1b4:	f000 fede 	bl	6000af74 <GPIO_PinWrite>
	WRITE_BIT(base->GDIR, pin, flags & GPIO_OUTPUT);
6000a1b8:	2301      	movs	r3, #1
6000a1ba:	687a      	ldr	r2, [r7, #4]
6000a1bc:	03a9      	lsls	r1, r5, #14
	return 0;
6000a1be:	f04f 0000 	mov.w	r0, #0
	WRITE_BIT(base->GDIR, pin, flags & GPIO_OUTPUT);
6000a1c2:	fa03 f306 	lsl.w	r3, r3, r6
6000a1c6:	bf4c      	ite	mi
6000a1c8:	4313      	orrmi	r3, r2
6000a1ca:	ea22 0303 	bicpl.w	r3, r2, r3
6000a1ce:	607b      	str	r3, [r7, #4]
	return 0;
6000a1d0:	e00c      	b.n	6000a1ec <mcux_igpio_configure+0xba>
		if (pin >= config->pin_gaps[i].start) {
6000a1d2:	68d9      	ldr	r1, [r3, #12]
6000a1d4:	eb01 0442 	add.w	r4, r1, r2, lsl #1
6000a1d8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
6000a1dc:	42b1      	cmp	r1, r6
6000a1de:	d808      	bhi.n	6000a1f2 <mcux_igpio_configure+0xc0>
				config->pin_gaps[i].len)) {
6000a1e0:	7864      	ldrb	r4, [r4, #1]
			if (pin < (config->pin_gaps[i].start +
6000a1e2:	4421      	add	r1, r4
6000a1e4:	42b1      	cmp	r1, r6
6000a1e6:	dd03      	ble.n	6000a1f0 <mcux_igpio_configure+0xbe>
				return -ENOTSUP;
6000a1e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
6000a1ec:	b007      	add	sp, #28
6000a1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cfg_idx -= config->pin_gaps[i].len;
6000a1f0:	1b00      	subs	r0, r0, r4
	for (i = 0; i < config->gap_count; i++) {
6000a1f2:	3201      	adds	r2, #1
6000a1f4:	e7a7      	b.n	6000a146 <mcux_igpio_configure+0x14>
		reg &= ~IOMUXC_SW_PAD_CTL_PAD_PUE_MASK;
6000a1f6:	f423 5400 	bic.w	r4, r3, #8192	; 0x2000
6000a1fa:	e7c0      	b.n	6000a17e <mcux_igpio_configure+0x4c>

6000a1fc <mcux_igpio_0_init>:
			   (MCUX_IGPIO_IRQ_INIT(n, 1);))		\
									\
		return 0;						\
	}

DT_INST_FOREACH_STATUS_OKAY(MCUX_IGPIO_INIT)
6000a1fc:	2200      	movs	r2, #0
6000a1fe:	2050      	movs	r0, #80	; 0x50
6000a200:	b508      	push	{r3, lr}
6000a202:	4611      	mov	r1, r2
6000a204:	f7fb fc84 	bl	60005b10 <z_arm_irq_priority_set>
6000a208:	2050      	movs	r0, #80	; 0x50
6000a20a:	f7fb fc73 	bl	60005af4 <arch_irq_enable>
6000a20e:	2200      	movs	r2, #0
6000a210:	2051      	movs	r0, #81	; 0x51
6000a212:	4611      	mov	r1, r2
6000a214:	f7fb fc7c 	bl	60005b10 <z_arm_irq_priority_set>
6000a218:	2051      	movs	r0, #81	; 0x51
6000a21a:	f7fb fc6b 	bl	60005af4 <arch_irq_enable>
6000a21e:	2000      	movs	r0, #0
6000a220:	bd08      	pop	{r3, pc}

6000a222 <mcux_igpio_1_init>:
6000a222:	2200      	movs	r2, #0
6000a224:	2052      	movs	r0, #82	; 0x52
6000a226:	b508      	push	{r3, lr}
6000a228:	4611      	mov	r1, r2
6000a22a:	f7fb fc71 	bl	60005b10 <z_arm_irq_priority_set>
6000a22e:	2052      	movs	r0, #82	; 0x52
6000a230:	f7fb fc60 	bl	60005af4 <arch_irq_enable>
6000a234:	2200      	movs	r2, #0
6000a236:	2053      	movs	r0, #83	; 0x53
6000a238:	4611      	mov	r1, r2
6000a23a:	f7fb fc69 	bl	60005b10 <z_arm_irq_priority_set>
6000a23e:	2053      	movs	r0, #83	; 0x53
6000a240:	f7fb fc58 	bl	60005af4 <arch_irq_enable>
6000a244:	2000      	movs	r0, #0
6000a246:	bd08      	pop	{r3, pc}

6000a248 <mcux_igpio_2_init>:
6000a248:	2200      	movs	r2, #0
6000a24a:	2054      	movs	r0, #84	; 0x54
6000a24c:	b508      	push	{r3, lr}
6000a24e:	4611      	mov	r1, r2
6000a250:	f7fb fc5e 	bl	60005b10 <z_arm_irq_priority_set>
6000a254:	2054      	movs	r0, #84	; 0x54
6000a256:	f7fb fc4d 	bl	60005af4 <arch_irq_enable>
6000a25a:	2200      	movs	r2, #0
6000a25c:	2055      	movs	r0, #85	; 0x55
6000a25e:	4611      	mov	r1, r2
6000a260:	f7fb fc56 	bl	60005b10 <z_arm_irq_priority_set>
6000a264:	2055      	movs	r0, #85	; 0x55
6000a266:	f7fb fc45 	bl	60005af4 <arch_irq_enable>
6000a26a:	2000      	movs	r0, #0
6000a26c:	bd08      	pop	{r3, pc}

6000a26e <mcux_igpio_3_init>:
6000a26e:	2200      	movs	r2, #0
6000a270:	2058      	movs	r0, #88	; 0x58
6000a272:	b508      	push	{r3, lr}
6000a274:	4611      	mov	r1, r2
6000a276:	f7fb fc4b 	bl	60005b10 <z_arm_irq_priority_set>
6000a27a:	2058      	movs	r0, #88	; 0x58
6000a27c:	f7fb fc3a 	bl	60005af4 <arch_irq_enable>
6000a280:	2200      	movs	r2, #0
6000a282:	2059      	movs	r0, #89	; 0x59
6000a284:	4611      	mov	r1, r2
6000a286:	f7fb fc43 	bl	60005b10 <z_arm_irq_priority_set>
6000a28a:	2059      	movs	r0, #89	; 0x59
6000a28c:	f7fb fc32 	bl	60005af4 <arch_irq_enable>
6000a290:	2000      	movs	r0, #0
6000a292:	bd08      	pop	{r3, pc}

6000a294 <mcux_igpio_port_isr>:
{
6000a294:	b570      	push	{r4, r5, r6, lr}
	GPIO_Type *base = config->base;
6000a296:	6843      	ldr	r3, [r0, #4]
{
6000a298:	4605      	mov	r5, r0
	struct mcux_igpio_data *data = dev->data;
6000a29a:	6902      	ldr	r2, [r0, #16]
	GPIO_Type *base = config->base;
6000a29c:	685b      	ldr	r3, [r3, #4]
	int_flags = base->ISR;
6000a29e:	699e      	ldr	r6, [r3, #24]
	base->ISR = int_flags;
6000a2a0:	619e      	str	r6, [r3, #24]
	gpio_fire_callbacks(&data->callbacks, dev, int_flags);
6000a2a2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
6000a2a4:	b109      	cbz	r1, 6000a2aa <mcux_igpio_port_isr+0x16>
	return node->next;
6000a2a6:	680c      	ldr	r4, [r1, #0]
6000a2a8:	b901      	cbnz	r1, 6000a2ac <mcux_igpio_port_isr+0x18>
}
6000a2aa:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
6000a2ac:	688a      	ldr	r2, [r1, #8]
6000a2ae:	4032      	ands	r2, r6
6000a2b0:	d002      	beq.n	6000a2b8 <mcux_igpio_port_isr+0x24>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
6000a2b2:	684b      	ldr	r3, [r1, #4]
6000a2b4:	4628      	mov	r0, r5
6000a2b6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
6000a2b8:	b11c      	cbz	r4, 6000a2c2 <mcux_igpio_port_isr+0x2e>
6000a2ba:	6823      	ldr	r3, [r4, #0]
6000a2bc:	4621      	mov	r1, r4
6000a2be:	461c      	mov	r4, r3
6000a2c0:	e7f2      	b.n	6000a2a8 <mcux_igpio_port_isr+0x14>
6000a2c2:	4623      	mov	r3, r4
6000a2c4:	e7fa      	b.n	6000a2bc <mcux_igpio_port_isr+0x28>

6000a2c6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
6000a2c6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
6000a2c8:	6803      	ldr	r3, [r0, #0]
6000a2ca:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
6000a2cc:	7905      	ldrb	r5, [r0, #4]
6000a2ce:	6804      	ldr	r4, [r0, #0]
6000a2d0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
6000a2d4:	42a3      	cmp	r3, r4
6000a2d6:	d302      	bcc.n	6000a2de <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
6000a2d8:	f06f 0001 	mvn.w	r0, #1
}
6000a2dc:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
6000a2de:	795c      	ldrb	r4, [r3, #5]
6000a2e0:	428c      	cmp	r4, r1
6000a2e2:	d001      	beq.n	6000a2e8 <pinctrl_lookup_state+0x22>
		(*state)++;
6000a2e4:	3308      	adds	r3, #8
6000a2e6:	e7f0      	b.n	6000a2ca <pinctrl_lookup_state+0x4>
			return 0;
6000a2e8:	2000      	movs	r0, #0
6000a2ea:	e7f7      	b.n	6000a2dc <pinctrl_lookup_state+0x16>

6000a2ec <pinctrl_configure_pins>:
{
6000a2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0U; i < pin_cnt; i++) {
6000a2f0:	2700      	movs	r7, #0
				*gpr_register &= ~(0x1 << pins[i].pinmux.gpr_shift);
6000a2f2:	f04f 0801 	mov.w	r8, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
6000a2f6:	b2fb      	uxtb	r3, r7
6000a2f8:	4299      	cmp	r1, r3
6000a2fa:	d802      	bhi.n	6000a302 <pinctrl_configure_pins+0x16>
}
6000a2fc:	2000      	movs	r0, #0
6000a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t mux_mode = pins[i].pinmux.mux_mode;
6000a302:	7c42      	ldrb	r2, [r0, #17]
			(volatile uint32_t *)((uintptr_t)pins[i].pinmux.gpr_register);
6000a304:	68c5      	ldr	r5, [r0, #12]
		uint32_t mux_mode = pins[i].pinmux.mux_mode;
6000a306:	f002 040f 	and.w	r4, r2, #15
		uint32_t mux_register = pins[i].pinmux.mux_register;
6000a30a:	f8d0 9000 	ldr.w	r9, [r0]
		uint32_t input_register = pins[i].pinmux.input_register;
6000a30e:	f8d0 e008 	ldr.w	lr, [r0, #8]
		uint32_t input_daisy = pins[i].pinmux.input_daisy;
6000a312:	0912      	lsrs	r2, r2, #4
		uint32_t config_register = pins[i].pinmux.config_register;
6000a314:	f8d0 c004 	ldr.w	ip, [r0, #4]
		uint32_t pin_ctrl_flags = pins[i].pin_ctrl_flags;
6000a318:	6946      	ldr	r6, [r0, #20]
		if (gpr_register) {
6000a31a:	b185      	cbz	r5, 6000a33e <pinctrl_configure_pins+0x52>
			if (pins[i].pinmux.gpr_val) {
6000a31c:	7c83      	ldrb	r3, [r0, #18]
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
6000a31e:	f890 b010 	ldrb.w	fp, [r0, #16]
			if (pins[i].pinmux.gpr_val) {
6000a322:	f013 0f01 	tst.w	r3, #1
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
6000a326:	f00b 0b1f 	and.w	fp, fp, #31
			if (pins[i].pinmux.gpr_val) {
6000a32a:	d020      	beq.n	6000a36e <pinctrl_configure_pins+0x82>
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
6000a32c:	f003 0301 	and.w	r3, r3, #1
				*gpr_register |=
6000a330:	f8d5 a000 	ldr.w	sl, [r5]
					(pins[i].pinmux.gpr_val << pins[i].pinmux.gpr_shift);
6000a334:	fa03 f30b 	lsl.w	r3, r3, fp
				*gpr_register |=
6000a338:	ea43 030a 	orr.w	r3, r3, sl
				*gpr_register &= ~(0x1 << pins[i].pinmux.gpr_shift);
6000a33c:	602b      	str	r3, [r5, #0]
			IOMUXC_SW_MUX_CTL_PAD_SION(MCUX_IMX_INPUT_ENABLE(pin_ctrl_flags));
6000a33e:	0ff3      	lsrs	r3, r6, #31
			IOMUXC_SW_MUX_CTL_PAD_MUX_MODE(mux_mode) |
6000a340:	f004 0407 	and.w	r4, r4, #7
6000a344:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
		*((volatile uint32_t *)((uintptr_t)mux_register)) =
6000a348:	f8c9 4000 	str.w	r4, [r9]
		if (input_register) {
6000a34c:	f1be 0f00 	cmp.w	lr, #0
6000a350:	d003      	beq.n	6000a35a <pinctrl_configure_pins+0x6e>
				IOMUXC_SELECT_INPUT_DAISY(input_daisy);
6000a352:	f002 0207 	and.w	r2, r2, #7
			*((volatile uint32_t *)((uintptr_t)input_register)) =
6000a356:	f8ce 2000 	str.w	r2, [lr]
		if (config_register) {
6000a35a:	f1bc 0f00 	cmp.w	ip, #0
6000a35e:	d003      	beq.n	6000a368 <pinctrl_configure_pins+0x7c>
				pin_ctrl_flags & (~(0x1 << MCUX_IMX_INPUT_ENABLE_SHIFT));
6000a360:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			*((volatile uint32_t *)((uintptr_t)config_register)) =
6000a364:	f8cc 6000 	str.w	r6, [ip]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
6000a368:	3701      	adds	r7, #1
6000a36a:	3018      	adds	r0, #24
6000a36c:	e7c3      	b.n	6000a2f6 <pinctrl_configure_pins+0xa>
				*gpr_register &= ~(0x1 << pins[i].pinmux.gpr_shift);
6000a36e:	682b      	ldr	r3, [r5, #0]
6000a370:	fa08 fb0b 	lsl.w	fp, r8, fp
6000a374:	ea23 030b 	bic.w	r3, r3, fp
6000a378:	e7e0      	b.n	6000a33c <pinctrl_configure_pins+0x50>

6000a37a <mcux_lpuart_config_get>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int mcux_lpuart_config_get(const struct device *dev, struct uart_config *cfg)
{
	struct mcux_lpuart_data *data = dev->data;
6000a37a:	6902      	ldr	r2, [r0, #16]
{
6000a37c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
6000a37e:	e892 0003 	ldmia.w	r2, {r0, r1}
6000a382:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
6000a386:	2000      	movs	r0, #0
6000a388:	4770      	bx	lr

6000a38a <mcux_lpuart_configure_init>:
{
6000a38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct mcux_lpuart_config *config = dev->config;
6000a38e:	6844      	ldr	r4, [r0, #4]
{
6000a390:	b086      	sub	sp, #24
	struct mcux_lpuart_data *data = dev->data;
6000a392:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
6000a396:	460d      	mov	r5, r1
	if (!device_is_ready(config->clock_dev)) {
6000a398:	6860      	ldr	r0, [r4, #4]
6000a39a:	f000 fdf6 	bl	6000af8a <z_device_is_ready>
6000a39e:	4607      	mov	r7, r0
6000a3a0:	2800      	cmp	r0, #0
6000a3a2:	d06e      	beq.n	6000a482 <mcux_lpuart_configure_init+0xf8>
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000a3a4:	6860      	ldr	r0, [r4, #4]
6000a3a6:	68e1      	ldr	r1, [r4, #12]
	if (api->get_rate == NULL) {
6000a3a8:	6883      	ldr	r3, [r0, #8]
6000a3aa:	68db      	ldr	r3, [r3, #12]
6000a3ac:	b92b      	cbnz	r3, 6000a3ba <mcux_lpuart_configure_init+0x30>
		return -EINVAL;
6000a3ae:	f06f 0615 	mvn.w	r6, #21
}
6000a3b2:	4630      	mov	r0, r6
6000a3b4:	b006      	add	sp, #24
6000a3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->get_rate(dev, sys, rate);
6000a3ba:	466a      	mov	r2, sp
6000a3bc:	4798      	blx	r3
	if (clock_control_get_rate(config->clock_dev, config->clock_subsys,
6000a3be:	4606      	mov	r6, r0
6000a3c0:	2800      	cmp	r0, #0
6000a3c2:	d1f4      	bne.n	6000a3ae <mcux_lpuart_configure_init+0x24>
	LPUART_GetDefaultConfig(&uart_config);
6000a3c4:	a801      	add	r0, sp, #4
6000a3c6:	f000 fdc6 	bl	6000af56 <LPUART_GetDefaultConfig>
	switch (cfg->parity) {
6000a3ca:	792b      	ldrb	r3, [r5, #4]
6000a3cc:	2b01      	cmp	r3, #1
6000a3ce:	d005      	beq.n	6000a3dc <mcux_lpuart_configure_init+0x52>
6000a3d0:	2b02      	cmp	r3, #2
6000a3d2:	d004      	beq.n	6000a3de <mcux_lpuart_configure_init+0x54>
6000a3d4:	b11b      	cbz	r3, 6000a3de <mcux_lpuart_configure_init+0x54>
		return -ENOTSUP;
6000a3d6:	f06f 0685 	mvn.w	r6, #133	; 0x85
6000a3da:	e7ea      	b.n	6000a3b2 <mcux_lpuart_configure_init+0x28>
	switch (cfg->parity) {
6000a3dc:	2303      	movs	r3, #3
		uart_config.parityMode = kLPUART_ParityDisabled;
6000a3de:	f88d 3008 	strb.w	r3, [sp, #8]
	switch (cfg->data_bits) {
6000a3e2:	79ab      	ldrb	r3, [r5, #6]
6000a3e4:	2b02      	cmp	r3, #2
6000a3e6:	d048      	beq.n	6000a47a <mcux_lpuart_configure_init+0xf0>
6000a3e8:	2b03      	cmp	r3, #3
6000a3ea:	d1f4      	bne.n	6000a3d6 <mcux_lpuart_configure_init+0x4c>
6000a3ec:	2300      	movs	r3, #0
		uart_config.dataBitsCount  = kLPUART_SevenDataBits;
6000a3ee:	f88d 3009 	strb.w	r3, [sp, #9]
	switch (cfg->stop_bits) {
6000a3f2:	796b      	ldrb	r3, [r5, #5]
6000a3f4:	2b01      	cmp	r3, #1
6000a3f6:	d042      	beq.n	6000a47e <mcux_lpuart_configure_init+0xf4>
6000a3f8:	2b03      	cmp	r3, #3
6000a3fa:	d1ec      	bne.n	6000a3d6 <mcux_lpuart_configure_init+0x4c>
6000a3fc:	2301      	movs	r3, #1
		uart_config.stopBitCount = kLPUART_OneStopBit;
6000a3fe:	f88d 300b 	strb.w	r3, [sp, #11]
	switch (cfg->flow_ctrl) {
6000a402:	79eb      	ldrb	r3, [r5, #7]
6000a404:	2b01      	cmp	r3, #1
6000a406:	d004      	beq.n	6000a412 <mcux_lpuart_configure_init+0x88>
6000a408:	2b03      	cmp	r3, #3
6000a40a:	d001      	beq.n	6000a410 <mcux_lpuart_configure_init+0x86>
6000a40c:	2b00      	cmp	r3, #0
6000a40e:	d1e2      	bne.n	6000a3d6 <mcux_lpuart_configure_init+0x4c>
6000a410:	2700      	movs	r7, #0
	uart_config.baudRate_Bps = cfg->baudrate;
6000a412:	682b      	ldr	r3, [r5, #0]
	LPUART_Init(config->base, &uart_config, clock_freq);
6000a414:	a901      	add	r1, sp, #4
		uart_config.enableTxCTS = false;
6000a416:	f88d 700f 	strb.w	r7, [sp, #15]
	uart_config.baudRate_Bps = cfg->baudrate;
6000a41a:	9301      	str	r3, [sp, #4]
	uart_config.enableTx = false;
6000a41c:	f44f 7380 	mov.w	r3, #256	; 0x100
		uart_config.enableRxRTS = false;
6000a420:	f88d 700e 	strb.w	r7, [sp, #14]
	uart_config.enableTx = false;
6000a424:	f8ad 3014 	strh.w	r3, [sp, #20]
	LPUART_Init(config->base, &uart_config, clock_freq);
6000a428:	9a00      	ldr	r2, [sp, #0]
6000a42a:	6820      	ldr	r0, [r4, #0]
6000a42c:	f7fd feb8 	bl	600081a0 <LPUART_Init>
	if (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485) {
6000a430:	79eb      	ldrb	r3, [r5, #7]
6000a432:	2b03      	cmp	r3, #3
6000a434:	d10b      	bne.n	6000a44e <mcux_lpuart_configure_init+0xc4>
		config->base->MODIR |= LPUART_MODIR_TXRTSE(true);
6000a436:	6822      	ldr	r2, [r4, #0]
6000a438:	6a53      	ldr	r3, [r2, #36]	; 0x24
6000a43a:	f043 0302 	orr.w	r3, r3, #2
6000a43e:	6253      	str	r3, [r2, #36]	; 0x24
		if (!config->rs485_de_active_low) {
6000a440:	7d63      	ldrb	r3, [r4, #21]
6000a442:	b923      	cbnz	r3, 6000a44e <mcux_lpuart_configure_init+0xc4>
			config->base->MODIR |= LPUART_MODIR_TXRTSPOL(1);
6000a444:	6822      	ldr	r2, [r4, #0]
6000a446:	6a53      	ldr	r3, [r2, #36]	; 0x24
6000a448:	f043 0304 	orr.w	r3, r3, #4
6000a44c:	6253      	str	r3, [r2, #36]	; 0x24
	config->base->CTRL |= LPUART_CTRL_TE(true);
6000a44e:	6822      	ldr	r2, [r4, #0]
6000a450:	6993      	ldr	r3, [r2, #24]
6000a452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
6000a456:	6193      	str	r3, [r2, #24]
	if (config->loopback_en) {
6000a458:	7da3      	ldrb	r3, [r4, #22]
6000a45a:	b14b      	cbz	r3, 6000a470 <mcux_lpuart_configure_init+0xe6>
		config->base->CTRL |= LPUART_CTRL_LOOPS_MASK;
6000a45c:	6822      	ldr	r2, [r4, #0]
6000a45e:	6993      	ldr	r3, [r2, #24]
6000a460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
6000a464:	6193      	str	r3, [r2, #24]
		config->base->CTRL &= ~LPUART_CTRL_RSRC_MASK;
6000a466:	6822      	ldr	r2, [r4, #0]
6000a468:	6993      	ldr	r3, [r2, #24]
6000a46a:	f023 0320 	bic.w	r3, r3, #32
6000a46e:	6193      	str	r3, [r2, #24]
	data->uart_config = *cfg;
6000a470:	e895 0003 	ldmia.w	r5, {r0, r1}
6000a474:	e888 0003 	stmia.w	r8, {r0, r1}
	return 0;
6000a478:	e79b      	b.n	6000a3b2 <mcux_lpuart_configure_init+0x28>
	switch (cfg->data_bits) {
6000a47a:	2301      	movs	r3, #1
6000a47c:	e7b7      	b.n	6000a3ee <mcux_lpuart_configure_init+0x64>
	switch (cfg->stop_bits) {
6000a47e:	2300      	movs	r3, #0
6000a480:	e7bd      	b.n	6000a3fe <mcux_lpuart_configure_init+0x74>
		return -ENODEV;
6000a482:	f06f 0612 	mvn.w	r6, #18
6000a486:	e794      	b.n	6000a3b2 <mcux_lpuart_configure_init+0x28>

6000a488 <mcux_lpuart_poll_out>:
{
6000a488:	b538      	push	{r3, r4, r5, lr}
6000a48a:	460c      	mov	r4, r1
	const struct mcux_lpuart_config *config = dev->config;
6000a48c:	6845      	ldr	r5, [r0, #4]
	while (!(LPUART_GetStatusFlags(config->base)
6000a48e:	6828      	ldr	r0, [r5, #0]
6000a490:	f7fd ff70 	bl	60008374 <LPUART_GetStatusFlags>
6000a494:	0203      	lsls	r3, r0, #8
6000a496:	d5fa      	bpl.n	6000a48e <mcux_lpuart_poll_out+0x6>
6000a498:	f04f 0210 	mov.w	r2, #16
6000a49c:	f3ef 8311 	mrs	r3, BASEPRI
6000a4a0:	f382 8812 	msr	BASEPRI_MAX, r2
6000a4a4:	f3bf 8f6f 	isb	sy
	LPUART_WriteByte(config->base, c);
6000a4a8:	682a      	ldr	r2, [r5, #0]
 * @param base LPUART peripheral base address.
 * @param data Data write to the TX register.
 */
static inline void LPUART_WriteByte(LPUART_Type *base, uint8_t data)
{
    base->DATA = data;
6000a4aa:	61d4      	str	r4, [r2, #28]
	__asm__ volatile(
6000a4ac:	f383 8811 	msr	BASEPRI, r3
6000a4b0:	f3bf 8f6f 	isb	sy
}
6000a4b4:	bd38      	pop	{r3, r4, r5, pc}

6000a4b6 <mcux_lpuart_poll_in>:
{
6000a4b6:	b538      	push	{r3, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
6000a4b8:	6845      	ldr	r5, [r0, #4]
{
6000a4ba:	460c      	mov	r4, r1
	uint32_t flags = LPUART_GetStatusFlags(config->base);
6000a4bc:	6828      	ldr	r0, [r5, #0]
6000a4be:	f7fd ff59 	bl	60008374 <LPUART_GetStatusFlags>
	if (flags & kLPUART_RxDataRegFullFlag) {
6000a4c2:	0280      	lsls	r0, r0, #10
6000a4c4:	d514      	bpl.n	6000a4f0 <mcux_lpuart_poll_in+0x3a>
		*c = LPUART_ReadByte(config->base);
6000a4c6:	682a      	ldr	r2, [r5, #0]
 * @return Data read from data register.
 */
static inline uint8_t LPUART_ReadByte(LPUART_Type *base)
{
#if defined(FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT) && FSL_FEATURE_LPUART_HAS_7BIT_DATA_SUPPORT
    uint32_t ctrl = base->CTRL;
6000a4c8:	6993      	ldr	r3, [r2, #24]
    uint8_t result;
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
6000a4ca:	0519      	lsls	r1, r3, #20
6000a4cc:	d40c      	bmi.n	6000a4e8 <mcux_lpuart_poll_in+0x32>
                            (((ctrl & LPUART_CTRL_M7_MASK) == 0U) && ((ctrl & LPUART_CTRL_M_MASK) == 0U) &&
6000a4ce:	f423 63fd 	bic.w	r3, r3, #2024	; 0x7e8
6000a4d2:	f023 0305 	bic.w	r3, r3, #5
6000a4d6:	051b      	lsls	r3, r3, #20
6000a4d8:	0d1b      	lsrs	r3, r3, #20
    bool isSevenDataBits = (((ctrl & LPUART_CTRL_M7_MASK) != 0U) ||
6000a4da:	2b02      	cmp	r3, #2
6000a4dc:	d004      	beq.n	6000a4e8 <mcux_lpuart_poll_in+0x32>
    {
        result = (uint8_t)(base->DATA & 0x7FU);
    }
    else
    {
        result = (uint8_t)base->DATA;
6000a4de:	69d3      	ldr	r3, [r2, #28]
6000a4e0:	b2db      	uxtb	r3, r3
		ret = 0;
6000a4e2:	2000      	movs	r0, #0
		*c = LPUART_ReadByte(config->base);
6000a4e4:	7023      	strb	r3, [r4, #0]
}
6000a4e6:	bd38      	pop	{r3, r4, r5, pc}
        result = (uint8_t)(base->DATA & 0x7FU);
6000a4e8:	69d3      	ldr	r3, [r2, #28]
6000a4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
6000a4ee:	e7f8      	b.n	6000a4e2 <mcux_lpuart_poll_in+0x2c>
	int ret = -1;
6000a4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return ret;
6000a4f4:	e7f7      	b.n	6000a4e6 <mcux_lpuart_poll_in+0x30>

6000a4f6 <mcux_lpuart_err_check>:
{
6000a4f6:	b538      	push	{r3, r4, r5, lr}
	const struct mcux_lpuart_config *config = dev->config;
6000a4f8:	6845      	ldr	r5, [r0, #4]
	uint32_t flags = LPUART_GetStatusFlags(config->base);
6000a4fa:	6828      	ldr	r0, [r5, #0]
6000a4fc:	f7fd ff3a 	bl	60008374 <LPUART_GetStatusFlags>
	if (flags & kLPUART_RxOverrunFlag) {
6000a500:	f3c0 44c0 	ubfx	r4, r0, #19, #1
	if (flags & kLPUART_ParityErrorFlag) {
6000a504:	03c1      	lsls	r1, r0, #15
	LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag |
6000a506:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
		err |= UART_ERROR_PARITY;
6000a50a:	bf48      	it	mi
6000a50c:	f044 0402 	orrmi.w	r4, r4, #2
	if (flags & kLPUART_FramingErrorFlag) {
6000a510:	0382      	lsls	r2, r0, #14
		err |= UART_ERROR_FRAMING;
6000a512:	bf48      	it	mi
6000a514:	f044 0404 	orrmi.w	r4, r4, #4
	if (flags & kLPUART_NoiseErrorFlag) {
6000a518:	0343      	lsls	r3, r0, #13
	LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag |
6000a51a:	6828      	ldr	r0, [r5, #0]
		err |= UART_ERROR_PARITY;
6000a51c:	bf48      	it	mi
6000a51e:	f044 0402 	orrmi.w	r4, r4, #2
	LPUART_ClearStatusFlags(config->base, kLPUART_RxOverrunFlag |
6000a522:	f7fd ff33 	bl	6000838c <LPUART_ClearStatusFlags>
}
6000a526:	4620      	mov	r0, r4
6000a528:	bd38      	pop	{r3, r4, r5, pc}

6000a52a <mcux_lpuart_init>:
	return 0;
}
#endif /* CONFIG_UART_USE_RUNTIME_CONFIGURE */

static int mcux_lpuart_init(const struct device *dev)
{
6000a52a:	b513      	push	{r0, r1, r4, lr}
	const struct mcux_lpuart_config *config = dev->config;
6000a52c:	6844      	ldr	r4, [r0, #4]
	struct mcux_lpuart_data *data = dev->data;
6000a52e:	6901      	ldr	r1, [r0, #16]
	struct uart_config *uart_api_config = &data->uart_config;
#ifdef CONFIG_PINCTRL
	int err;
#endif

	uart_api_config->baudrate = config->baud_rate;
6000a530:	6923      	ldr	r3, [r4, #16]
6000a532:	600b      	str	r3, [r1, #0]
	uart_api_config->parity = UART_CFG_PARITY_NONE;
6000a534:	f44f 7380 	mov.w	r3, #256	; 0x100
6000a538:	808b      	strh	r3, [r1, #4]
	uart_api_config->stop_bits = UART_CFG_STOP_BITS_1;
	uart_api_config->data_bits = UART_CFG_DATA_BITS_8;
6000a53a:	2303      	movs	r3, #3
6000a53c:	718b      	strb	r3, [r1, #6]
	uart_api_config->flow_ctrl = config->flow_ctrl;
6000a53e:	7d23      	ldrb	r3, [r4, #20]
6000a540:	71cb      	strb	r3, [r1, #7]

	/* set initial configuration */
	mcux_lpuart_configure_init(dev, uart_api_config);
6000a542:	f7ff ff22 	bl	6000a38a <mcux_lpuart_configure_init>
	ret = pinctrl_lookup_state(config, id, &state);
6000a546:	aa01      	add	r2, sp, #4
6000a548:	2100      	movs	r1, #0
6000a54a:	68a0      	ldr	r0, [r4, #8]
6000a54c:	f7ff febb 	bl	6000a2c6 <pinctrl_lookup_state>
	if (ret < 0) {
6000a550:	2800      	cmp	r0, #0
6000a552:	db05      	blt.n	6000a560 <mcux_lpuart_init+0x36>
	return pinctrl_apply_state_direct(config, state);
6000a554:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
6000a556:	2200      	movs	r2, #0
6000a558:	7919      	ldrb	r1, [r3, #4]
6000a55a:	6818      	ldr	r0, [r3, #0]
6000a55c:	f7ff fec6 	bl	6000a2ec <pinctrl_configure_pins>
	data->tx_poll_stream_on = false;
	data->tx_int_stream_on = false;
#endif

	return 0;
}
6000a560:	ea00 70e0 	and.w	r0, r0, r0, asr #31
6000a564:	b002      	add	sp, #8
6000a566:	bd10      	pop	{r4, pc}

6000a568 <mcux_lpuart_configure>:
{
6000a568:	b538      	push	{r3, r4, r5, lr}
	LPUART_Deinit(config->base);
6000a56a:	6843      	ldr	r3, [r0, #4]
{
6000a56c:	4604      	mov	r4, r0
6000a56e:	460d      	mov	r5, r1
	LPUART_Deinit(config->base);
6000a570:	6818      	ldr	r0, [r3, #0]
6000a572:	f7fd fee3 	bl	6000833c <LPUART_Deinit>
	int ret = mcux_lpuart_configure_init(dev, cfg);
6000a576:	4620      	mov	r0, r4
6000a578:	4629      	mov	r1, r5
6000a57a:	f7ff ff06 	bl	6000a38a <mcux_lpuart_configure_init>
	if (ret) {
6000a57e:	4604      	mov	r4, r0
6000a580:	b918      	cbnz	r0, 6000a58a <mcux_lpuart_configure+0x22>
	return z_impl_k_sleep(timeout);
6000a582:	200a      	movs	r0, #10
6000a584:	2100      	movs	r1, #0
6000a586:	f7fe fca3 	bl	60008ed0 <z_impl_k_sleep>
}
6000a58a:	4620      	mov	r0, r4
6000a58c:	bd38      	pop	{r3, r4, r5, pc}

6000a58e <spi_mcux_config_func_0>:
			    spi_mcux_isr, DEVICE_DT_INST_GET(n), 0);	\
									\
		irq_enable(DT_INST_IRQN(n));				\
	}

DT_INST_FOREACH_STATUS_OKAY(SPI_MCUX_LPSPI_INIT)
6000a58e:	2020      	movs	r0, #32
6000a590:	2200      	movs	r2, #0
6000a592:	2103      	movs	r1, #3
6000a594:	b508      	push	{r3, lr}
6000a596:	f7fb fabb 	bl	60005b10 <z_arm_irq_priority_set>
6000a59a:	2020      	movs	r0, #32
6000a59c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
6000a5a0:	f7fb baa8 	b.w	60005af4 <arch_irq_enable>

6000a5a4 <spi_mcux_isr>:
	LPSPI_MasterTransferHandleIRQ(base, &data->handle);
6000a5a4:	6901      	ldr	r1, [r0, #16]
	LPSPI_Type *base = config->base;
6000a5a6:	6843      	ldr	r3, [r0, #4]
	LPSPI_MasterTransferHandleIRQ(base, &data->handle);
6000a5a8:	3104      	adds	r1, #4
6000a5aa:	6818      	ldr	r0, [r3, #0]
6000a5ac:	f000 bbd8 	b.w	6000ad60 <LPSPI_MasterTransferHandleIRQ>

6000a5b0 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
6000a5b0:	b510      	push	{r4, lr}
	while (*count) {
6000a5b2:	680b      	ldr	r3, [r1, #0]
6000a5b4:	b913      	cbnz	r3, 6000a5bc <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
6000a5b6:	4618      	mov	r0, r3
	*buf_len = 0;
6000a5b8:	6013      	str	r3, [r2, #0]
	return NULL;
6000a5ba:	e005      	b.n	6000a5c8 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
6000a5bc:	6803      	ldr	r3, [r0, #0]
6000a5be:	685c      	ldr	r4, [r3, #4]
6000a5c0:	b11c      	cbz	r4, 6000a5ca <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
6000a5c2:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
6000a5c4:	6803      	ldr	r3, [r0, #0]
6000a5c6:	6818      	ldr	r0, [r3, #0]
}
6000a5c8:	bd10      	pop	{r4, pc}
		++(*current);
6000a5ca:	3308      	adds	r3, #8
6000a5cc:	6003      	str	r3, [r0, #0]
		--(*count);
6000a5ce:	680b      	ldr	r3, [r1, #0]
6000a5d0:	3b01      	subs	r3, #1
6000a5d2:	600b      	str	r3, [r1, #0]
6000a5d4:	e7ed      	b.n	6000a5b2 <spi_context_get_next_buf.constprop.0+0x2>

6000a5d6 <z_log_msg_static_create.constprop.0>:
6000a5d6:	2300      	movs	r3, #0
6000a5d8:	f7fa bf4e 	b.w	60005478 <z_impl_z_log_msg_static_create>

6000a5dc <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
6000a5dc:	4603      	mov	r3, r0
6000a5de:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
6000a5e0:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
6000a5e2:	7919      	ldrb	r1, [r3, #4]
6000a5e4:	2301      	movs	r3, #1
6000a5e6:	fa03 f101 	lsl.w	r1, r3, r1
6000a5ea:	6903      	ldr	r3, [r0, #16]
6000a5ec:	681b      	ldr	r3, [r3, #0]
6000a5ee:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
6000a5f0:	bf18      	it	ne
6000a5f2:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
6000a5f6:	b112      	cbz	r2, 6000a5fe <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
6000a5f8:	6883      	ldr	r3, [r0, #8]
6000a5fa:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
6000a5fc:	4718      	bx	r3
6000a5fe:	6883      	ldr	r3, [r0, #8]
6000a600:	691b      	ldr	r3, [r3, #16]
6000a602:	e7fb      	b.n	6000a5fc <gpio_pin_set_dt.isra.0+0x20>

6000a604 <_spi_context_cs_control>:
{
6000a604:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
6000a606:	6803      	ldr	r3, [r0, #0]
{
6000a608:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
6000a60a:	b1e3      	cbz	r3, 6000a646 <_spi_context_cs_control+0x42>
6000a60c:	6898      	ldr	r0, [r3, #8]
6000a60e:	b1d0      	cbz	r0, 6000a646 <_spi_context_cs_control+0x42>
6000a610:	6805      	ldr	r5, [r0, #0]
6000a612:	b1c5      	cbz	r5, 6000a646 <_spi_context_cs_control+0x42>
		if (on) {
6000a614:	b149      	cbz	r1, 6000a62a <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
6000a616:	2101      	movs	r1, #1
6000a618:	f7ff ffe0 	bl	6000a5dc <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
6000a61c:	6823      	ldr	r3, [r4, #0]
6000a61e:	689b      	ldr	r3, [r3, #8]
6000a620:	6898      	ldr	r0, [r3, #8]
}
6000a622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
6000a626:	f7fe be59 	b.w	600092dc <z_impl_k_busy_wait>
			if (!force_off &&
6000a62a:	b912      	cbnz	r2, 6000a632 <_spi_context_cs_control+0x2e>
6000a62c:	889b      	ldrh	r3, [r3, #4]
6000a62e:	04db      	lsls	r3, r3, #19
6000a630:	d409      	bmi.n	6000a646 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
6000a632:	6880      	ldr	r0, [r0, #8]
6000a634:	f7fe fe52 	bl	600092dc <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
6000a638:	6823      	ldr	r3, [r4, #0]
6000a63a:	2100      	movs	r1, #0
6000a63c:	6898      	ldr	r0, [r3, #8]
}
6000a63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
6000a642:	f7ff bfcb 	b.w	6000a5dc <gpio_pin_set_dt.isra.0>
}
6000a646:	bd38      	pop	{r3, r4, r5, pc}

6000a648 <spi_context_unlock_unconditionally>:
{
6000a648:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
6000a64a:	2201      	movs	r2, #1
6000a64c:	2100      	movs	r1, #0
{
6000a64e:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
6000a650:	f7ff ffd8 	bl	6000a604 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
6000a654:	69a3      	ldr	r3, [r4, #24]
6000a656:	b933      	cbnz	r3, 6000a666 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
6000a658:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
6000a65a:	f104 0010 	add.w	r0, r4, #16
}
6000a65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6000a662:	f7fe b96b 	b.w	6000893c <z_impl_k_sem_give>
6000a666:	bd10      	pop	{r4, pc}

6000a668 <spi_mcux_release>:
{
6000a668:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
6000a66a:	6900      	ldr	r0, [r0, #16]
6000a66c:	303c      	adds	r0, #60	; 0x3c
6000a66e:	f7ff ffeb 	bl	6000a648 <spi_context_unlock_unconditionally>
}
6000a672:	2000      	movs	r0, #0
6000a674:	bd08      	pop	{r3, pc}

6000a676 <SystemInitHook>:
   -- SystemInitHook()
   ---------------------------------------------------------------------------- */

__attribute__ ((weak)) void SystemInitHook (void) {
  /* Void implementation of the weak function. */
}
6000a676:	4770      	bx	lr

6000a678 <EDMA_InstallTCD>:
    base->TCD[channel].SADDR         = tcd->SADDR;
6000a678:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
6000a67c:	b510      	push	{r4, lr}
    base->TCD[channel].SADDR         = tcd->SADDR;
6000a67e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
6000a682:	6814      	ldr	r4, [r2, #0]
6000a684:	601c      	str	r4, [r3, #0]
    base->TCD[channel].SOFF          = tcd->SOFF;
6000a686:	8890      	ldrh	r0, [r2, #4]
6000a688:	b280      	uxth	r0, r0
6000a68a:	8098      	strh	r0, [r3, #4]
    base->TCD[channel].ATTR          = tcd->ATTR;
6000a68c:	88d0      	ldrh	r0, [r2, #6]
6000a68e:	b280      	uxth	r0, r0
6000a690:	80d8      	strh	r0, [r3, #6]
    base->TCD[channel].NBYTES_MLNO   = tcd->NBYTES;
6000a692:	f241 0308 	movw	r3, #4104	; 0x1008
6000a696:	6890      	ldr	r0, [r2, #8]
6000a698:	50c8      	str	r0, [r1, r3]
    base->TCD[channel].SLAST         = (int32_t)tcd->SLAST;
6000a69a:	f241 030c 	movw	r3, #4108	; 0x100c
6000a69e:	68d0      	ldr	r0, [r2, #12]
6000a6a0:	50c8      	str	r0, [r1, r3]
    base->TCD[channel].DADDR         = tcd->DADDR;
6000a6a2:	f241 0310 	movw	r3, #4112	; 0x1010
6000a6a6:	6910      	ldr	r0, [r2, #16]
6000a6a8:	50c8      	str	r0, [r1, r3]
    base->TCD[channel].DOFF          = tcd->DOFF;
6000a6aa:	f241 0014 	movw	r0, #4116	; 0x1014
6000a6ae:	8a93      	ldrh	r3, [r2, #20]
6000a6b0:	b29b      	uxth	r3, r3
6000a6b2:	520b      	strh	r3, [r1, r0]
    base->TCD[channel].CITER_ELINKNO = tcd->CITER;
6000a6b4:	f241 0016 	movw	r0, #4118	; 0x1016
6000a6b8:	8ad3      	ldrh	r3, [r2, #22]
6000a6ba:	b29b      	uxth	r3, r3
6000a6bc:	520b      	strh	r3, [r1, r0]
    base->TCD[channel].DLAST_SGA     = (int32_t)tcd->DLAST_SGA;
6000a6be:	f241 0318 	movw	r3, #4120	; 0x1018
6000a6c2:	6990      	ldr	r0, [r2, #24]
6000a6c4:	50c8      	str	r0, [r1, r3]
    base->TCD[channel].CSR           = 0;
6000a6c6:	f241 001c 	movw	r0, #4124	; 0x101c
6000a6ca:	2300      	movs	r3, #0
6000a6cc:	520b      	strh	r3, [r1, r0]
    base->TCD[channel].CSR           = tcd->CSR;
6000a6ce:	8b93      	ldrh	r3, [r2, #28]
6000a6d0:	b29b      	uxth	r3, r3
6000a6d2:	520b      	strh	r3, [r1, r0]
    base->TCD[channel].BITER_ELINKNO = tcd->BITER;
6000a6d4:	8bd3      	ldrh	r3, [r2, #30]
6000a6d6:	f241 021e 	movw	r2, #4126	; 0x101e
6000a6da:	b29b      	uxth	r3, r3
6000a6dc:	528b      	strh	r3, [r1, r2]
}
6000a6de:	bd10      	pop	{r4, pc}

6000a6e0 <EDMA_GetDefaultConfig>:
    (void)memset(config, 0, sizeof(*config));
6000a6e0:	2204      	movs	r2, #4
6000a6e2:	2100      	movs	r1, #0
{
6000a6e4:	b510      	push	{r4, lr}
6000a6e6:	4604      	mov	r4, r0
    (void)memset(config, 0, sizeof(*config));
6000a6e8:	f7ff fb2a 	bl	60009d40 <memset>
    config->enableRoundRobinArbitration = false;
6000a6ec:	2300      	movs	r3, #0
    config->enableHaltOnError           = true;
6000a6ee:	2201      	movs	r2, #1
    config->enableRoundRobinArbitration = false;
6000a6f0:	70a3      	strb	r3, [r4, #2]
    config->enableHaltOnError           = true;
6000a6f2:	7062      	strb	r2, [r4, #1]
    config->enableContinuousLinkMode    = false;
6000a6f4:	7023      	strb	r3, [r4, #0]
    config->enableDebugMode             = false;
6000a6f6:	70e3      	strb	r3, [r4, #3]
}
6000a6f8:	bd10      	pop	{r4, pc}

6000a6fa <EDMA_EnableChannelInterrupts>:
{
6000a6fa:	b530      	push	{r4, r5, lr}
    if (0U != (mask & (uint32_t)kEDMA_ErrorInterruptEnable))
6000a6fc:	07d5      	lsls	r5, r2, #31
6000a6fe:	d504      	bpl.n	6000a70a <EDMA_EnableChannelInterrupts+0x10>
        base->EEI |= ((uint32_t)0x1U << channel);
6000a700:	2301      	movs	r3, #1
6000a702:	6944      	ldr	r4, [r0, #20]
6000a704:	408b      	lsls	r3, r1
6000a706:	4323      	orrs	r3, r4
6000a708:	6143      	str	r3, [r0, #20]
    if (0U != (mask & (uint32_t)kEDMA_MajorInterruptEnable))
6000a70a:	0794      	lsls	r4, r2, #30
6000a70c:	d508      	bpl.n	6000a720 <EDMA_EnableChannelInterrupts+0x26>
        base->TCD[channel].CSR |= DMA_CSR_INTMAJOR_MASK;
6000a70e:	eb00 1441 	add.w	r4, r0, r1, lsl #5
6000a712:	f241 051c 	movw	r5, #4124	; 0x101c
6000a716:	5b63      	ldrh	r3, [r4, r5]
6000a718:	b29b      	uxth	r3, r3
6000a71a:	f043 0302 	orr.w	r3, r3, #2
6000a71e:	5363      	strh	r3, [r4, r5]
    if (0U != (mask & (uint32_t)kEDMA_HalfInterruptEnable))
6000a720:	0753      	lsls	r3, r2, #29
6000a722:	d508      	bpl.n	6000a736 <EDMA_EnableChannelInterrupts+0x3c>
        base->TCD[channel].CSR |= DMA_CSR_INTHALF_MASK;
6000a724:	eb00 1041 	add.w	r0, r0, r1, lsl #5
6000a728:	f241 021c 	movw	r2, #4124	; 0x101c
6000a72c:	5a83      	ldrh	r3, [r0, r2]
6000a72e:	b29b      	uxth	r3, r3
6000a730:	f043 0304 	orr.w	r3, r3, #4
6000a734:	5283      	strh	r3, [r0, r2]
}
6000a736:	bd30      	pop	{r4, r5, pc}

6000a738 <EDMA_TcdReset>:
    tcd->SADDR     = 0U;
6000a738:	2300      	movs	r3, #0
    tcd->CSR   = DMA_CSR_DREQ(1U);
6000a73a:	2208      	movs	r2, #8
    tcd->SADDR     = 0U;
6000a73c:	6003      	str	r3, [r0, #0]
    tcd->SOFF      = 0U;
6000a73e:	8083      	strh	r3, [r0, #4]
    tcd->ATTR      = 0U;
6000a740:	80c3      	strh	r3, [r0, #6]
    tcd->NBYTES    = 0U;
6000a742:	6083      	str	r3, [r0, #8]
    tcd->SLAST     = 0U;
6000a744:	60c3      	str	r3, [r0, #12]
    tcd->DADDR     = 0U;
6000a746:	6103      	str	r3, [r0, #16]
    tcd->DOFF      = 0U;
6000a748:	8283      	strh	r3, [r0, #20]
    tcd->CITER     = 0U;
6000a74a:	82c3      	strh	r3, [r0, #22]
    tcd->DLAST_SGA = 0U;
6000a74c:	6183      	str	r3, [r0, #24]
    tcd->CSR   = DMA_CSR_DREQ(1U);
6000a74e:	8382      	strh	r2, [r0, #28]
    tcd->BITER = 0U;
6000a750:	83c3      	strh	r3, [r0, #30]
}
6000a752:	4770      	bx	lr

6000a754 <EDMA_ResetChannel>:
    EDMA_TcdReset((edma_tcd_t *)(uint32_t)&base->TCD[channel]);
6000a754:	3180      	adds	r1, #128	; 0x80
6000a756:	eb00 1041 	add.w	r0, r0, r1, lsl #5
6000a75a:	f7ff bfed 	b.w	6000a738 <EDMA_TcdReset>

6000a75e <EDMA_TcdSetTransferConfig>:
    tcd->SADDR = config->srcAddr;
6000a75e:	680b      	ldr	r3, [r1, #0]
6000a760:	6003      	str	r3, [r0, #0]
    tcd->DADDR = config->destAddr;
6000a762:	684b      	ldr	r3, [r1, #4]
{
6000a764:	b510      	push	{r4, lr}
    tcd->DADDR = config->destAddr;
6000a766:	6103      	str	r3, [r0, #16]
    tcd->ATTR = DMA_ATTR_SSIZE(config->srcTransferSize) | DMA_ATTR_DSIZE(config->destTransferSize);
6000a768:	7a0c      	ldrb	r4, [r1, #8]
6000a76a:	7a4b      	ldrb	r3, [r1, #9]
6000a76c:	0224      	lsls	r4, r4, #8
6000a76e:	f003 0307 	and.w	r3, r3, #7
6000a772:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
6000a776:	4323      	orrs	r3, r4
6000a778:	80c3      	strh	r3, [r0, #6]
    tcd->SOFF = (uint16_t)config->srcOffset;
6000a77a:	894b      	ldrh	r3, [r1, #10]
6000a77c:	8083      	strh	r3, [r0, #4]
    tcd->DOFF = (uint16_t)config->destOffset;
6000a77e:	898b      	ldrh	r3, [r1, #12]
6000a780:	8283      	strh	r3, [r0, #20]
    tcd->NBYTES = config->minorLoopBytes;
6000a782:	690b      	ldr	r3, [r1, #16]
6000a784:	6083      	str	r3, [r0, #8]
    tcd->CITER = (uint16_t)config->majorLoopCounts;
6000a786:	8a8b      	ldrh	r3, [r1, #20]
6000a788:	82c3      	strh	r3, [r0, #22]
    tcd->BITER = (uint16_t)config->majorLoopCounts;
6000a78a:	8a8b      	ldrh	r3, [r1, #20]
6000a78c:	83c3      	strh	r3, [r0, #30]
    if (nextTcd != NULL)
6000a78e:	b13a      	cbz	r2, 6000a7a0 <EDMA_TcdSetTransferConfig+0x42>
        tcd->DLAST_SGA = (uint32_t)nextTcd;
6000a790:	6182      	str	r2, [r0, #24]
        tcd->CSR = (tcd->CSR | (uint16_t)DMA_CSR_ESG_MASK) & ~(uint16_t)DMA_CSR_DREQ_MASK;
6000a792:	8b83      	ldrh	r3, [r0, #28]
6000a794:	b29b      	uxth	r3, r3
6000a796:	f023 0308 	bic.w	r3, r3, #8
6000a79a:	f043 0310 	orr.w	r3, r3, #16
6000a79e:	8383      	strh	r3, [r0, #28]
}
6000a7a0:	bd10      	pop	{r4, pc}

6000a7a2 <EDMA_TcdSetChannelLink>:
    if (linkType == kEDMA_MinorLink) /* Minor link config */
6000a7a2:	2901      	cmp	r1, #1
6000a7a4:	d11f      	bne.n	6000a7e6 <EDMA_TcdSetChannelLink+0x44>
        tcd->CITER |= DMA_CITER_ELINKYES_ELINK_MASK;
6000a7a6:	8ac3      	ldrh	r3, [r0, #22]
        tmpreg |= DMA_CITER_ELINKYES_LINKCH(linkedChannel);
6000a7a8:	0252      	lsls	r2, r2, #9
        tcd->CITER |= DMA_CITER_ELINKYES_ELINK_MASK;
6000a7aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
        tmpreg |= DMA_CITER_ELINKYES_LINKCH(linkedChannel);
6000a7ae:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
        tcd->CITER |= DMA_CITER_ELINKYES_ELINK_MASK;
6000a7b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
6000a7b6:	b29b      	uxth	r3, r3
6000a7b8:	82c3      	strh	r3, [r0, #22]
        tcd->BITER |= DMA_BITER_ELINKYES_ELINK_MASK;
6000a7ba:	8bc3      	ldrh	r3, [r0, #30]
6000a7bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
6000a7c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
6000a7c4:	b29b      	uxth	r3, r3
6000a7c6:	83c3      	strh	r3, [r0, #30]
        tmpreg = tcd->CITER & (~(uint16_t)DMA_CITER_ELINKYES_LINKCH_MASK);
6000a7c8:	8ac3      	ldrh	r3, [r0, #22]
6000a7ca:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000a7ce:	041b      	lsls	r3, r3, #16
6000a7d0:	0c1b      	lsrs	r3, r3, #16
        tmpreg |= DMA_CITER_ELINKYES_LINKCH(linkedChannel);
6000a7d2:	4313      	orrs	r3, r2
        tcd->CITER = tmpreg;
6000a7d4:	82c3      	strh	r3, [r0, #22]
        tmpreg     = tcd->BITER & (~(uint16_t)DMA_BITER_ELINKYES_LINKCH_MASK);
6000a7d6:	8bc3      	ldrh	r3, [r0, #30]
6000a7d8:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
6000a7dc:	041b      	lsls	r3, r3, #16
6000a7de:	0c1b      	lsrs	r3, r3, #16
        tmpreg |= DMA_BITER_ELINKYES_LINKCH(linkedChannel);
6000a7e0:	431a      	orrs	r2, r3
        tcd->BITER = tmpreg;
6000a7e2:	83c2      	strh	r2, [r0, #30]
6000a7e4:	4770      	bx	lr
    else if (linkType == kEDMA_MajorLink) /* Major link config */
6000a7e6:	2902      	cmp	r1, #2
6000a7e8:	d10e      	bne.n	6000a808 <EDMA_TcdSetChannelLink+0x66>
        tcd->CSR |= DMA_CSR_MAJORELINK_MASK;
6000a7ea:	8b83      	ldrh	r3, [r0, #28]
        tcd->CSR = tmpreg | DMA_CSR_MAJORLINKCH(linkedChannel);
6000a7ec:	0212      	lsls	r2, r2, #8
        tcd->CSR |= DMA_CSR_MAJORELINK_MASK;
6000a7ee:	b29b      	uxth	r3, r3
        tcd->CSR = tmpreg | DMA_CSR_MAJORLINKCH(linkedChannel);
6000a7f0:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
        tcd->CSR |= DMA_CSR_MAJORELINK_MASK;
6000a7f4:	f043 0320 	orr.w	r3, r3, #32
6000a7f8:	8383      	strh	r3, [r0, #28]
        tmpreg   = tcd->CSR & (~(uint16_t)DMA_CSR_MAJORLINKCH_MASK);
6000a7fa:	8b83      	ldrh	r3, [r0, #28]
6000a7fc:	b29b      	uxth	r3, r3
6000a7fe:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
        tcd->CSR = tmpreg | DMA_CSR_MAJORLINKCH(linkedChannel);
6000a802:	431a      	orrs	r2, r3
6000a804:	8382      	strh	r2, [r0, #28]
6000a806:	4770      	bx	lr
        tcd->CITER &= ~(uint16_t)DMA_CITER_ELINKYES_ELINK_MASK;
6000a808:	8ac3      	ldrh	r3, [r0, #22]
6000a80a:	f3c3 030e 	ubfx	r3, r3, #0, #15
6000a80e:	82c3      	strh	r3, [r0, #22]
        tcd->BITER &= ~(uint16_t)DMA_BITER_ELINKYES_ELINK_MASK;
6000a810:	8bc3      	ldrh	r3, [r0, #30]
6000a812:	f3c3 030e 	ubfx	r3, r3, #0, #15
6000a816:	83c3      	strh	r3, [r0, #30]
        tcd->CSR &= ~(uint16_t)DMA_CSR_MAJORELINK_MASK;
6000a818:	8b83      	ldrh	r3, [r0, #28]
6000a81a:	f023 0320 	bic.w	r3, r3, #32
6000a81e:	041b      	lsls	r3, r3, #16
6000a820:	0c1b      	lsrs	r3, r3, #16
6000a822:	8383      	strh	r3, [r0, #28]
}
6000a824:	4770      	bx	lr

6000a826 <EDMA_SetChannelLink>:
{
6000a826:	b410      	push	{r4}
6000a828:	460c      	mov	r4, r1
6000a82a:	4611      	mov	r1, r2
    EDMA_TcdSetChannelLink((edma_tcd_t *)(uint32_t)&base->TCD[channel], linkType, linkedChannel);
6000a82c:	461a      	mov	r2, r3
6000a82e:	3480      	adds	r4, #128	; 0x80
6000a830:	eb00 1044 	add.w	r0, r0, r4, lsl #5
}
6000a834:	bc10      	pop	{r4}
    EDMA_TcdSetChannelLink((edma_tcd_t *)(uint32_t)&base->TCD[channel], linkType, linkedChannel);
6000a836:	f7ff bfb4 	b.w	6000a7a2 <EDMA_TcdSetChannelLink>

6000a83a <EDMA_GetRemainingMajorLoopCount>:
    if (0U != (DMA_CSR_DONE_MASK & base->TCD[channel].CSR))
6000a83a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
6000a83e:	f241 031c 	movw	r3, #4124	; 0x101c
6000a842:	5ac3      	ldrh	r3, [r0, r3]
6000a844:	061a      	lsls	r2, r3, #24
6000a846:	d40a      	bmi.n	6000a85e <EDMA_GetRemainingMajorLoopCount+0x24>
        if (0U != (base->TCD[channel].CITER_ELINKNO & DMA_CITER_ELINKNO_ELINK_MASK))
6000a848:	f241 0316 	movw	r3, #4118	; 0x1016
6000a84c:	5ac2      	ldrh	r2, [r0, r3]
            remainingCount = (((uint32_t)base->TCD[channel].CITER_ELINKYES & DMA_CITER_ELINKYES_CITER_MASK) >>
6000a84e:	5ac0      	ldrh	r0, [r0, r3]
        if (0U != (base->TCD[channel].CITER_ELINKNO & DMA_CITER_ELINKNO_ELINK_MASK))
6000a850:	0413      	lsls	r3, r2, #16
            remainingCount = (((uint32_t)base->TCD[channel].CITER_ELINKYES & DMA_CITER_ELINKYES_CITER_MASK) >>
6000a852:	bf4c      	ite	mi
6000a854:	f3c0 0008 	ubfxmi	r0, r0, #0, #9
            remainingCount = (((uint32_t)base->TCD[channel].CITER_ELINKNO & DMA_CITER_ELINKNO_CITER_MASK) >>
6000a858:	f3c0 000e 	ubfxpl	r0, r0, #0, #15
6000a85c:	4770      	bx	lr
        remainingCount = 0;
6000a85e:	2000      	movs	r0, #0
}
6000a860:	4770      	bx	lr

6000a862 <EDMA_GetChannelStatusFlags>:
    retval |= (((uint32_t)base->TCD[channel].CSR & DMA_CSR_DONE_MASK) >> DMA_CSR_DONE_SHIFT);
6000a862:	eb00 1241 	add.w	r2, r0, r1, lsl #5
6000a866:	f241 031c 	movw	r3, #4124	; 0x101c
6000a86a:	5ad2      	ldrh	r2, [r2, r3]
    retval |= ((((uint32_t)base->ERR >> channel) & 0x1U) << 1U);
6000a86c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    retval |= ((((uint32_t)base->INT >> channel) & 0x1U) << 2U);
6000a86e:	6a40      	ldr	r0, [r0, #36]	; 0x24
    retval |= (((uint32_t)base->TCD[channel].CSR & DMA_CSR_DONE_MASK) >> DMA_CSR_DONE_SHIFT);
6000a870:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    retval |= ((((uint32_t)base->ERR >> channel) & 0x1U) << 1U);
6000a874:	40cb      	lsrs	r3, r1
    retval |= ((((uint32_t)base->INT >> channel) & 0x1U) << 2U);
6000a876:	40c8      	lsrs	r0, r1
    retval |= ((((uint32_t)base->ERR >> channel) & 0x1U) << 1U);
6000a878:	005b      	lsls	r3, r3, #1
    retval |= ((((uint32_t)base->INT >> channel) & 0x1U) << 2U);
6000a87a:	0080      	lsls	r0, r0, #2
    retval |= ((((uint32_t)base->ERR >> channel) & 0x1U) << 1U);
6000a87c:	f003 0302 	and.w	r3, r3, #2
    retval |= ((((uint32_t)base->INT >> channel) & 0x1U) << 2U);
6000a880:	f000 0004 	and.w	r0, r0, #4
    retval |= ((((uint32_t)base->ERR >> channel) & 0x1U) << 1U);
6000a884:	4313      	orrs	r3, r2
}
6000a886:	4318      	orrs	r0, r3
6000a888:	4770      	bx	lr

6000a88a <EDMA_ClearChannelStatusFlags>:
    if (0U != (mask & (uint32_t)kEDMA_DoneFlag))
6000a88a:	07d3      	lsls	r3, r2, #31
6000a88c:	d501      	bpl.n	6000a892 <EDMA_ClearChannelStatusFlags+0x8>
        base->CDNE = (uint8_t)channel;
6000a88e:	b2cb      	uxtb	r3, r1
6000a890:	7703      	strb	r3, [r0, #28]
    if (0U != (mask & (uint32_t)kEDMA_ErrorFlag))
6000a892:	0793      	lsls	r3, r2, #30
6000a894:	d501      	bpl.n	6000a89a <EDMA_ClearChannelStatusFlags+0x10>
        base->CERR = (uint8_t)channel;
6000a896:	b2cb      	uxtb	r3, r1
6000a898:	7783      	strb	r3, [r0, #30]
    if (0U != (mask & (uint32_t)kEDMA_InterruptFlag))
6000a89a:	0753      	lsls	r3, r2, #29
6000a89c:	d501      	bpl.n	6000a8a2 <EDMA_ClearChannelStatusFlags+0x18>
        base->CINT = (uint8_t)channel;
6000a89e:	b2c9      	uxtb	r1, r1
6000a8a0:	77c1      	strb	r1, [r0, #31]
}
6000a8a2:	4770      	bx	lr

6000a8a4 <EDMA_InstallTCDMemory>:
    handle->header  = 1;
6000a8a4:	2301      	movs	r3, #1
    handle->tcdSize = (int8_t)tcdSize;
6000a8a6:	b252      	sxtb	r2, r2
    handle->tcdPool = tcdPool;
6000a8a8:	60c1      	str	r1, [r0, #12]
    handle->header  = 1;
6000a8aa:	7443      	strb	r3, [r0, #17]
    handle->tcdUsed = 0;
6000a8ac:	2300      	movs	r3, #0
6000a8ae:	74c3      	strb	r3, [r0, #19]
    handle->flags   = 0;
6000a8b0:	7543      	strb	r3, [r0, #21]
    handle->tcdSize = (int8_t)tcdSize;
6000a8b2:	7502      	strb	r2, [r0, #20]
}
6000a8b4:	4770      	bx	lr

6000a8b6 <EDMA_SetCallback>:
    handle->userData = userData;
6000a8b6:	e9c0 1200 	strd	r1, r2, [r0]
}
6000a8ba:	4770      	bx	lr

6000a8bc <EDMA_PrepareTransfer>:
                          void *destAddr,
                          uint32_t destWidth,
                          uint32_t bytesEachRequest,
                          uint32_t transferBytes,
                          edma_transfer_type_t transferType)
{
6000a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
6000a8be:	b087      	sub	sp, #28
6000a8c0:	461d      	mov	r5, r3
6000a8c2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
6000a8c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    assert(config != NULL);

    int16_t srcOffset = 0, destOffset = 0;

    switch (transferType)
6000a8c8:	2b01      	cmp	r3, #1
6000a8ca:	d012      	beq.n	6000a8f2 <EDMA_PrepareTransfer+0x36>
6000a8cc:	2b02      	cmp	r3, #2
6000a8ce:	d00d      	beq.n	6000a8ec <EDMA_PrepareTransfer+0x30>
6000a8d0:	b993      	cbnz	r3, 6000a8f8 <EDMA_PrepareTransfer+0x3c>
    {
        case kEDMA_MemoryToMemory:
            destOffset = (int16_t)destWidth;
6000a8d2:	b234      	sxth	r4, r6
            srcOffset  = (int16_t)srcWidth;
6000a8d4:	b213      	sxth	r3, r2
            /* All the cases have been listed above, the default clause should not be reached. */
            assert(false);
            break;
    }

    EDMA_PrepareTransferConfig(config, srcAddr, srcWidth, srcOffset, destAddr, destWidth, destOffset, bytesEachRequest,
6000a8d6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
6000a8d8:	9704      	str	r7, [sp, #16]
6000a8da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
6000a8dc:	e9cd 5600 	strd	r5, r6, [sp]
6000a8e0:	e9cd 4702 	strd	r4, r7, [sp, #8]
6000a8e4:	f7fd f9ae 	bl	60007c44 <EDMA_PrepareTransferConfig>
                               transferBytes);
}
6000a8e8:	b007      	add	sp, #28
6000a8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            srcOffset  = (int16_t)srcWidth;
6000a8ec:	b213      	sxth	r3, r2
            destOffset = 0;
6000a8ee:	2400      	movs	r4, #0
            break;
6000a8f0:	e7f1      	b.n	6000a8d6 <EDMA_PrepareTransfer+0x1a>
            destOffset = (int16_t)destWidth;
6000a8f2:	b234      	sxth	r4, r6
            srcOffset  = 0;
6000a8f4:	2300      	movs	r3, #0
            break;
6000a8f6:	e7ee      	b.n	6000a8d6 <EDMA_PrepareTransfer+0x1a>
    switch (transferType)
6000a8f8:	2400      	movs	r4, #0
6000a8fa:	4623      	mov	r3, r4
6000a8fc:	e7eb      	b.n	6000a8d6 <EDMA_PrepareTransfer+0x1a>

6000a8fe <EDMA_SubmitTransfer>:
 * retval kStatus_EDMA_Success It means submit transfer request succeed.
 * retval kStatus_EDMA_QueueFull It means TCD queue is full. Submit transfer request is not allowed.
 * retval kStatus_EDMA_Busy It means the given channel is busy, need to submit request later.
 */
status_t EDMA_SubmitTransfer(edma_handle_t *handle, const edma_transfer_config_t *config)
{
6000a8fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    assert(handle != NULL);
    assert(config != NULL);

    edma_tcd_t *tcdRegs = (edma_tcd_t *)(uint32_t)&handle->base->TCD[handle->channel];

    if (handle->tcdPool == NULL)
6000a902:	68c3      	ldr	r3, [r0, #12]
{
6000a904:	4604      	mov	r4, r0
6000a906:	4689      	mov	r9, r1
    edma_tcd_t *tcdRegs = (edma_tcd_t *)(uint32_t)&handle->base->TCD[handle->channel];
6000a908:	f8d0 a008 	ldr.w	sl, [r0, #8]
6000a90c:	7c05      	ldrb	r5, [r0, #16]
    if (handle->tcdPool == NULL)
6000a90e:	bb6b      	cbnz	r3, 6000a96c <EDMA_SubmitTransfer+0x6e>
         *    When transfer request is submitted, but no request from peripheral, that is to say channel sevice doesn't
         *    begin, if application would like to submit another transfer , then the TCD will be overwritten, since the
         *    ACTIVE is 0 and BITER = CITER, for such case, it is a scatter gather(link TCD) case actually, so
         *    application should enabled TCD pool for dynamic scatter gather mode by calling EDMA_InstallTCDMemory.
         */
        if (((handle->base->TCD[handle->channel].CSR & DMA_CSR_ACTIVE_MASK) != 0U) ||
6000a910:	eb0a 1345 	add.w	r3, sl, r5, lsl #5
6000a914:	f241 061c 	movw	r6, #4124	; 0x101c
6000a918:	5b9a      	ldrh	r2, [r3, r6]
6000a91a:	0652      	lsls	r2, r2, #25
6000a91c:	f100 80b1 	bmi.w	6000aa82 <EDMA_SubmitTransfer+0x184>
            (((handle->base->TCD[handle->channel].CITER_ELINKNO & DMA_CITER_ELINKNO_CITER_MASK) !=
6000a920:	f241 0216 	movw	r2, #4118	; 0x1016
6000a924:	5a98      	ldrh	r0, [r3, r2]
              (handle->base->TCD[handle->channel].BITER_ELINKNO & DMA_BITER_ELINKNO_BITER_MASK))))
6000a926:	f241 021e 	movw	r2, #4126	; 0x101e
6000a92a:	5a9a      	ldrh	r2, [r3, r2]
6000a92c:	4042      	eors	r2, r0
        if (((handle->base->TCD[handle->channel].CSR & DMA_CSR_ACTIVE_MASK) != 0U) ||
6000a92e:	f3c2 020e 	ubfx	r2, r2, #0, #15
6000a932:	2a00      	cmp	r2, #0
6000a934:	f040 80a5 	bne.w	6000aa82 <EDMA_SubmitTransfer+0x184>
    EDMA_TcdSetTransferConfig((edma_tcd_t *)(uint32_t)&base->TCD[channel], config, nextTcd);
6000a938:	f105 0080 	add.w	r0, r5, #128	; 0x80
6000a93c:	eb0a 1040 	add.w	r0, sl, r0, lsl #5
6000a940:	f7ff ff0d 	bl	6000a75e <EDMA_TcdSetTransferConfig>
        }
        else
        {
            EDMA_SetTransferConfig(handle->base, handle->channel, config, NULL);
            /* Enable auto disable request feature */
            handle->base->TCD[handle->channel].CSR |= DMA_CSR_DREQ_MASK;
6000a944:	7c23      	ldrb	r3, [r4, #16]
6000a946:	68a2      	ldr	r2, [r4, #8]
6000a948:	eb02 1243 	add.w	r2, r2, r3, lsl #5
6000a94c:	5b93      	ldrh	r3, [r2, r6]
6000a94e:	b29b      	uxth	r3, r3
6000a950:	f043 0308 	orr.w	r3, r3, #8
6000a954:	5393      	strh	r3, [r2, r6]
            /* Enable major interrupt */
            handle->base->TCD[handle->channel].CSR |= DMA_CSR_INTMAJOR_MASK;
6000a956:	7c23      	ldrb	r3, [r4, #16]
6000a958:	68a2      	ldr	r2, [r4, #8]
6000a95a:	eb02 1243 	add.w	r2, r2, r3, lsl #5
6000a95e:	5b93      	ldrh	r3, [r2, r6]
6000a960:	b29b      	uxth	r3, r3
6000a962:	f043 0302 	orr.w	r3, r3, #2
6000a966:	5393      	strh	r3, [r2, r6]

            return kStatus_Success;
6000a968:	2000      	movs	r0, #0
6000a96a:	e00c      	b.n	6000a986 <EDMA_SubmitTransfer+0x88>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
6000a96c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
6000a970:	b672      	cpsid	i
        int8_t tmpTcdUsed;
        int8_t tmpTcdSize;

        /* Check if tcd pool is full. */
        primask    = DisableGlobalIRQ();
        tmpTcdUsed = handle->tcdUsed;
6000a972:	7cc1      	ldrb	r1, [r0, #19]
        tmpTcdSize = handle->tcdSize;
6000a974:	7d03      	ldrb	r3, [r0, #20]
        tmpTcdUsed = handle->tcdUsed;
6000a976:	b249      	sxtb	r1, r1
        tmpTcdSize = handle->tcdSize;
6000a978:	b25b      	sxtb	r3, r3
        if (tmpTcdUsed >= tmpTcdSize)
6000a97a:	4299      	cmp	r1, r3
6000a97c:	db05      	blt.n	6000a98a <EDMA_SubmitTransfer+0x8c>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
6000a97e:	f382 8810 	msr	PRIMASK, r2
        {
            EnableGlobalIRQ(primask);

            return kStatus_EDMA_QueueFull;
6000a982:	f241 30ec 	movw	r0, #5100	; 0x13ec
            handle->base->SERQ = DMA_SERQ_SERQ(handle->channel);
        }

        return kStatus_Success;
    }
}
6000a986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        currentTcd = handle->tail;
6000a98a:	7c86      	ldrb	r6, [r0, #18]
        handle->tcdUsed++;
6000a98c:	7cc3      	ldrb	r3, [r0, #19]
        nextTcd = currentTcd + 1;
6000a98e:	f106 0b01 	add.w	fp, r6, #1
        currentTcd = handle->tail;
6000a992:	fa4f f886 	sxtb.w	r8, r6
        handle->tcdUsed++;
6000a996:	3301      	adds	r3, #1
        nextTcd = currentTcd + 1;
6000a998:	fa4f fb8b 	sxtb.w	fp, fp
        handle->tcdUsed++;
6000a99c:	b25b      	sxtb	r3, r3
6000a99e:	74c3      	strb	r3, [r0, #19]
        if (nextTcd == handle->tcdSize)
6000a9a0:	7d03      	ldrb	r3, [r0, #20]
6000a9a2:	b25b      	sxtb	r3, r3
            nextTcd = 0;
6000a9a4:	455b      	cmp	r3, fp
6000a9a6:	bf08      	it	eq
6000a9a8:	f04f 0b00 	moveq.w	fp, #0
        handle->tail = nextTcd;
6000a9ac:	f880 b012 	strb.w	fp, [r0, #18]
6000a9b0:	f382 8810 	msr	PRIMASK, r2
        previousTcd = currentTcd != 0 ? currentTcd - 1 : (handle->tcdSize - 1);
6000a9b4:	f1b8 0f00 	cmp.w	r8, #0
6000a9b8:	d02f      	beq.n	6000aa1a <EDMA_SubmitTransfer+0x11c>
        EDMA_TcdReset(&handle->tcdPool[currentTcd]);
6000a9ba:	68e0      	ldr	r0, [r4, #12]
6000a9bc:	ea4f 1748 	mov.w	r7, r8, lsl #5
        EDMA_TcdSetTransferConfig(&handle->tcdPool[currentTcd], config, NULL);
6000a9c0:	4649      	mov	r1, r9
        previousTcd = currentTcd != 0 ? currentTcd - 1 : (handle->tcdSize - 1);
6000a9c2:	3e01      	subs	r6, #1
        EDMA_TcdReset(&handle->tcdPool[currentTcd]);
6000a9c4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
6000a9c8:	f7ff feb6 	bl	6000a738 <EDMA_TcdReset>
        EDMA_TcdSetTransferConfig(&handle->tcdPool[currentTcd], config, NULL);
6000a9cc:	68e0      	ldr	r0, [r4, #12]
6000a9ce:	2200      	movs	r2, #0
        previousTcd = currentTcd != 0 ? currentTcd - 1 : (handle->tcdSize - 1);
6000a9d0:	b276      	sxtb	r6, r6
        EDMA_TcdSetTransferConfig(&handle->tcdPool[currentTcd], config, NULL);
6000a9d2:	4438      	add	r0, r7
6000a9d4:	f7ff fec3 	bl	6000a75e <EDMA_TcdSetTransferConfig>
        handle->tcdPool[currentTcd].CSR |= DMA_CSR_INTMAJOR_MASK;
6000a9d8:	68e2      	ldr	r2, [r4, #12]
        if (currentTcd != previousTcd)
6000a9da:	4546      	cmp	r6, r8
        handle->tcdPool[currentTcd].CSR |= DMA_CSR_INTMAJOR_MASK;
6000a9dc:	443a      	add	r2, r7
6000a9de:	8b93      	ldrh	r3, [r2, #28]
6000a9e0:	b29b      	uxth	r3, r3
6000a9e2:	f043 0302 	orr.w	r3, r3, #2
6000a9e6:	8393      	strh	r3, [r2, #28]
        handle->tcdPool[currentTcd].DLAST_SGA = (uint32_t)&handle->tcdPool[nextTcd];
6000a9e8:	ea4f 124b 	mov.w	r2, fp, lsl #5
6000a9ec:	68e3      	ldr	r3, [r4, #12]
6000a9ee:	eb03 0107 	add.w	r1, r3, r7
6000a9f2:	eb03 134b 	add.w	r3, r3, fp, lsl #5
6000a9f6:	618b      	str	r3, [r1, #24]
        if (currentTcd != previousTcd)
6000a9f8:	d111      	bne.n	6000aa1e <EDMA_SubmitTransfer+0x120>
        EDMA_InstallTCD(handle->base, handle->channel, &handle->tcdPool[currentTcd]);
6000a9fa:	68e2      	ldr	r2, [r4, #12]
6000a9fc:	7c21      	ldrb	r1, [r4, #16]
6000a9fe:	443a      	add	r2, r7
6000aa00:	68a0      	ldr	r0, [r4, #8]
6000aa02:	f7ff fe39 	bl	6000a678 <EDMA_InstallTCD>
        if (0U != (handle->flags & EDMA_TRANSFER_ENABLED_MASK))
6000aa06:	f994 3015 	ldrsb.w	r3, [r4, #21]
6000aa0a:	2b00      	cmp	r3, #0
6000aa0c:	daac      	bge.n	6000a968 <EDMA_SubmitTransfer+0x6a>
            handle->base->SERQ = DMA_SERQ_SERQ(handle->channel);
6000aa0e:	7c23      	ldrb	r3, [r4, #16]
6000aa10:	68a2      	ldr	r2, [r4, #8]
6000aa12:	f003 031f 	and.w	r3, r3, #31
6000aa16:	76d3      	strb	r3, [r2, #27]
6000aa18:	e7a6      	b.n	6000a968 <EDMA_SubmitTransfer+0x6a>
        previousTcd = currentTcd != 0 ? currentTcd - 1 : (handle->tcdSize - 1);
6000aa1a:	7d06      	ldrb	r6, [r0, #20]
6000aa1c:	e7cd      	b.n	6000a9ba <EDMA_SubmitTransfer+0xbc>
            csr = handle->tcdPool[previousTcd].CSR | ((uint16_t)DMA_CSR_ESG_MASK);
6000aa1e:	68e1      	ldr	r1, [r4, #12]
    edma_tcd_t *tcdRegs = (edma_tcd_t *)(uint32_t)&handle->base->TCD[handle->channel];
6000aa20:	f105 0080 	add.w	r0, r5, #128	; 0x80
            csr = handle->tcdPool[previousTcd].CSR | ((uint16_t)DMA_CSR_ESG_MASK);
6000aa24:	eb01 1146 	add.w	r1, r1, r6, lsl #5
    edma_tcd_t *tcdRegs = (edma_tcd_t *)(uint32_t)&handle->base->TCD[handle->channel];
6000aa28:	eb0a 1040 	add.w	r0, sl, r0, lsl #5
            csr = handle->tcdPool[previousTcd].CSR | ((uint16_t)DMA_CSR_ESG_MASK);
6000aa2c:	8b8b      	ldrh	r3, [r1, #28]
6000aa2e:	b29b      	uxth	r3, r3
            csr &= ~((uint16_t)DMA_CSR_DREQ_MASK);
6000aa30:	f023 0308 	bic.w	r3, r3, #8
6000aa34:	f043 0310 	orr.w	r3, r3, #16
            handle->tcdPool[previousTcd].CSR = csr;
6000aa38:	838b      	strh	r3, [r1, #28]
            if (tcdRegs->DLAST_SGA == (uint32_t)&handle->tcdPool[currentTcd])
6000aa3a:	68e3      	ldr	r3, [r4, #12]
6000aa3c:	6981      	ldr	r1, [r0, #24]
6000aa3e:	443b      	add	r3, r7
6000aa40:	4299      	cmp	r1, r3
6000aa42:	d119      	bne.n	6000aa78 <EDMA_SubmitTransfer+0x17a>
                tcdRegs->CSR |= DMA_CSR_DREQ_MASK;
6000aa44:	8b83      	ldrh	r3, [r0, #28]
6000aa46:	b29b      	uxth	r3, r3
6000aa48:	f043 0308 	orr.w	r3, r3, #8
6000aa4c:	8383      	strh	r3, [r0, #28]
                csr = tcdRegs->CSR | DMA_CSR_ESG_MASK;
6000aa4e:	8b83      	ldrh	r3, [r0, #28]
6000aa50:	b29b      	uxth	r3, r3
6000aa52:	f043 0310 	orr.w	r3, r3, #16
                tcdRegs->CSR = csr;
6000aa56:	8383      	strh	r3, [r0, #28]
                if (0U != (tcdRegs->CSR & DMA_CSR_ESG_MASK))
6000aa58:	8b83      	ldrh	r3, [r0, #28]
6000aa5a:	06db      	lsls	r3, r3, #27
6000aa5c:	d506      	bpl.n	6000aa6c <EDMA_SubmitTransfer+0x16e>
                    tcdRegs->CSR &= ~(uint16_t)DMA_CSR_DREQ_MASK;
6000aa5e:	8b83      	ldrh	r3, [r0, #28]
6000aa60:	f023 0308 	bic.w	r3, r3, #8
6000aa64:	041b      	lsls	r3, r3, #16
6000aa66:	0c1b      	lsrs	r3, r3, #16
6000aa68:	8383      	strh	r3, [r0, #28]
                    return kStatus_Success;
6000aa6a:	e77d      	b.n	6000a968 <EDMA_SubmitTransfer+0x6a>
                if (tcdRegs->DLAST_SGA == (uint32_t)&handle->tcdPool[nextTcd])
6000aa6c:	68e3      	ldr	r3, [r4, #12]
6000aa6e:	6981      	ldr	r1, [r0, #24]
6000aa70:	4413      	add	r3, r2
6000aa72:	4299      	cmp	r1, r3
6000aa74:	d1c1      	bne.n	6000a9fa <EDMA_SubmitTransfer+0xfc>
6000aa76:	e777      	b.n	6000a968 <EDMA_SubmitTransfer+0x6a>
            else if (tcdRegs->DLAST_SGA != 0UL)
6000aa78:	6983      	ldr	r3, [r0, #24]
6000aa7a:	2b00      	cmp	r3, #0
6000aa7c:	f47f af74 	bne.w	6000a968 <EDMA_SubmitTransfer+0x6a>
6000aa80:	e7bb      	b.n	6000a9fa <EDMA_SubmitTransfer+0xfc>
            return kStatus_EDMA_Busy;
6000aa82:	f241 30ed 	movw	r0, #5101	; 0x13ed
6000aa86:	e77e      	b.n	6000a986 <EDMA_SubmitTransfer+0x88>

6000aa88 <EDMA_StartTransfer>:
void EDMA_StartTransfer(edma_handle_t *handle)
{
    assert(handle != NULL);
    uint32_t tmpCSR = 0;

    if (handle->tcdPool == NULL)
6000aa88:	68c1      	ldr	r1, [r0, #12]
    {
        handle->base->SERQ = DMA_SERQ_SERQ(handle->channel);
6000aa8a:	6882      	ldr	r2, [r0, #8]
6000aa8c:	7c03      	ldrb	r3, [r0, #16]
{
6000aa8e:	b570      	push	{r4, r5, r6, lr}
    if (handle->tcdPool == NULL)
6000aa90:	b919      	cbnz	r1, 6000aa9a <EDMA_StartTransfer+0x12>
        handle->base->SERQ = DMA_SERQ_SERQ(handle->channel);
6000aa92:	f003 031f 	and.w	r3, r3, #31
6000aa96:	76d3      	strb	r3, [r2, #27]
                }
            }
            EnableGlobalIRQ(primask);
        }
    }
}
6000aa98:	bd70      	pop	{r4, r5, r6, pc}
        edma_tcd_t *tcdRegs = (edma_tcd_t *)(uint32_t)&handle->base->TCD[handle->channel];
6000aa9a:	3380      	adds	r3, #128	; 0x80
6000aa9c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
        handle->flags |= EDMA_TRANSFER_ENABLED_MASK;
6000aaa0:	7d42      	ldrb	r2, [r0, #21]
6000aaa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
6000aaa6:	7542      	strb	r2, [r0, #21]
        if (tcdRegs->DLAST_SGA != 0U)
6000aaa8:	699a      	ldr	r2, [r3, #24]
6000aaaa:	2a00      	cmp	r2, #0
6000aaac:	d0f4      	beq.n	6000aa98 <EDMA_StartTransfer+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
6000aaae:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
6000aab2:	b672      	cpsid	i
            if ((handle->base->ERQ & ((uint32_t)1U << handle->channel)) == 0U)
6000aab4:	2101      	movs	r1, #1
6000aab6:	6884      	ldr	r4, [r0, #8]
6000aab8:	7c02      	ldrb	r2, [r0, #16]
6000aaba:	68e6      	ldr	r6, [r4, #12]
6000aabc:	4091      	lsls	r1, r2
6000aabe:	4231      	tst	r1, r6
6000aac0:	d107      	bne.n	6000aad2 <EDMA_StartTransfer+0x4a>
                tmpCSR = tcdRegs->CSR;
6000aac2:	8b9b      	ldrh	r3, [r3, #28]
                if ((0U == (tmpCSR & DMA_CSR_DONE_MASK)) || (0U != (tmpCSR & DMA_CSR_ESG_MASK)))
6000aac4:	f003 0390 	and.w	r3, r3, #144	; 0x90
6000aac8:	2b80      	cmp	r3, #128	; 0x80
6000aaca:	d002      	beq.n	6000aad2 <EDMA_StartTransfer+0x4a>
                    handle->base->SERQ = DMA_SERQ_SERQ(handle->channel);
6000aacc:	f002 021f 	and.w	r2, r2, #31
6000aad0:	76e2      	strb	r2, [r4, #27]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
6000aad2:	f385 8810 	msr	PRIMASK, r5
}
6000aad6:	e7df      	b.n	6000aa98 <EDMA_StartTransfer+0x10>

6000aad8 <EDMA_StopTransfer>:
 */
void EDMA_StopTransfer(edma_handle_t *handle)
{
    assert(handle != NULL);

    handle->flags &= (~(uint8_t)EDMA_TRANSFER_ENABLED_MASK);
6000aad8:	7d43      	ldrb	r3, [r0, #21]
    handle->base->CERQ = DMA_CERQ_CERQ(handle->channel);
6000aada:	6882      	ldr	r2, [r0, #8]
    handle->flags &= (~(uint8_t)EDMA_TRANSFER_ENABLED_MASK);
6000aadc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
6000aae0:	7543      	strb	r3, [r0, #21]
    handle->base->CERQ = DMA_CERQ_CERQ(handle->channel);
6000aae2:	7c03      	ldrb	r3, [r0, #16]
6000aae4:	f003 031f 	and.w	r3, r3, #31
6000aae8:	7693      	strb	r3, [r2, #26]
}
6000aaea:	4770      	bx	lr

6000aaec <EDMA_AbortTransfer>:
 *
 * param handle DMA handle pointer.
 */
void EDMA_AbortTransfer(edma_handle_t *handle)
{
    handle->base->CERQ = DMA_CERQ_CERQ(handle->channel);
6000aaec:	7c03      	ldrb	r3, [r0, #16]
    /*
        Clear CSR to release channel. Because if the given channel started transfer,
        CSR will be not zero. Because if it is the last transfer, DREQ will be set.
        If not, ESG will be set.
    */
    handle->base->TCD[handle->channel].CSR = 0;
6000aaee:	f241 011c 	movw	r1, #4124	; 0x101c
    handle->base->CERQ = DMA_CERQ_CERQ(handle->channel);
6000aaf2:	6882      	ldr	r2, [r0, #8]
6000aaf4:	f003 031f 	and.w	r3, r3, #31
6000aaf8:	7693      	strb	r3, [r2, #26]
    handle->base->TCD[handle->channel].CSR = 0;
6000aafa:	6883      	ldr	r3, [r0, #8]
6000aafc:	7c02      	ldrb	r2, [r0, #16]
6000aafe:	eb03 1242 	add.w	r2, r3, r2, lsl #5
6000ab02:	2300      	movs	r3, #0
6000ab04:	5253      	strh	r3, [r2, r1]
    /* Cancel all next TCD transfer. */
    handle->base->TCD[handle->channel].DLAST_SGA = 0;
6000ab06:	7c01      	ldrb	r1, [r0, #16]
6000ab08:	6882      	ldr	r2, [r0, #8]
6000ab0a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
6000ab0e:	f241 0118 	movw	r1, #4120	; 0x1018
6000ab12:	5053      	str	r3, [r2, r1]
    /* clear the CITER and BITER to make sure the TCD register in a correct state for next calling of
     * EDMA_SubmitTransfer */
    handle->base->TCD[handle->channel].CITER_ELINKNO = 0;
6000ab14:	7c01      	ldrb	r1, [r0, #16]
6000ab16:	6882      	ldr	r2, [r0, #8]
6000ab18:	eb02 1241 	add.w	r2, r2, r1, lsl #5
6000ab1c:	f241 0116 	movw	r1, #4118	; 0x1016
6000ab20:	5253      	strh	r3, [r2, r1]
    handle->base->TCD[handle->channel].BITER_ELINKNO = 0;
6000ab22:	7c01      	ldrb	r1, [r0, #16]
6000ab24:	6882      	ldr	r2, [r0, #8]
6000ab26:	eb02 1241 	add.w	r2, r2, r1, lsl #5
6000ab2a:	f241 011e 	movw	r1, #4126	; 0x101e
6000ab2e:	5253      	strh	r3, [r2, r1]

    /* Handle the tcd */
    if (handle->tcdPool != NULL)
6000ab30:	68c2      	ldr	r2, [r0, #12]
6000ab32:	b11a      	cbz	r2, 6000ab3c <EDMA_AbortTransfer+0x50>
    {
        handle->header  = 1;
6000ab34:	2201      	movs	r2, #1
6000ab36:	7442      	strb	r2, [r0, #17]
        handle->tail    = 0;
6000ab38:	7483      	strb	r3, [r0, #18]
        handle->tcdUsed = 0;
6000ab3a:	74c3      	strb	r3, [r0, #19]
    }
}
6000ab3c:	4770      	bx	lr

6000ab3e <EDMA_HandleIRQ>:
 * further details.
 *
 * param handle eDMA handle pointer.
 */
void EDMA_HandleIRQ(edma_handle_t *handle)
{
6000ab3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(handle != NULL);

    bool transfer_done;

    /* Clear EDMA interrupt flag */
    handle->base->CINT = handle->channel;
6000ab42:	6883      	ldr	r3, [r0, #8]
    /* Check if transfer is already finished. */
    transfer_done = ((handle->base->TCD[handle->channel].CSR & DMA_CSR_DONE_MASK) != 0U);
6000ab44:	f241 0e1c 	movw	lr, #4124	; 0x101c
    handle->base->CINT = handle->channel;
6000ab48:	7c06      	ldrb	r6, [r0, #16]
{
6000ab4a:	4604      	mov	r4, r0
    handle->base->CINT = handle->channel;
6000ab4c:	77de      	strb	r6, [r3, #31]
    transfer_done = ((handle->base->TCD[handle->channel].CSR & DMA_CSR_DONE_MASK) != 0U);
6000ab4e:	6887      	ldr	r7, [r0, #8]

    if (handle->tcdPool == NULL)
6000ab50:	68c3      	ldr	r3, [r0, #12]
    transfer_done = ((handle->base->TCD[handle->channel].CSR & DMA_CSR_DONE_MASK) != 0U);
6000ab52:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
6000ab56:	f83c 200e 	ldrh.w	r2, [ip, lr]
6000ab5a:	f002 0580 	and.w	r5, r2, #128	; 0x80
6000ab5e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    if (handle->tcdPool == NULL)
6000ab62:	b93b      	cbnz	r3, 6000ab74 <EDMA_HandleIRQ+0x36>
    {
        if (handle->callback != NULL)
6000ab64:	6805      	ldr	r5, [r0, #0]
6000ab66:	2d00      	cmp	r5, #0
6000ab68:	d032      	beq.n	6000abd0 <EDMA_HandleIRQ+0x92>
        {
            (handle->callback)(handle, handle->userData, transfer_done, 0);
6000ab6a:	46ac      	mov	ip, r5
6000ab6c:	6841      	ldr	r1, [r0, #4]
            {
                handle->base->CDNE = handle->channel;
            }
        }
    }
}
6000ab6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            (handle->callback)(handle, handle->userData, transfer_done, 0);
6000ab72:	4760      	bx	ip
        uint32_t sga = (uint32_t)handle->base->TCD[handle->channel].DLAST_SGA;
6000ab74:	f241 0118 	movw	r1, #4120	; 0x1018
6000ab78:	f85c 1001 	ldr.w	r1, [ip, r1]
        bool esg = ((handle->base->TCD[handle->channel].CSR & DMA_CSR_ESG_MASK) != 0U);
6000ab7c:	f83c 000e 	ldrh.w	r0, [ip, lr]
        sga -= (uint32_t)handle->tcdPool;
6000ab80:	1ac9      	subs	r1, r1, r3
        bool esg = ((handle->base->TCD[handle->channel].CSR & DMA_CSR_ESG_MASK) != 0U);
6000ab82:	b280      	uxth	r0, r0
        sga_index = sga / sizeof(edma_tcd_t);
6000ab84:	094b      	lsrs	r3, r1, #5
        if (transfer_done)
6000ab86:	b32d      	cbz	r5, 6000abd4 <EDMA_HandleIRQ+0x96>
            new_header = sga_index != 0U ? (uint8_t)sga_index - 1U : (uint8_t)handle->tcdSize - 1U;
6000ab88:	b2db      	uxtb	r3, r3
        if (new_header == (uint8_t)handle->header)
6000ab8a:	7c61      	ldrb	r1, [r4, #17]
6000ab8c:	fa4f fc83 	sxtb.w	ip, r3
6000ab90:	428b      	cmp	r3, r1
6000ab92:	d128      	bne.n	6000abe6 <EDMA_HandleIRQ+0xa8>
            int8_t tmpTcdUsed = handle->tcdUsed;
6000ab94:	7ce3      	ldrb	r3, [r4, #19]
            int8_t tmpTcdSize = handle->tcdSize;
6000ab96:	7d21      	ldrb	r1, [r4, #20]
            if ((tmpTcdUsed == tmpTcdSize) || (!esg))
6000ab98:	4299      	cmp	r1, r3
6000ab9a:	d001      	beq.n	6000aba0 <EDMA_HandleIRQ+0x62>
6000ab9c:	06c0      	lsls	r0, r0, #27
6000ab9e:	d42d      	bmi.n	6000abfc <EDMA_HandleIRQ+0xbe>
                tcds_done = handle->tcdUsed;
6000aba0:	7ce3      	ldrb	r3, [r4, #19]
6000aba2:	b25b      	sxtb	r3, r3
        handle->header = (int8_t)new_header;
6000aba4:	f884 c011 	strb.w	ip, [r4, #17]
        handle->tcdUsed -= (int8_t)tcds_done;
6000aba8:	7ce1      	ldrb	r1, [r4, #19]
        if (NULL != handle->callback)
6000abaa:	6826      	ldr	r6, [r4, #0]
        handle->tcdUsed -= (int8_t)tcds_done;
6000abac:	1ac9      	subs	r1, r1, r3
6000abae:	b249      	sxtb	r1, r1
6000abb0:	74e1      	strb	r1, [r4, #19]
        if (NULL != handle->callback)
6000abb2:	b116      	cbz	r6, 6000abba <EDMA_HandleIRQ+0x7c>
            (handle->callback)(handle, handle->userData, transfer_done, tcds_done);
6000abb4:	6861      	ldr	r1, [r4, #4]
6000abb6:	4620      	mov	r0, r4
6000abb8:	47b0      	blx	r6
        if (transfer_done)
6000abba:	b14d      	cbz	r5, 6000abd0 <EDMA_HandleIRQ+0x92>
            if ((handle->base->TCD[handle->channel].CSR & DMA_CSR_ESG_MASK) != 0U)
6000abbc:	68a3      	ldr	r3, [r4, #8]
6000abbe:	f241 011c 	movw	r1, #4124	; 0x101c
6000abc2:	7c22      	ldrb	r2, [r4, #16]
6000abc4:	eb03 1042 	add.w	r0, r3, r2, lsl #5
6000abc8:	5a41      	ldrh	r1, [r0, r1]
6000abca:	06c9      	lsls	r1, r1, #27
6000abcc:	d500      	bpl.n	6000abd0 <EDMA_HandleIRQ+0x92>
                handle->base->CDNE = handle->channel;
6000abce:	771a      	strb	r2, [r3, #28]
}
6000abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            new_header = sga_index != 0U ? (uint8_t)sga_index - 1U : (uint8_t)handle->tcdSize - 1U;
6000abd4:	291f      	cmp	r1, #31
6000abd6:	d901      	bls.n	6000abdc <EDMA_HandleIRQ+0x9e>
6000abd8:	3b01      	subs	r3, #1
6000abda:	e7d5      	b.n	6000ab88 <EDMA_HandleIRQ+0x4a>
6000abdc:	7d23      	ldrb	r3, [r4, #20]
6000abde:	3b01      	subs	r3, #1
6000abe0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
6000abe4:	e7d1      	b.n	6000ab8a <EDMA_HandleIRQ+0x4c>
            tcds_done = (int32_t)new_header - (int32_t)handle->header;
6000abe6:	7c61      	ldrb	r1, [r4, #17]
6000abe8:	b249      	sxtb	r1, r1
            if (tcds_done < 0)
6000abea:	1a5b      	subs	r3, r3, r1
6000abec:	d502      	bpl.n	6000abf4 <EDMA_HandleIRQ+0xb6>
                tcds_done += handle->tcdSize;
6000abee:	7d21      	ldrb	r1, [r4, #20]
6000abf0:	fa43 f381 	sxtab	r3, r3, r1
            if (transfer_done)
6000abf4:	2d00      	cmp	r5, #0
6000abf6:	d0d5      	beq.n	6000aba4 <EDMA_HandleIRQ+0x66>
                handle->base->CDNE = handle->channel;
6000abf8:	773e      	strb	r6, [r7, #28]
6000abfa:	e7d3      	b.n	6000aba4 <EDMA_HandleIRQ+0x66>
                tcds_done = 0;
6000abfc:	2300      	movs	r3, #0
6000abfe:	e7d1      	b.n	6000aba4 <EDMA_HandleIRQ+0x66>

6000ac00 <LPSPI_MasterTransferComplete>:
    base->IER &= ~mask;
6000ac00:	6982      	ldr	r2, [r0, #24]
6000ac02:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
6000ac06:	f022 0203 	bic.w	r2, r2, #3
{
6000ac0a:	b410      	push	{r4}
6000ac0c:	6182      	str	r2, [r0, #24]
    handle->state = (uint8_t)kLPSPI_Idle;
6000ac0e:	2200      	movs	r2, #0
    if (handle->callback != NULL)
6000ac10:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    handle->state = (uint8_t)kLPSPI_Idle;
6000ac12:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
    if (handle->callback != NULL)
6000ac16:	b11c      	cbz	r4, 6000ac20 <LPSPI_MasterTransferComplete+0x20>
        handle->callback(base, handle, kStatus_Success, handle->userData);
6000ac18:	46a4      	mov	ip, r4
6000ac1a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
}
6000ac1c:	bc10      	pop	{r4}
        handle->callback(base, handle, kStatus_Success, handle->userData);
6000ac1e:	4760      	bx	ip
}
6000ac20:	bc10      	pop	{r4}
6000ac22:	4770      	bx	lr

6000ac24 <LPSPI_CombineWriteData>:
    switch (bytesEachWrite)
6000ac24:	3901      	subs	r1, #1
{
6000ac26:	b510      	push	{r4, lr}
    switch (bytesEachWrite)
6000ac28:	2903      	cmp	r1, #3
6000ac2a:	d81d      	bhi.n	6000ac68 <LPSPI_CombineWriteData+0x44>
6000ac2c:	e8df f001 	tbb	[pc, r1]
6000ac30:	170a0402 	.word	0x170a0402
            wordToSend = *txData;
6000ac34:	7800      	ldrb	r0, [r0, #0]
}
6000ac36:	bd10      	pop	{r4, pc}
            if (!isByteSwap)
6000ac38:	8800      	ldrh	r0, [r0, #0]
6000ac3a:	2a00      	cmp	r2, #0
6000ac3c:	d0fb      	beq.n	6000ac36 <LPSPI_CombineWriteData+0x12>
                wordToSend |= *txData;
6000ac3e:	ba40      	rev16	r0, r0
6000ac40:	b280      	uxth	r0, r0
                ++txData;
6000ac42:	e7f8      	b.n	6000ac36 <LPSPI_CombineWriteData+0x12>
                wordToSend |= (unsigned)(*txData) << 8U;
6000ac44:	7843      	ldrb	r3, [r0, #1]
                wordToSend = *txData;
6000ac46:	7804      	ldrb	r4, [r0, #0]
                wordToSend |= (unsigned)(*txData) << 8U;
6000ac48:	021b      	lsls	r3, r3, #8
                wordToSend |= (unsigned)(*txData) << 16U;
6000ac4a:	7881      	ldrb	r1, [r0, #2]
            if (!isByteSwap)
6000ac4c:	b91a      	cbnz	r2, 6000ac56 <LPSPI_CombineWriteData+0x32>
                wordToSend |= (unsigned)(*txData) << 16U;
6000ac4e:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
6000ac52:	4320      	orrs	r0, r4
                ++txData;
6000ac54:	e7ef      	b.n	6000ac36 <LPSPI_CombineWriteData+0x12>
                wordToSend |= (unsigned)(*txData) << 8U;
6000ac56:	ea43 4004 	orr.w	r0, r3, r4, lsl #16
                wordToSend |= *txData;
6000ac5a:	4308      	orrs	r0, r1
                ++txData;
6000ac5c:	e7eb      	b.n	6000ac36 <LPSPI_CombineWriteData+0x12>
                wordToSend |= (unsigned)(*txData) << 24U;
6000ac5e:	6800      	ldr	r0, [r0, #0]
            if (!isByteSwap)
6000ac60:	2a00      	cmp	r2, #0
6000ac62:	d0e8      	beq.n	6000ac36 <LPSPI_CombineWriteData+0x12>
                wordToSend |= (unsigned)(*txData) << 8U;
6000ac64:	ba00      	rev	r0, r0
                ++txData;
6000ac66:	e7e6      	b.n	6000ac36 <LPSPI_CombineWriteData+0x12>
    switch (bytesEachWrite)
6000ac68:	2000      	movs	r0, #0
    return wordToSend;
6000ac6a:	e7e4      	b.n	6000ac36 <LPSPI_CombineWriteData+0x12>

6000ac6c <LPSPI_MasterTransferFillUpTxFifo>:
{
6000ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
6000ac70:	460c      	mov	r4, r1
    uint8_t fifoSize                = handle->fifoSize;
6000ac72:	798f      	ldrb	r7, [r1, #6]
    uint32_t writeRegRemainingTimes = handle->writeRegRemainingTimes;
6000ac74:	69c9      	ldr	r1, [r1, #28]
{
6000ac76:	4606      	mov	r6, r0
    uint32_t readRegRemainingTimes  = handle->readRegRemainingTimes;
6000ac78:	f8d4 8020 	ldr.w	r8, [r4, #32]
    uint8_t fifoSize                = handle->fifoSize;
6000ac7c:	b2ff      	uxtb	r7, r7
    size_t txRemainingByteCount     = handle->txRemainingByteCount;
6000ac7e:	6963      	ldr	r3, [r4, #20]
    uint8_t bytesEachWrite          = handle->bytesEachWrite;
6000ac80:	7a25      	ldrb	r5, [r4, #8]
    bool isByteSwap                 = handle->isByteSwap;
6000ac82:	78a2      	ldrb	r2, [r4, #2]
    uint8_t bytesEachWrite          = handle->bytesEachWrite;
6000ac84:	b2ed      	uxtb	r5, r5
    bool isByteSwap                 = handle->isByteSwap;
6000ac86:	b2d2      	uxtb	r2, r2
    return ((base->FSR & LPSPI_FSR_TXCOUNT_MASK) >> LPSPI_FSR_TXCOUNT_SHIFT);
6000ac88:	6df0      	ldr	r0, [r6, #92]	; 0x5c
6000ac8a:	f000 001f 	and.w	r0, r0, #31
    while ((LPSPI_GetTxFifoCount(base) < fifoSize) &&
6000ac8e:	4287      	cmp	r7, r0
6000ac90:	d92c      	bls.n	6000acec <LPSPI_MasterTransferFillUpTxFifo+0x80>
           (((readRegRemainingTimes - writeRegRemainingTimes) < (uint32_t)fifoSize) || (handle->rxData == NULL)))
6000ac92:	eba8 0101 	sub.w	r1, r8, r1
    while ((LPSPI_GetTxFifoCount(base) < fifoSize) &&
6000ac96:	428f      	cmp	r7, r1
6000ac98:	d801      	bhi.n	6000ac9e <LPSPI_MasterTransferFillUpTxFifo+0x32>
           (((readRegRemainingTimes - writeRegRemainingTimes) < (uint32_t)fifoSize) || (handle->rxData == NULL)))
6000ac9a:	6921      	ldr	r1, [r4, #16]
6000ac9c:	bb31      	cbnz	r1, 6000acec <LPSPI_MasterTransferFillUpTxFifo+0x80>
        if (txRemainingByteCount < (size_t)bytesEachWrite)
6000ac9e:	429d      	cmp	r5, r3
6000aca0:	d903      	bls.n	6000acaa <LPSPI_MasterTransferFillUpTxFifo+0x3e>
            handle->bytesEachWrite = (uint8_t)txRemainingByteCount;
6000aca2:	b2db      	uxtb	r3, r3
6000aca4:	7223      	strb	r3, [r4, #8]
            bytesEachWrite         = handle->bytesEachWrite;
6000aca6:	7a25      	ldrb	r5, [r4, #8]
6000aca8:	b2ed      	uxtb	r5, r5
        if (handle->txData != NULL)
6000acaa:	68e3      	ldr	r3, [r4, #12]
6000acac:	b303      	cbz	r3, 6000acf0 <LPSPI_MasterTransferFillUpTxFifo+0x84>
            wordToSend = LPSPI_CombineWriteData(handle->txData, bytesEachWrite, isByteSwap);
6000acae:	68e0      	ldr	r0, [r4, #12]
6000acb0:	4629      	mov	r1, r5
6000acb2:	f7ff ffb7 	bl	6000ac24 <LPSPI_CombineWriteData>
            handle->txData += bytesEachWrite;
6000acb6:	68e3      	ldr	r3, [r4, #12]
6000acb8:	442b      	add	r3, r5
6000acba:	60e3      	str	r3, [r4, #12]
 * @param base LPSPI peripheral address.
 * @param data The data word to be sent.
 */
static inline void LPSPI_WriteData(LPSPI_Type *base, uint32_t data)
{
    base->TDR = data;
6000acbc:	6670      	str	r0, [r6, #100]	; 0x64
        --handle->writeRegRemainingTimes;
6000acbe:	69e3      	ldr	r3, [r4, #28]
6000acc0:	3b01      	subs	r3, #1
6000acc2:	61e3      	str	r3, [r4, #28]
        writeRegRemainingTimes = handle->writeRegRemainingTimes;
6000acc4:	69e1      	ldr	r1, [r4, #28]
        handle->txRemainingByteCount -= (size_t)bytesEachWrite;
6000acc6:	6963      	ldr	r3, [r4, #20]
6000acc8:	1b5b      	subs	r3, r3, r5
6000acca:	6163      	str	r3, [r4, #20]
        txRemainingByteCount = handle->txRemainingByteCount;
6000accc:	6963      	ldr	r3, [r4, #20]
        if (handle->txRemainingByteCount == 0U)
6000acce:	6960      	ldr	r0, [r4, #20]
6000acd0:	2800      	cmp	r0, #0
6000acd2:	d1d9      	bne.n	6000ac88 <LPSPI_MasterTransferFillUpTxFifo+0x1c>
            if (handle->isPcsContinuous)
6000acd4:	7823      	ldrb	r3, [r4, #0]
6000acd6:	b14b      	cbz	r3, 6000acec <LPSPI_MasterTransferFillUpTxFifo+0x80>
    return ((base->FSR & LPSPI_FSR_TXCOUNT_MASK) >> LPSPI_FSR_TXCOUNT_SHIFT);
6000acd8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
6000acda:	f003 031f 	and.w	r3, r3, #31
                if (LPSPI_GetTxFifoCount(base) < fifoSize)
6000acde:	429f      	cmp	r7, r3
6000ace0:	d908      	bls.n	6000acf4 <LPSPI_MasterTransferFillUpTxFifo+0x88>
                    base->TCR             = (base->TCR & ~(LPSPI_TCR_CONTC_MASK));
6000ace2:	6e33      	ldr	r3, [r6, #96]	; 0x60
6000ace4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
6000ace8:	6633      	str	r3, [r6, #96]	; 0x60
                    handle->writeTcrInIsr = false;
6000acea:	7060      	strb	r0, [r4, #1]
}
6000acec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            wordToSend = handle->txBuffIfNull;
6000acf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
6000acf2:	e7e3      	b.n	6000acbc <LPSPI_MasterTransferFillUpTxFifo+0x50>
                    handle->writeTcrInIsr = true;
6000acf4:	2301      	movs	r3, #1
6000acf6:	7063      	strb	r3, [r4, #1]
6000acf8:	e7f8      	b.n	6000acec <LPSPI_MasterTransferFillUpTxFifo+0x80>

6000acfa <LPSPI_SeparateReadData>:
    switch (bytesEachRead)
6000acfa:	3a01      	subs	r2, #1
{
6000acfc:	b530      	push	{r4, r5, lr}
    switch (bytesEachRead)
6000acfe:	2a03      	cmp	r2, #3
6000ad00:	d804      	bhi.n	6000ad0c <LPSPI_SeparateReadData+0x12>
6000ad02:	e8df f002 	tbb	[pc, r2]
6000ad06:	0402      	.short	0x0402
6000ad08:	1c0e      	.short	0x1c0e
            *rxData = (uint8_t)readData;
6000ad0a:	7001      	strb	r1, [r0, #0]
}
6000ad0c:	bd30      	pop	{r4, r5, pc}
                *rxData = (uint8_t)(readData >> 8);
6000ad0e:	f3c1 2207 	ubfx	r2, r1, #8, #8
            *rxData = (uint8_t)readData;
6000ad12:	b2c9      	uxtb	r1, r1
            if (!isByteSwap)
6000ad14:	b913      	cbnz	r3, 6000ad1c <LPSPI_SeparateReadData+0x22>
                *rxData = (uint8_t)readData;
6000ad16:	7001      	strb	r1, [r0, #0]
                *rxData = (uint8_t)(readData >> 8);
6000ad18:	7042      	strb	r2, [r0, #1]
                ++rxData;
6000ad1a:	e7f7      	b.n	6000ad0c <LPSPI_SeparateReadData+0x12>
                *rxData = (uint8_t)(readData >> 8);
6000ad1c:	7002      	strb	r2, [r0, #0]
                *rxData = (uint8_t)readData;
6000ad1e:	7041      	strb	r1, [r0, #1]
                ++rxData;
6000ad20:	e7f4      	b.n	6000ad0c <LPSPI_SeparateReadData+0x12>
                *rxData = (uint8_t)(readData >> 16);
6000ad22:	f3c1 4407 	ubfx	r4, r1, #16, #8
                *rxData = (uint8_t)(readData >> 8);
6000ad26:	f3c1 2207 	ubfx	r2, r1, #8, #8
            *rxData = (uint8_t)readData;
6000ad2a:	b2c9      	uxtb	r1, r1
            if (!isByteSwap)
6000ad2c:	b91b      	cbnz	r3, 6000ad36 <LPSPI_SeparateReadData+0x3c>
                *rxData = (uint8_t)readData;
6000ad2e:	7001      	strb	r1, [r0, #0]
                *rxData = (uint8_t)(readData >> 8);
6000ad30:	7042      	strb	r2, [r0, #1]
                *rxData = (uint8_t)(readData >> 16);
6000ad32:	7084      	strb	r4, [r0, #2]
                ++rxData;
6000ad34:	e7ea      	b.n	6000ad0c <LPSPI_SeparateReadData+0x12>
                *rxData = (uint8_t)(readData >> 16);
6000ad36:	7004      	strb	r4, [r0, #0]
                *rxData = (uint8_t)(readData >> 8);
6000ad38:	7042      	strb	r2, [r0, #1]
                *rxData = (uint8_t)readData;
6000ad3a:	7081      	strb	r1, [r0, #2]
                ++rxData;
6000ad3c:	e7e6      	b.n	6000ad0c <LPSPI_SeparateReadData+0x12>
                *rxData = (uint8_t)(readData >> 24);
6000ad3e:	0e0d      	lsrs	r5, r1, #24
                *rxData = (uint8_t)(readData >> 16);
6000ad40:	f3c1 4407 	ubfx	r4, r1, #16, #8
                *rxData = (uint8_t)(readData >> 8);
6000ad44:	f3c1 2207 	ubfx	r2, r1, #8, #8
            *rxData = (uint8_t)readData;
6000ad48:	b2c9      	uxtb	r1, r1
            if (!isByteSwap)
6000ad4a:	b923      	cbnz	r3, 6000ad56 <LPSPI_SeparateReadData+0x5c>
                *rxData = (uint8_t)readData;
6000ad4c:	7001      	strb	r1, [r0, #0]
                *rxData = (uint8_t)(readData >> 8);
6000ad4e:	7042      	strb	r2, [r0, #1]
                *rxData = (uint8_t)(readData >> 16);
6000ad50:	7084      	strb	r4, [r0, #2]
                *rxData = (uint8_t)(readData >> 24);
6000ad52:	70c5      	strb	r5, [r0, #3]
                ++rxData;
6000ad54:	e7da      	b.n	6000ad0c <LPSPI_SeparateReadData+0x12>
                *rxData = (uint8_t)(readData >> 24);
6000ad56:	7005      	strb	r5, [r0, #0]
                *rxData = (uint8_t)(readData >> 16);
6000ad58:	7044      	strb	r4, [r0, #1]
                *rxData = (uint8_t)(readData >> 8);
6000ad5a:	7082      	strb	r2, [r0, #2]
                *rxData = (uint8_t)readData;
6000ad5c:	70c1      	strb	r1, [r0, #3]
}
6000ad5e:	e7d5      	b.n	6000ad0c <LPSPI_SeparateReadData+0x12>

6000ad60 <LPSPI_MasterTransferHandleIRQ>:
{
6000ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t bytesEachRead          = handle->bytesEachRead;
6000ad62:	7a4f      	ldrb	r7, [r1, #9]
{
6000ad64:	4605      	mov	r5, r0
    bool isByteSwap                = handle->isByteSwap;
6000ad66:	788b      	ldrb	r3, [r1, #2]
{
6000ad68:	460c      	mov	r4, r1
    uint32_t readRegRemainingTimes = handle->readRegRemainingTimes;
6000ad6a:	6a0e      	ldr	r6, [r1, #32]
    uint8_t bytesEachRead          = handle->bytesEachRead;
6000ad6c:	b2ff      	uxtb	r7, r7
    if (handle->rxData != NULL)
6000ad6e:	690a      	ldr	r2, [r1, #16]
    bool isByteSwap                = handle->isByteSwap;
6000ad70:	b2db      	uxtb	r3, r3
    if (handle->rxData != NULL)
6000ad72:	b1ea      	cbz	r2, 6000adb0 <LPSPI_MasterTransferHandleIRQ+0x50>
        if (handle->rxRemainingByteCount != 0U)
6000ad74:	698a      	ldr	r2, [r1, #24]
6000ad76:	b152      	cbz	r2, 6000ad8e <LPSPI_MasterTransferHandleIRQ+0x2e>
    base->IER &= ~mask;
6000ad78:	6982      	ldr	r2, [r0, #24]
6000ad7a:	f022 0202 	bic.w	r2, r2, #2
6000ad7e:	6182      	str	r2, [r0, #24]
    return ((base->FSR & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
6000ad80:	6dea      	ldr	r2, [r5, #92]	; 0x5c
            while ((LPSPI_GetRxFifoCount(base) != 0U) && (handle->rxRemainingByteCount != 0U))
6000ad82:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
6000ad86:	d144      	bne.n	6000ae12 <LPSPI_MasterTransferHandleIRQ+0xb2>
            if (handle->rxRemainingByteCount != 0U)
6000ad88:	69a3      	ldr	r3, [r4, #24]
6000ad8a:	2b00      	cmp	r3, #0
6000ad8c:	d15c      	bne.n	6000ae48 <LPSPI_MasterTransferHandleIRQ+0xe8>
        if (readRegRemainingTimes <= (uint32_t)handle->rxWatermark)
6000ad8e:	79e3      	ldrb	r3, [r4, #7]
6000ad90:	42b3      	cmp	r3, r6
6000ad92:	d30d      	bcc.n	6000adb0 <LPSPI_MasterTransferHandleIRQ+0x50>
                        LPSPI_FCR_RXWATER((readRegRemainingTimes > 1U) ? (readRegRemainingTimes - 1U) : (0U));
6000ad94:	2e01      	cmp	r6, #1
            base->FCR = (base->FCR & (~LPSPI_FCR_RXWATER_MASK)) |
6000ad96:	6dab      	ldr	r3, [r5, #88]	; 0x58
                        LPSPI_FCR_RXWATER((readRegRemainingTimes > 1U) ? (readRegRemainingTimes - 1U) : (0U));
6000ad98:	bf88      	it	hi
6000ad9a:	f106 36ff 	addhi.w	r6, r6, #4294967295	; 0xffffffff
            base->FCR = (base->FCR & (~LPSPI_FCR_RXWATER_MASK)) |
6000ad9e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
                        LPSPI_FCR_RXWATER((readRegRemainingTimes > 1U) ? (readRegRemainingTimes - 1U) : (0U));
6000ada2:	bf92      	itee	ls
6000ada4:	2600      	movls	r6, #0
6000ada6:	0436      	lslhi	r6, r6, #16
6000ada8:	f406 2670 	andhi.w	r6, r6, #983040	; 0xf0000
            base->FCR = (base->FCR & (~LPSPI_FCR_RXWATER_MASK)) |
6000adac:	4333      	orrs	r3, r6
6000adae:	65ab      	str	r3, [r5, #88]	; 0x58
    if (handle->txRemainingByteCount != 0U)
6000adb0:	6963      	ldr	r3, [r4, #20]
6000adb2:	2b00      	cmp	r3, #0
6000adb4:	d052      	beq.n	6000ae5c <LPSPI_MasterTransferHandleIRQ+0xfc>
        if (handle->isTxMask)
6000adb6:	78e3      	ldrb	r3, [r4, #3]
6000adb8:	2b00      	cmp	r3, #0
6000adba:	d04a      	beq.n	6000ae52 <LPSPI_MasterTransferHandleIRQ+0xf2>
            base->TCR |= LPSPI_TCR_TXMSK_MASK;
6000adbc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
6000adbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
6000adc2:	662b      	str	r3, [r5, #96]	; 0x60
            if ((handle->txRemainingByteCount == (uint32_t)handle->bytesPerFrame) && (handle->isPcsContinuous))
6000adc4:	6962      	ldr	r2, [r4, #20]
6000adc6:	88a3      	ldrh	r3, [r4, #4]
6000adc8:	b29b      	uxth	r3, r3
6000adca:	429a      	cmp	r2, r3
6000adcc:	d105      	bne.n	6000adda <LPSPI_MasterTransferHandleIRQ+0x7a>
6000adce:	7823      	ldrb	r3, [r4, #0]
6000add0:	b11b      	cbz	r3, 6000adda <LPSPI_MasterTransferHandleIRQ+0x7a>
                base->TCR &= ~(LPSPI_TCR_CONTC_MASK | LPSPI_TCR_CONT_MASK | LPSPI_TCR_TXMSK_MASK);
6000add2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
6000add4:	f423 1350 	bic.w	r3, r3, #3407872	; 0x340000
6000add8:	662b      	str	r3, [r5, #96]	; 0x60
            handle->txRemainingByteCount -= (uint32_t)handle->bytesPerFrame;
6000adda:	88a2      	ldrh	r2, [r4, #4]
6000addc:	6963      	ldr	r3, [r4, #20]
6000adde:	b292      	uxth	r2, r2
6000ade0:	1a9b      	subs	r3, r3, r2
6000ade2:	6163      	str	r3, [r4, #20]
    if ((handle->txRemainingByteCount == 0U) && (handle->rxRemainingByteCount == 0U) && (!handle->writeTcrInIsr))
6000ade4:	6963      	ldr	r3, [r4, #20]
6000ade6:	2b00      	cmp	r3, #0
6000ade8:	d157      	bne.n	6000ae9a <LPSPI_MasterTransferHandleIRQ+0x13a>
6000adea:	69a3      	ldr	r3, [r4, #24]
6000adec:	2b00      	cmp	r3, #0
6000adee:	d154      	bne.n	6000ae9a <LPSPI_MasterTransferHandleIRQ+0x13a>
6000adf0:	7863      	ldrb	r3, [r4, #1]
6000adf2:	2b00      	cmp	r3, #0
6000adf4:	d151      	bne.n	6000ae9a <LPSPI_MasterTransferHandleIRQ+0x13a>
        if (handle->rxData == NULL)
6000adf6:	6923      	ldr	r3, [r4, #16]
6000adf8:	b92b      	cbnz	r3, 6000ae06 <LPSPI_MasterTransferHandleIRQ+0xa6>
    return (base->SR);
6000adfa:	696b      	ldr	r3, [r5, #20]
            if ((LPSPI_GetStatusFlags(base) & (uint32_t)kLPSPI_TransferCompleteFlag) != 0U)
6000adfc:	055b      	lsls	r3, r3, #21
6000adfe:	d544      	bpl.n	6000ae8a <LPSPI_MasterTransferHandleIRQ+0x12a>
    base->SR = statusFlags; /*!< The status flags are cleared by writing 1 (w1c).*/
6000ae00:	f44f 6380 	mov.w	r3, #1024	; 0x400
6000ae04:	616b      	str	r3, [r5, #20]
            LPSPI_MasterTransferComplete(base, handle);
6000ae06:	4621      	mov	r1, r4
6000ae08:	4628      	mov	r0, r5
}
6000ae0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            LPSPI_MasterTransferComplete(base, handle);
6000ae0e:	f7ff bef7 	b.w	6000ac00 <LPSPI_MasterTransferComplete>
            while ((LPSPI_GetRxFifoCount(base) != 0U) && (handle->rxRemainingByteCount != 0U))
6000ae12:	69a2      	ldr	r2, [r4, #24]
6000ae14:	2a00      	cmp	r2, #0
6000ae16:	d0b7      	beq.n	6000ad88 <LPSPI_MasterTransferHandleIRQ+0x28>
 * @param base LPSPI peripheral address.
 * @return The data read from the data buffer.
 */
static inline uint32_t LPSPI_ReadData(LPSPI_Type *base)
{
    return (base->RDR);
6000ae18:	6f69      	ldr	r1, [r5, #116]	; 0x74
                --handle->readRegRemainingTimes;
6000ae1a:	6a22      	ldr	r2, [r4, #32]
6000ae1c:	3a01      	subs	r2, #1
6000ae1e:	6222      	str	r2, [r4, #32]
                readRegRemainingTimes = handle->readRegRemainingTimes;
6000ae20:	6a26      	ldr	r6, [r4, #32]
                if (handle->rxRemainingByteCount < (size_t)bytesEachRead)
6000ae22:	69a2      	ldr	r2, [r4, #24]
6000ae24:	42ba      	cmp	r2, r7
6000ae26:	d204      	bcs.n	6000ae32 <LPSPI_MasterTransferHandleIRQ+0xd2>
                    handle->bytesEachRead = (uint8_t)(handle->rxRemainingByteCount);
6000ae28:	69a2      	ldr	r2, [r4, #24]
6000ae2a:	b2d2      	uxtb	r2, r2
6000ae2c:	7262      	strb	r2, [r4, #9]
                    bytesEachRead         = handle->bytesEachRead;
6000ae2e:	7a67      	ldrb	r7, [r4, #9]
6000ae30:	b2ff      	uxtb	r7, r7
                LPSPI_SeparateReadData(handle->rxData, readData, bytesEachRead, isByteSwap);
6000ae32:	463a      	mov	r2, r7
6000ae34:	6920      	ldr	r0, [r4, #16]
6000ae36:	f7ff ff60 	bl	6000acfa <LPSPI_SeparateReadData>
                handle->rxData += bytesEachRead;
6000ae3a:	6922      	ldr	r2, [r4, #16]
6000ae3c:	443a      	add	r2, r7
6000ae3e:	6122      	str	r2, [r4, #16]
                handle->rxRemainingByteCount -= (size_t)bytesEachRead;
6000ae40:	69a2      	ldr	r2, [r4, #24]
6000ae42:	1bd2      	subs	r2, r2, r7
6000ae44:	61a2      	str	r2, [r4, #24]
6000ae46:	e79b      	b.n	6000ad80 <LPSPI_MasterTransferHandleIRQ+0x20>
    base->IER |= mask;
6000ae48:	69ab      	ldr	r3, [r5, #24]
6000ae4a:	f043 0302 	orr.w	r3, r3, #2
6000ae4e:	61ab      	str	r3, [r5, #24]
}
6000ae50:	e79d      	b.n	6000ad8e <LPSPI_MasterTransferHandleIRQ+0x2e>
            LPSPI_MasterTransferFillUpTxFifo(base, handle);
6000ae52:	4621      	mov	r1, r4
6000ae54:	4628      	mov	r0, r5
6000ae56:	f7ff ff09 	bl	6000ac6c <LPSPI_MasterTransferFillUpTxFifo>
6000ae5a:	e7c3      	b.n	6000ade4 <LPSPI_MasterTransferHandleIRQ+0x84>
    return ((base->FSR & LPSPI_FSR_TXCOUNT_MASK) >> LPSPI_FSR_TXCOUNT_SHIFT);
6000ae5c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        if ((LPSPI_GetTxFifoCount(base) < (handle->fifoSize)))
6000ae5e:	79a2      	ldrb	r2, [r4, #6]
6000ae60:	f003 031f 	and.w	r3, r3, #31
6000ae64:	429a      	cmp	r2, r3
6000ae66:	d9bd      	bls.n	6000ade4 <LPSPI_MasterTransferHandleIRQ+0x84>
            if ((handle->isPcsContinuous) && (handle->writeTcrInIsr) && (!handle->isTxMask))
6000ae68:	7823      	ldrb	r3, [r4, #0]
6000ae6a:	2b00      	cmp	r3, #0
6000ae6c:	d0ba      	beq.n	6000ade4 <LPSPI_MasterTransferHandleIRQ+0x84>
6000ae6e:	7863      	ldrb	r3, [r4, #1]
6000ae70:	2b00      	cmp	r3, #0
6000ae72:	d0b7      	beq.n	6000ade4 <LPSPI_MasterTransferHandleIRQ+0x84>
6000ae74:	78e3      	ldrb	r3, [r4, #3]
6000ae76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
6000ae7a:	2b00      	cmp	r3, #0
6000ae7c:	d1b2      	bne.n	6000ade4 <LPSPI_MasterTransferHandleIRQ+0x84>
                base->TCR             = (base->TCR & ~(LPSPI_TCR_CONTC_MASK));
6000ae7e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
6000ae80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
6000ae84:	662b      	str	r3, [r5, #96]	; 0x60
                handle->writeTcrInIsr = false;
6000ae86:	7062      	strb	r2, [r4, #1]
6000ae88:	e7ac      	b.n	6000ade4 <LPSPI_MasterTransferHandleIRQ+0x84>
    base->IER |= mask;
6000ae8a:	69ab      	ldr	r3, [r5, #24]
6000ae8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
6000ae90:	61ab      	str	r3, [r5, #24]
    base->IER &= ~mask;
6000ae92:	69ab      	ldr	r3, [r5, #24]
6000ae94:	f023 0303 	bic.w	r3, r3, #3
6000ae98:	61ab      	str	r3, [r5, #24]
}
6000ae9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

6000ae9c <LPSPI_MasterSetDelayScaler>:
    switch (whichDelay)
6000ae9c:	2a02      	cmp	r2, #2
6000ae9e:	d00c      	beq.n	6000aeba <LPSPI_MasterSetDelayScaler+0x1e>
6000aea0:	2a03      	cmp	r2, #3
6000aea2:	d011      	beq.n	6000aec8 <LPSPI_MasterSetDelayScaler+0x2c>
6000aea4:	2a01      	cmp	r2, #1
6000aea6:	d107      	bne.n	6000aeb8 <LPSPI_MasterSetDelayScaler+0x1c>
            base->CCR = (base->CCR & (~LPSPI_CCR_PCSSCK_MASK)) | LPSPI_CCR_PCSSCK(scaler);
6000aea8:	6c03      	ldr	r3, [r0, #64]	; 0x40
6000aeaa:	0409      	lsls	r1, r1, #16
6000aeac:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
6000aeb0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
            base->CCR = (base->CCR & (~LPSPI_CCR_DBT_MASK)) | LPSPI_CCR_DBT(scaler);
6000aeb4:	4319      	orrs	r1, r3
6000aeb6:	6401      	str	r1, [r0, #64]	; 0x40
}
6000aeb8:	4770      	bx	lr
            base->CCR = (base->CCR & (~LPSPI_CCR_SCKPCS_MASK)) | LPSPI_CCR_SCKPCS(scaler);
6000aeba:	6c03      	ldr	r3, [r0, #64]	; 0x40
6000aebc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
6000aec0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
6000aec4:	6403      	str	r3, [r0, #64]	; 0x40
            break;
6000aec6:	4770      	bx	lr
            base->CCR = (base->CCR & (~LPSPI_CCR_DBT_MASK)) | LPSPI_CCR_DBT(scaler);
6000aec8:	6c03      	ldr	r3, [r0, #64]	; 0x40
6000aeca:	0209      	lsls	r1, r1, #8
6000aecc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
6000aed0:	b289      	uxth	r1, r1
6000aed2:	e7ef      	b.n	6000aeb4 <LPSPI_MasterSetDelayScaler+0x18>

6000aed4 <LPSPI_CheckTransferArgument>:
{
6000aed4:	b5f0      	push	{r4, r5, r6, r7, lr}
6000aed6:	4604      	mov	r4, r0
    uint32_t bitsPerFrame  = ((base->TCR & LPSPI_TCR_FRAMESZ_MASK) >> LPSPI_TCR_FRAMESZ_SHIFT) + 1U;
6000aed8:	6e03      	ldr	r3, [r0, #96]	; 0x60
    uint32_t temp          = (base->CFGR1 & LPSPI_CFGR1_PINCFG_MASK);
6000aeda:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (transfer->dataSize == 0U)
6000aedc:	6888      	ldr	r0, [r1, #8]
6000aede:	b390      	cbz	r0, 6000af46 <LPSPI_CheckTransferArgument+0x72>
    if ((NULL == (transfer->txData)) && (NULL == (transfer->rxData)))
6000aee0:	680f      	ldr	r7, [r1, #0]
6000aee2:	b90f      	cbnz	r7, 6000aee8 <LPSPI_CheckTransferArgument+0x14>
6000aee4:	6848      	ldr	r0, [r1, #4]
6000aee6:	b370      	cbz	r0, 6000af46 <LPSPI_CheckTransferArgument+0x72>
    uint32_t bitsPerFrame  = ((base->TCR & LPSPI_TCR_FRAMESZ_MASK) >> LPSPI_TCR_FRAMESZ_SHIFT) + 1U;
6000aee8:	f3c3 000b 	ubfx	r0, r3, #0, #12
    uint32_t bytesPerFrame = (bitsPerFrame + 7U) / 8U;
6000aeec:	3008      	adds	r0, #8
    if (bytesPerFrame <= 4U)
6000aeee:	2827      	cmp	r0, #39	; 0x27
    uint32_t bytesPerFrame = (bitsPerFrame + 7U) / 8U;
6000aef0:	ea4f 03d0 	mov.w	r3, r0, lsr #3
    if (bytesPerFrame <= 4U)
6000aef4:	d807      	bhi.n	6000af06 <LPSPI_CheckTransferArgument+0x32>
        if ((transfer->dataSize % bytesPerFrame) != 0U)
6000aef6:	6888      	ldr	r0, [r1, #8]
6000aef8:	fbb0 f6f3 	udiv	r6, r0, r3
6000aefc:	fb03 0016 	mls	r0, r3, r6, r0
6000af00:	b138      	cbz	r0, 6000af12 <LPSPI_CheckTransferArgument+0x3e>
        return false;
6000af02:	2000      	movs	r0, #0
6000af04:	e01f      	b.n	6000af46 <LPSPI_CheckTransferArgument+0x72>
        if ((bytesPerFrame % 4U) != 0U)
6000af06:	f013 0003 	ands.w	r0, r3, #3
6000af0a:	d015      	beq.n	6000af38 <LPSPI_CheckTransferArgument+0x64>
            if (transfer->dataSize != bytesPerFrame)
6000af0c:	6888      	ldr	r0, [r1, #8]
6000af0e:	4298      	cmp	r0, r3
6000af10:	d1f7      	bne.n	6000af02 <LPSPI_CheckTransferArgument+0x2e>
    uint32_t temp          = (base->CFGR1 & LPSPI_CFGR1_PINCFG_MASK);
6000af12:	f005 7040 	and.w	r0, r5, #50331648	; 0x3000000
    if ((temp == LPSPI_CFGR1_PINCFG(kLPSPI_SdiInSdiOut)) || (temp == LPSPI_CFGR1_PINCFG(kLPSPI_SdoInSdoOut)))
6000af16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
6000af1a:	d002      	beq.n	6000af22 <LPSPI_CheckTransferArgument+0x4e>
6000af1c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
6000af20:	d103      	bne.n	6000af2a <LPSPI_CheckTransferArgument+0x56>
        if ((transfer->txData != NULL) && (transfer->rxData != NULL))
6000af22:	b18f      	cbz	r7, 6000af48 <LPSPI_CheckTransferArgument+0x74>
6000af24:	6849      	ldr	r1, [r1, #4]
6000af26:	2900      	cmp	r1, #0
6000af28:	d1eb      	bne.n	6000af02 <LPSPI_CheckTransferArgument+0x2e>
    if (isEdma && ((bytesPerFrame % 4U) == 3U))
6000af2a:	b192      	cbz	r2, 6000af52 <LPSPI_CheckTransferArgument+0x7e>
6000af2c:	f003 0303 	and.w	r3, r3, #3
6000af30:	1ed8      	subs	r0, r3, #3
6000af32:	bf18      	it	ne
6000af34:	2001      	movne	r0, #1
6000af36:	e006      	b.n	6000af46 <LPSPI_CheckTransferArgument+0x72>
            if ((transfer->dataSize % bytesPerFrame) != 0U)
6000af38:	688e      	ldr	r6, [r1, #8]
6000af3a:	fbb6 fcf3 	udiv	ip, r6, r3
6000af3e:	fb03 661c 	mls	r6, r3, ip, r6
6000af42:	2e00      	cmp	r6, #0
6000af44:	d0e5      	beq.n	6000af12 <LPSPI_CheckTransferArgument+0x3e>
}
6000af46:	bdf0      	pop	{r4, r5, r6, r7, pc}
            base->CFGR1 |= LPSPI_CFGR1_OUTCFG_MASK;
6000af48:	6a61      	ldr	r1, [r4, #36]	; 0x24
6000af4a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
6000af4e:	6261      	str	r1, [r4, #36]	; 0x24
6000af50:	e7eb      	b.n	6000af2a <LPSPI_CheckTransferArgument+0x56>
    return true;
6000af52:	2001      	movs	r0, #1
6000af54:	e7f7      	b.n	6000af46 <LPSPI_CheckTransferArgument+0x72>

6000af56 <LPUART_GetDefaultConfig>:
    (void)memset(config, 0, sizeof(*config));
6000af56:	2214      	movs	r2, #20
6000af58:	2100      	movs	r1, #0
{
6000af5a:	b510      	push	{r4, lr}
6000af5c:	4604      	mov	r4, r0
    (void)memset(config, 0, sizeof(*config));
6000af5e:	f7fe feef 	bl	60009d40 <memset>
    config->parityMode    = kLPUART_ParityDisabled;
6000af62:	2300      	movs	r3, #0
6000af64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    config->txCtsSource = kLPUART_CtsSourcePin;
6000af68:	e9c4 3302 	strd	r3, r3, [r4, #8]
    config->parityMode    = kLPUART_ParityDisabled;
6000af6c:	e9c4 2300 	strd	r2, r3, [r4]
    config->enableTx     = false;
6000af70:	8223      	strh	r3, [r4, #16]
}
6000af72:	bd10      	pop	{r4, pc}

6000af74 <GPIO_PinWrite>:
{
    assert(pin < 32U);
    if (output == 0U)
    {
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_CLEAR) && FSL_FEATURE_IGPIO_HAS_DR_CLEAR)
        base->DR_CLEAR = (1UL << pin);
6000af74:	2301      	movs	r3, #1
6000af76:	fa03 f101 	lsl.w	r1, r3, r1
    if (output == 0U)
6000af7a:	b912      	cbnz	r2, 6000af82 <GPIO_PinWrite+0xe>
        base->DR_CLEAR = (1UL << pin);
6000af7c:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
6000af80:	4770      	bx	lr
#endif
    }
    else
    {
#if (defined(FSL_FEATURE_IGPIO_HAS_DR_SET) && FSL_FEATURE_IGPIO_HAS_DR_SET)
        base->DR_SET = (1UL << pin);
6000af82:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
        base->DR |= (1UL << pin);  /* Set pin output to high level.*/
#endif
    }
}
6000af86:	4770      	bx	lr

6000af88 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
6000af88:	4770      	bx	lr

6000af8a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
6000af8a:	b140      	cbz	r0, 6000af9e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
6000af8c:	68c3      	ldr	r3, [r0, #12]
6000af8e:	7858      	ldrb	r0, [r3, #1]
6000af90:	f010 0001 	ands.w	r0, r0, #1
6000af94:	bf1e      	ittt	ne
6000af96:	7818      	ldrbne	r0, [r3, #0]
6000af98:	fab0 f080 	clzne	r0, r0
6000af9c:	0940      	lsrne	r0, r0, #5
}
6000af9e:	4770      	bx	lr

6000afa0 <arch_system_halt>:
	__asm__ volatile(
6000afa0:	f04f 0210 	mov.w	r2, #16
6000afa4:	f3ef 8311 	mrs	r3, BASEPRI
6000afa8:	f382 8812 	msr	BASEPRI_MAX, r2
6000afac:	f3bf 8f6f 	isb	sy
	for (;;) {
6000afb0:	e7fe      	b.n	6000afb0 <arch_system_halt+0x10>

6000afb2 <z_early_memset>:
	(void) memset(dst, c, n);
6000afb2:	f7fe bec5 	b.w	60009d40 <memset>

6000afb6 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
6000afb6:	f7fe beb8 	b.w	60009d2a <memcpy>

6000afba <k_is_in_isr>:
6000afba:	f3ef 8005 	mrs	r0, IPSR
}
6000afbe:	3800      	subs	r0, #0
6000afc0:	bf18      	it	ne
6000afc2:	2001      	movne	r0, #1
6000afc4:	4770      	bx	lr

6000afc6 <k_thread_name_get>:
}
6000afc6:	308c      	adds	r0, #140	; 0x8c
6000afc8:	4770      	bx	lr

6000afca <z_thread_mark_switched_out>:
}

void z_thread_mark_switched_out(void)
{
#if defined(CONFIG_SCHED_THREAD_USAGE) && !defined(CONFIG_USE_SWITCH)
	z_sched_usage_stop();
6000afca:	f7fe ba4d 	b.w	60009468 <z_sched_usage_stop>

6000afce <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
6000afce:	b508      	push	{r3, lr}
6000afd0:	f04f 0210 	mov.w	r2, #16
6000afd4:	f3ef 8311 	mrs	r3, BASEPRI
6000afd8:	f382 8812 	msr	BASEPRI_MAX, r2
6000afdc:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
6000afe0:	f7fa fd14 	bl	60005a0c <arch_cpu_idle>
6000afe4:	e7f4      	b.n	6000afd0 <idle+0x2>

6000afe6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
6000afe6:	b13a      	cbz	r2, 6000aff8 <z_impl_k_sem_init+0x12>
6000afe8:	428a      	cmp	r2, r1
6000afea:	d305      	bcc.n	6000aff8 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
6000afec:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
6000aff0:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
6000aff4:	2000      	movs	r0, #0
6000aff6:	4770      	bx	lr
		return -EINVAL;
6000aff8:	f06f 0015 	mvn.w	r0, #21
}
6000affc:	4770      	bx	lr

6000affe <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
6000affe:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
6000b002:	6013      	str	r3, [r2, #0]
	next->prev = prev;
6000b004:	605a      	str	r2, [r3, #4]
	node->next = NULL;
6000b006:	2300      	movs	r3, #0
	node->prev = NULL;
6000b008:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
6000b00c:	4770      	bx	lr

6000b00e <unpend_thread_no_timeout>:
{
6000b00e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
6000b010:	f7ff fff5 	bl	6000affe <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
6000b014:	7b43      	ldrb	r3, [r0, #13]
6000b016:	f023 0302 	bic.w	r3, r3, #2
6000b01a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
6000b01c:	2300      	movs	r3, #0
6000b01e:	6083      	str	r3, [r0, #8]
}
6000b020:	bd08      	pop	{r3, pc}

6000b022 <z_thread_timeout>:
{
6000b022:	4601      	mov	r1, r0
6000b024:	b510      	push	{r4, lr}
6000b026:	f04f 0310 	mov.w	r3, #16
6000b02a:	f3ef 8411 	mrs	r4, BASEPRI
6000b02e:	f383 8812 	msr	BASEPRI_MAX, r3
6000b032:	f3bf 8f6f 	isb	sy
		if (!killed) {
6000b036:	f810 3c13 	ldrb.w	r3, [r0, #-19]
6000b03a:	f013 0f28 	tst.w	r3, #40	; 0x28
6000b03e:	d10d      	bne.n	6000b05c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
6000b040:	f851 3c18 	ldr.w	r3, [r1, #-24]
	struct k_thread *thread = CONTAINER_OF(timeout,
6000b044:	3820      	subs	r0, #32
			if (thread->base.pended_on != NULL) {
6000b046:	b10b      	cbz	r3, 6000b04c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
6000b048:	f7ff ffe1 	bl	6000b00e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
6000b04c:	f811 3c13 	ldrb.w	r3, [r1, #-19]
6000b050:	f023 0314 	bic.w	r3, r3, #20
6000b054:	f801 3c13 	strb.w	r3, [r1, #-19]
			ready_thread(thread);
6000b058:	f7fd fd30 	bl	60008abc <ready_thread>
	__asm__ volatile(
6000b05c:	f384 8811 	msr	BASEPRI, r4
6000b060:	f3bf 8f6f 	isb	sy
}
6000b064:	bd10      	pop	{r4, pc}

6000b066 <add_to_waitq_locked>:
{
6000b066:	b538      	push	{r3, r4, r5, lr}
6000b068:	4604      	mov	r4, r0
6000b06a:	460d      	mov	r5, r1
	unready_thread(thread);
6000b06c:	f7fd fd5a 	bl	60008b24 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
6000b070:	7b63      	ldrb	r3, [r4, #13]
6000b072:	f043 0302 	orr.w	r3, r3, #2
6000b076:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
6000b078:	b1e5      	cbz	r5, 6000b0b4 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
6000b07a:	60a5      	str	r5, [r4, #8]
	return list->head == list;
6000b07c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000b07e:	429d      	cmp	r5, r3
6000b080:	d109      	bne.n	6000b096 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
6000b082:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
6000b084:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
6000b088:	601c      	str	r4, [r3, #0]
	list->tail = node;
6000b08a:	606c      	str	r4, [r5, #4]
}
6000b08c:	e012      	b.n	6000b0b4 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
6000b08e:	686a      	ldr	r2, [r5, #4]
6000b090:	4293      	cmp	r3, r2
6000b092:	d0f6      	beq.n	6000b082 <add_to_waitq_locked+0x1c>
6000b094:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
6000b096:	2b00      	cmp	r3, #0
6000b098:	d0f3      	beq.n	6000b082 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
6000b09a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
6000b09e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
6000b0a2:	428a      	cmp	r2, r1
6000b0a4:	d0f3      	beq.n	6000b08e <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
6000b0a6:	4291      	cmp	r1, r2
6000b0a8:	ddf1      	ble.n	6000b08e <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
6000b0aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
6000b0ac:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
6000b0b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
6000b0b2:	605c      	str	r4, [r3, #4]
}
6000b0b4:	bd38      	pop	{r3, r4, r5, pc}

6000b0b6 <z_ready_thread>:
{
6000b0b6:	b510      	push	{r4, lr}
	__asm__ volatile(
6000b0b8:	f04f 0310 	mov.w	r3, #16
6000b0bc:	f3ef 8411 	mrs	r4, BASEPRI
6000b0c0:	f383 8812 	msr	BASEPRI_MAX, r3
6000b0c4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
6000b0c8:	f7fd fcf8 	bl	60008abc <ready_thread>
	__asm__ volatile(
6000b0cc:	f384 8811 	msr	BASEPRI, r4
6000b0d0:	f3bf 8f6f 	isb	sy
}
6000b0d4:	bd10      	pop	{r4, pc}

6000b0d6 <z_unpend_thread_no_timeout>:
{
6000b0d6:	b508      	push	{r3, lr}
	__asm__ volatile(
6000b0d8:	f04f 0210 	mov.w	r2, #16
6000b0dc:	f3ef 8111 	mrs	r1, BASEPRI
6000b0e0:	f382 8812 	msr	BASEPRI_MAX, r2
6000b0e4:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
6000b0e8:	6883      	ldr	r3, [r0, #8]
6000b0ea:	b10b      	cbz	r3, 6000b0f0 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
6000b0ec:	f7ff ff8f 	bl	6000b00e <unpend_thread_no_timeout>
	__asm__ volatile(
6000b0f0:	f381 8811 	msr	BASEPRI, r1
6000b0f4:	f3bf 8f6f 	isb	sy
}
6000b0f8:	bd08      	pop	{r3, pc}

6000b0fa <z_unpend1_no_timeout>:
{
6000b0fa:	b508      	push	{r3, lr}
6000b0fc:	4603      	mov	r3, r0
	__asm__ volatile(
6000b0fe:	f04f 0210 	mov.w	r2, #16
6000b102:	f3ef 8111 	mrs	r1, BASEPRI
6000b106:	f382 8812 	msr	BASEPRI_MAX, r2
6000b10a:	f3bf 8f6f 	isb	sy
	return list->head == list;
6000b10e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000b110:	4283      	cmp	r3, r0
6000b112:	d007      	beq.n	6000b124 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
6000b114:	b108      	cbz	r0, 6000b11a <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
6000b116:	f7ff ff7a 	bl	6000b00e <unpend_thread_no_timeout>
	__asm__ volatile(
6000b11a:	f381 8811 	msr	BASEPRI, r1
6000b11e:	f3bf 8f6f 	isb	sy
}
6000b122:	bd08      	pop	{r3, pc}
6000b124:	2000      	movs	r0, #0
6000b126:	e7f8      	b.n	6000b11a <z_unpend1_no_timeout+0x20>

6000b128 <z_unpend_first_thread>:
{
6000b128:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
6000b12a:	f04f 0310 	mov.w	r3, #16
6000b12e:	f3ef 8511 	mrs	r5, BASEPRI
6000b132:	f383 8812 	msr	BASEPRI_MAX, r3
6000b136:	f3bf 8f6f 	isb	sy
	return list->head == list;
6000b13a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
6000b13c:	42a0      	cmp	r0, r4
6000b13e:	d00d      	beq.n	6000b15c <z_unpend_first_thread+0x34>
		if (thread != NULL) {
6000b140:	b134      	cbz	r4, 6000b150 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
6000b142:	4620      	mov	r0, r4
6000b144:	f7ff ff63 	bl	6000b00e <unpend_thread_no_timeout>
6000b148:	f104 0020 	add.w	r0, r4, #32
6000b14c:	f000 f81e 	bl	6000b18c <z_abort_timeout>
	__asm__ volatile(
6000b150:	f385 8811 	msr	BASEPRI, r5
6000b154:	f3bf 8f6f 	isb	sy
}
6000b158:	4620      	mov	r0, r4
6000b15a:	bd38      	pop	{r3, r4, r5, pc}
6000b15c:	2400      	movs	r4, #0
6000b15e:	e7f7      	b.n	6000b150 <z_unpend_first_thread+0x28>

6000b160 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
6000b160:	4603      	mov	r3, r0
6000b162:	b920      	cbnz	r0, 6000b16e <z_reschedule_irqlock+0xe>
6000b164:	f3ef 8205 	mrs	r2, IPSR
6000b168:	b90a      	cbnz	r2, 6000b16e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
6000b16a:	f7fa bd0f 	b.w	60005b8c <arch_swap>
6000b16e:	f383 8811 	msr	BASEPRI, r3
6000b172:	f3bf 8f6f 	isb	sy
}
6000b176:	4770      	bx	lr

6000b178 <z_reschedule_unlocked>:
	__asm__ volatile(
6000b178:	f04f 0310 	mov.w	r3, #16
6000b17c:	f3ef 8011 	mrs	r0, BASEPRI
6000b180:	f383 8812 	msr	BASEPRI_MAX, r3
6000b184:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
6000b188:	f7ff bfea 	b.w	6000b160 <z_reschedule_irqlock>

6000b18c <z_abort_timeout>:
{
6000b18c:	b510      	push	{r4, lr}
6000b18e:	f04f 0210 	mov.w	r2, #16
6000b192:	f3ef 8411 	mrs	r4, BASEPRI
6000b196:	f382 8812 	msr	BASEPRI_MAX, r2
6000b19a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
6000b19e:	6803      	ldr	r3, [r0, #0]
6000b1a0:	b13b      	cbz	r3, 6000b1b2 <z_abort_timeout+0x26>
			remove_timeout(to);
6000b1a2:	f7fd ff7b 	bl	6000909c <remove_timeout>
			ret = 0;
6000b1a6:	2000      	movs	r0, #0
	__asm__ volatile(
6000b1a8:	f384 8811 	msr	BASEPRI, r4
6000b1ac:	f3bf 8f6f 	isb	sy
}
6000b1b0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
6000b1b2:	f06f 0015 	mvn.w	r0, #21
6000b1b6:	e7f7      	b.n	6000b1a8 <z_abort_timeout+0x1c>

6000b1b8 <z_set_timeout_expiry>:
{
6000b1b8:	b570      	push	{r4, r5, r6, lr}
6000b1ba:	4604      	mov	r4, r0
6000b1bc:	460d      	mov	r5, r1
	__asm__ volatile(
6000b1be:	f04f 0310 	mov.w	r3, #16
6000b1c2:	f3ef 8611 	mrs	r6, BASEPRI
6000b1c6:	f383 8812 	msr	BASEPRI_MAX, r3
6000b1ca:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
6000b1ce:	f7fd ff3d 	bl	6000904c <next_timeout>
			      || (ticks <= next_to);
6000b1d2:	2801      	cmp	r0, #1
6000b1d4:	dd07      	ble.n	6000b1e6 <z_set_timeout_expiry+0x2e>
6000b1d6:	42a0      	cmp	r0, r4
6000b1d8:	db05      	blt.n	6000b1e6 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
6000b1da:	42a0      	cmp	r0, r4
6000b1dc:	4629      	mov	r1, r5
6000b1de:	bfa8      	it	ge
6000b1e0:	4620      	movge	r0, r4
6000b1e2:	f7fc f97d 	bl	600074e0 <sys_clock_set_timeout>
	__asm__ volatile(
6000b1e6:	f386 8811 	msr	BASEPRI, r6
6000b1ea:	f3bf 8f6f 	isb	sy
}
6000b1ee:	bd70      	pop	{r4, r5, r6, pc}

6000b1f0 <sys_clock_tick_get_32>:
{
6000b1f0:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
6000b1f2:	f7fe f859 	bl	600092a8 <sys_clock_tick_get>
}
6000b1f6:	bd08      	pop	{r3, pc}

6000b1f8 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
6000b1f8:	f7fe b856 	b.w	600092a8 <sys_clock_tick_get>

6000b1fc <k_timer_init>:
	timer->status = 0U;
6000b1fc:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
6000b1fe:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
6000b202:	f100 0218 	add.w	r2, r0, #24
	timer->status = 0U;
6000b206:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
6000b208:	6343      	str	r3, [r0, #52]	; 0x34
	list->tail = (sys_dnode_t *)list;
6000b20a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
6000b20e:	e9c0 3300 	strd	r3, r3, [r0]
}
6000b212:	4770      	bx	lr

6000b214 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
6000b214:	b510      	push	{r4, lr}
6000b216:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
6000b218:	f7ff ffb8 	bl	6000b18c <z_abort_timeout>

	if (inactive) {
6000b21c:	b9b0      	cbnz	r0, 6000b24c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
6000b21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
6000b220:	b10b      	cbz	r3, 6000b226 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
6000b222:	4620      	mov	r0, r4
6000b224:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
6000b226:	f104 0018 	add.w	r0, r4, #24
6000b22a:	f7ff ff66 	bl	6000b0fa <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
6000b22e:	b168      	cbz	r0, 6000b24c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
6000b230:	f7ff ff41 	bl	6000b0b6 <z_ready_thread>
	__asm__ volatile(
6000b234:	f04f 0310 	mov.w	r3, #16
6000b238:	f3ef 8011 	mrs	r0, BASEPRI
6000b23c:	f383 8812 	msr	BASEPRI_MAX, r3
6000b240:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
6000b244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
6000b248:	f7ff bf8a 	b.w	6000b160 <z_reschedule_irqlock>
6000b24c:	bd10      	pop	{r4, pc}

6000b24e <sched_cpu_update_usage>:
	if (!cpu->usage.track_usage) {
6000b24e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000b252:	b153      	cbz	r3, 6000b26a <sched_cpu_update_usage+0x1c>
	if (cpu->current != cpu->idle_thread) {
6000b254:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
6000b258:	429a      	cmp	r2, r3
6000b25a:	d006      	beq.n	6000b26a <sched_cpu_update_usage+0x1c>
		cpu->usage.total += cycles;
6000b25c:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
6000b260:	185b      	adds	r3, r3, r1
6000b262:	f142 0200 	adc.w	r2, r2, #0
6000b266:	e9c0 3208 	strd	r3, r2, [r0, #32]
}
6000b26a:	4770      	bx	lr
